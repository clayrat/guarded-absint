module Nipkow.Collecting where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool renaming (elim to elim·µá)
open import Data.Nat
open import Data.Nat.Order.Inductive
open import Data.String
open import Data.List
open import Data.Dec renaming (elim to elim·µà)
open import Data.Reflects renaming (dmap to dmap ≥)

open import List1
open import Nipkow.Lang

module Collsem
  (A : ùí∞)
  (sup : A ‚Üí A ‚Üí A)
  (leq : A ‚Üí A ‚Üí Bool)
  where

  open List1.List1

  -- semantics

  stepA : (String ‚Üí AExpr ‚Üí A ‚Üí A)
       ‚Üí (BExpr ‚Üí A ‚Üí A)
       ‚Üí A ‚Üí AnInstr A ‚Üí AnInstr A
  stepA f g s (AnSkip _)              = AnSkip s
  stepA f g s (AnAssign x e _)        = AnAssign x e (f x e s)
  stepA f g s (AnSeq c‚ÇÅ c‚ÇÇ)           = AnSeq (stepA f g s c‚ÇÅ) (stepA f g (post c‚ÇÅ) c‚ÇÇ)
  stepA f g s (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = AnITE b (g b s) (stepA f g p‚ÇÅ c‚ÇÅ) (g (BNot b) s) (stepA f g p‚ÇÇ c‚ÇÇ) (sup (post c‚ÇÅ) (post c‚ÇÇ))
  stepA f g s (AnWhile inv b p c q)   = AnWhile (sup s (post c)) b (g b inv) (stepA f g p c) (g (BNot b) inv)

  strip-stepA : ‚àÄ {f g s} c ‚Üí strip (stepA f g s c) Ôºù strip c
  strip-stepA (AnSkip _)            = refl
  strip-stepA (AnAssign x e _)      = refl
  strip-stepA (AnSeq c‚ÇÅ c‚ÇÇ)         = ap¬≤ Seq (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnITE b _ c‚ÇÅ _ c‚ÇÇ _) = ap¬≤ (ITE b) (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnWhile inv b _ c _) = ap (While b) (strip-stepA c)

  _‚â§‚Å±_ : AnInstr A ‚Üí AnInstr A ‚Üí Bool
  c‚ÇÅ ‚â§‚Å± c‚ÇÇ = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ and all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)

  skip-‚â§‚Å± : ‚àÄ {s c}
          ‚Üí Reflects (Œ£[ s' Íûâ A ] (c Ôºù AnSkip s') √ó is-true (leq s s')) (AnSkip s ‚â§‚Å± c)
  skip-‚â§‚Å± {s} {c} =
    ‚âÉ‚Üíreflects
      (Œ£-assoc ‚Åª¬π ‚àô Œ£-ap-snd Œª s' ‚Üí Œ£-ap-snd Œª e ‚Üí =‚Üí‚âÉ (ap (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) e))
      (reflects-and2 (reflects-strip-skip c) reflects-id)

  assign-‚â§‚Å± : ‚àÄ {x e s c}
            ‚Üí Reflects (Œ£[ s' Íûâ A ] (c Ôºù AnAssign x e s') √ó is-true (leq s s')) (AnAssign x e s ‚â§‚Å± c)
  assign-‚â§‚Å± {s} {c} =
    ‚âÉ‚Üíreflects
      (Œ£-assoc ‚Åª¬π ‚àô Œ£-ap-snd Œª s' ‚Üí Œ£-ap-snd Œª e ‚Üí =‚Üí‚âÉ (ap (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) e))
      (reflects-and2 (reflects-strip-assign c) reflects-id)

  seq-‚â§‚Å± : ‚àÄ {c‚ÇÅ c‚ÇÇ c}
         ‚Üí Reflects (Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ]
                           (c Ôºù AnSeq c‚ÇÉ c‚ÇÑ)
                         √ó is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÉ) √ó is-true (c‚ÇÇ ‚â§‚Å± c‚ÇÑ))
                    (AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c)
  seq-‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ} {c} =
    ‚âÉ‚Üíreflects
        (  Œ£-assoc ‚Åª¬π ‚àô Œ£-ap-snd Œª c‚ÇÉ ‚Üí Œ£-assoc ‚Åª¬π ‚àô Œ£-ap-snd Œª c‚ÇÑ ‚Üí Œ£-assoc ‚Åª¬π ‚àô Œ£-ap-snd Œª e ‚Üí Œ£-assoc ‚Åª¬π
         ‚àô (Œ£-ap-snd Œª e‚ÇÇ ‚Üí
               (Œ£-ap-snd Œª _ ‚Üí
                   =‚Üí‚âÉ (  ap (is-true ‚àò all2?‚ÇÅ leq (annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ) ‚àò annos) e
                        ‚àô ap is-true (all2?-++‚ÇÅ {as = annos c‚ÇÅ}
                                        (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                                                           (reflects-true (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÉ)) (e‚ÇÇ ‚Åª¬π)))))
                 ‚àô and-true-‚âÉ {x = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)})
             ‚àô √ó-ap (reflects-inj‚Çë (instr-is-set (strip c‚ÇÑ) (strip c‚ÇÇ)) (hlevel 1 ‚¶É x = H-Level-is-true ‚¶Ñ)
                      (reflects-instr (strip c‚ÇÑ) (strip c‚ÇÇ))
                      (subst (Reflects‚Å∞ (is-true (strip c‚ÇÇ ==‚Å± strip c‚ÇÑ))) (sym-instr {c‚ÇÅ = strip c‚ÇÇ}) reflects-id)) refl
             ‚àô √ó-assoc ‚àô √ó-ap √ó-swap refl ‚àô √ó-assoc ‚Åª¬π)
         ‚àô √ó-ap (reflects-inj‚Çë (instr-is-set (strip c‚ÇÉ) (strip c‚ÇÅ)) (hlevel 1 ‚¶É x = H-Level-is-true ‚¶Ñ)
                   (reflects-instr (strip c‚ÇÉ) (strip c‚ÇÅ))
                   (subst (Reflects‚Å∞ (is-true (strip c‚ÇÅ ==‚Å± strip c‚ÇÉ))) (sym-instr {c‚ÇÅ = strip c‚ÇÅ}) reflects-id)) refl
         ‚àô √ó-assoc
         ‚àô √ó-ap (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} ‚Åª¬π)
             (and-true-‚âÉ {x = strip c‚ÇÇ ==‚Å± strip c‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} ‚Åª¬π))
      (reflects-and2 (reflects-strip-seq c) reflects-id)

  ite-‚â§‚Å± : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c}
         ‚Üí Reflects (Œ£[ p‚ÇÉ Íûâ A ] Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ p‚ÇÑ Íûâ A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                          (c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ)
                        √ó is-true (leq p‚ÇÅ p‚ÇÉ) √ó is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÉ)
                        √ó is-true (leq p‚ÇÇ p‚ÇÑ) √ó is-true (c‚ÇÇ ‚â§‚Å± c‚ÇÑ)
                        √ó is-true (leq q‚ÇÅ q‚ÇÇ))
                    (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c)
  ite-‚â§‚Å± {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {c} =
    dmap ≥ (Œª where ((p‚ÇÉ , c‚ÇÉ , p‚ÇÑ , c‚ÇÑ , q‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ) , le) ‚Üí
                      let eq1' = reflects-true (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÉ)) (eq‚ÇÇ ‚Åª¬π)
                          eq2' = reflects-true (reflects-instr (strip c‚ÇÇ) (strip c‚ÇÑ)) (eq‚ÇÉ ‚Åª¬π)
                          le1 = and-true-‚âÉ {x = all2?‚ÇÅ leq ((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ))
                                                           ((p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ) ++‚ÇÅ (p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ))}
                                           {y = leq q‚ÇÅ q‚ÇÇ} $
                                subst is-true (all2?-‚à∂+‚ÇÅ {p = leq}
                                                         (  length‚ÇÅ-++ {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ}
                                                          ‚àô ap¬≤ _+_ (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} eq1')) (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÇ} eq2'))
                                                          ‚àô length‚ÇÅ-++ {xs = p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ} {ys = p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ} ‚Åª¬π)) $
                                subst (is-true ‚àò all2?‚ÇÅ leq (((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) eq‚ÇÅ le
                          le2 = and-true-‚âÉ {x = all2?‚ÇÅ leq (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) (p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ)}
                                            {y = all2?‚ÇÅ leq (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ) (p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ)} $
                                 subst is-true (all2?-++‚ÇÅ {p = leq} (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÉ} eq1'))) (le1 .fst)
                          le3 = and-true-‚âÉ {x = leq p‚ÇÅ p‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} $
                                subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {xs = annos c‚ÇÅ}) (le2 .fst)
                          le4 = and-true-‚âÉ {x = leq p‚ÇÇ p‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} $
                                subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {xs = annos c‚ÇÇ}) (le2 .snd)
                        in
                        p‚ÇÉ , c‚ÇÉ , p‚ÇÑ , c‚ÇÑ , q‚ÇÇ , eq‚ÇÅ
                      , le3 .fst
                      , (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} ‚Åª¬π $ eq1' , le3 .snd)
                      , le4 .fst
                      , (and-true-‚âÉ {x = strip c‚ÇÇ ==‚Å± strip c‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} ‚Åª¬π $ eq2' , le4. snd)
                      , le1 .snd)
          (_‚àò Œª where (p‚ÇÉ , c‚ÇÉ , p‚ÇÑ , c‚ÇÑ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) ‚Üí
                        let le2' = and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} $ le‚ÇÇ
                            le4' = and-true-‚âÉ {x = strip c‚ÇÇ ==‚Å± strip c‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} $ le‚ÇÑ
                         in
                          ( p‚ÇÉ , c‚ÇÉ , p‚ÇÑ , c‚ÇÑ , q‚ÇÇ , eq
                          , true-reflects (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÉ)) (le2' .fst) ‚Åª¬π
                          , true-reflects (reflects-instr (strip c‚ÇÇ) (strip c‚ÇÑ)) (le4' .fst) ‚Åª¬π)
                        , (subst (is-true ‚àò all2?‚ÇÅ leq (((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) (eq ‚Åª¬π) $
                           subst is-true (all2?-‚à∂+‚ÇÅ {p = leq} (length‚ÇÅ-++ {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ}
                                                          ‚àô ap¬≤ _+_ (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} (le2' .fst)))
                                                                    (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÇ} (le4' .fst)))
                                                          ‚àô length‚ÇÅ-++ {xs = p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ} {ys = p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ} ‚Åª¬π) ‚Åª¬π) $
                           and-true-‚âÉ {x = all2?‚ÇÅ leq ((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ))
                                                           ((p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ) ++‚ÇÅ (p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ))}
                                           {y = leq q‚ÇÅ q‚ÇÇ} ‚Åª¬π $
                             (subst is-true (all2?-++‚ÇÅ {p = leq} (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÉ} (le2'¬†.fst))) ‚Åª¬π) $
                              and-true-‚âÉ {x = all2?‚ÇÅ leq (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) (p‚ÇÉ ‚à∑‚ÇÅ annos c‚ÇÉ)}
                                         {y = all2?‚ÇÅ leq (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ) (p‚ÇÑ ‚à∑‚ÇÅ annos c‚ÇÑ)} ‚Åª¬π $
                                (subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {xs = annos c‚ÇÅ} ‚Åª¬π) $
                                 and-true-‚âÉ {x = leq p‚ÇÅ p‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} ‚Åª¬π $
                                 le‚ÇÅ , le2' .snd)
                              , (subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {xs = annos c‚ÇÇ} ‚Åª¬π) $
                                 and-true-‚âÉ {x = leq p‚ÇÇ p‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} ‚Åª¬π $
                                 le‚ÇÉ , le4' .snd))
                           , le‚ÇÖ))
          (reflects-and2 (reflects-strip-ite c) reflects-id)

  while-‚â§‚Å± : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c}
           ‚Üí Reflects (Œ£[ inv‚ÇÇ Íûâ A ] Œ£[ p‚ÇÇ Íûâ A ] Œ£[ c‚ÇÇ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                            (c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ)
                          √ó is-true (leq inv‚ÇÅ inv‚ÇÇ) √ó is-true (leq p‚ÇÅ p‚ÇÇ)
                          √ó is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÇ) √ó is-true (leq q‚ÇÅ q‚ÇÇ))
                      (AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c)
  while-‚â§‚Å± {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} =
    dmap ≥ (Œª where ((inv‚ÇÇ , p‚ÇÇ , c‚ÇÇ , q‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ) , le) ‚Üí
                      let eq' = reflects-true (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÇ)) (eq‚ÇÇ ‚Åª¬π)
                          le1 = and-true-‚âÉ {x = all2?‚ÇÅ leq (inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ))
                                                           (inv‚ÇÇ ‚à∑‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ))}
                                           {y = leq q‚ÇÅ q‚ÇÇ} $
                                subst is-true (all2?-‚à∂+‚ÇÅ {p = leq}
                                                        (ap (2 +_) (length-annos-same {c‚ÇÅ = c‚ÇÅ} eq'))) $
                                subst (is-true ‚àò all2?‚ÇÅ leq ((inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) eq‚ÇÅ le
                          le2 = and-true-‚âÉ {x = leq inv‚ÇÅ inv‚ÇÇ}
                                           {y = all2?‚ÇÅ leq (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)} $
                                subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {x = inv‚ÇÅ} {y = inv‚ÇÇ}
                                                        {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ})
                                              (le1 .fst)
                          le3 = and-true-‚âÉ {x = leq p‚ÇÅ p‚ÇÇ}
                                           {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} $
                                subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {x = p‚ÇÅ} {y = p‚ÇÇ}
                                                        {xs = annos c‚ÇÅ} {ys = annos c‚ÇÇ})
                                              (le2 .snd)
                       in
                        inv‚ÇÇ , p‚ÇÇ , c‚ÇÇ , q‚ÇÇ , eq‚ÇÅ , le2 .fst , le3 .fst
                      , (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} ‚Åª¬π $ eq' , (le3 .snd))
                      , le1 .snd)
          (_‚àò Œª where (inv‚ÇÇ , p‚ÇÇ , c‚ÇÇ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ) ‚Üí
                        let le3' = and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} $ le‚ÇÉ in
                        ( inv‚ÇÇ , p‚ÇÇ , c‚ÇÇ , q‚ÇÇ , eq
                          , true-reflects (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÇ)) (le3' .fst) ‚Åª¬π)
                        , (subst (is-true ‚àò all2?‚ÇÅ leq ((inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) (eq ‚Åª¬π) $
                           subst is-true (all2?-‚à∂+‚ÇÅ {p = leq}
                                                   (ap (2 +_) (length-annos-same {c‚ÇÅ = c‚ÇÅ} (le3' .fst))) ‚Åª¬π) $
                           and-true-‚âÉ {x = all2?‚ÇÅ leq (inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ))
                                                      (inv‚ÇÇ ‚à∑‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ))}
                                      {y = leq q‚ÇÅ q‚ÇÇ} ‚Åª¬π $
                             (subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {x = inv‚ÇÅ} {y = inv‚ÇÇ}
                                                        {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ} ‚Åª¬π) $
                              and-true-‚âÉ {x = leq inv‚ÇÅ inv‚ÇÇ}
                                           {y = all2?‚ÇÅ leq (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)} ‚Åª¬π $
                                le‚ÇÅ
                              , (subst is-true (all2?-‚à∂‚à∂‚ÇÅ {p = leq} {x = p‚ÇÅ} {y = p‚ÇÇ}
                                                        {xs = annos c‚ÇÅ} {ys = annos c‚ÇÇ} ‚Åª¬π) $
                                 and-true-‚âÉ {x = leq p‚ÇÅ p‚ÇÇ}
                                           {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} ‚Åª¬π $
                                 le‚ÇÇ , le3' .snd))
                          , le‚ÇÑ))
          (reflects-and2 (reflects-strip-while c) reflects-id)

  mono-post : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÇ) ‚Üí is-true (leq (post c‚ÇÅ) (post c‚ÇÇ))
  mono-post {c‚ÇÅ} {c‚ÇÇ} c =
    (and-true-‚âÉ {x = all id (zip-with leq (annos c‚ÇÅ .init) (annos c‚ÇÇ .init))}
                {y = leq (annos c‚ÇÅ .last) (annos c‚ÇÇ .last)} $
       (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} $ c) .snd) .snd
