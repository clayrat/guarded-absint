module Nipkow.Collecting where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool renaming (elim to elim·µá)
open import Data.Nat
open import Data.Nat.Order.Inductive
open import Data.String
open import Data.List
open import Data.Dec renaming (elim to elim·µà)
open import Data.Reflects renaming (dmap to dmap ≥)

open import List1
open import Nipkow.Lang

module Collsem
  (A : ùí∞)
  (sup : A ‚Üí A ‚Üí A)
  (leq : A ‚Üí A ‚Üí Bool)
  where

  open List1.List1

  -- semantics

  stepA : (String ‚Üí AExpr ‚Üí A ‚Üí A)
       ‚Üí (BExpr ‚Üí A ‚Üí A)
       ‚Üí A ‚Üí AnInstr A ‚Üí AnInstr A
  stepA f g s (AnSkip _)              = AnSkip s
  stepA f g s (AnAssign x e _)        = AnAssign x e (f x e s)
  stepA f g s (AnSeq c‚ÇÅ c‚ÇÇ)           = AnSeq (stepA f g s c‚ÇÅ) (stepA f g (post c‚ÇÅ) c‚ÇÇ)
  stepA f g s (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = AnITE b (g b s) (stepA f g p‚ÇÅ c‚ÇÅ) (g (BNot b) s) (stepA f g p‚ÇÇ c‚ÇÇ) (sup (post c‚ÇÅ) (post c‚ÇÇ))
  stepA f g s (AnWhile inv b p c q)   = AnWhile (sup s (post c)) b (g b inv) (stepA f g p c) (g (BNot b) inv)

  strip-stepA : ‚àÄ {f g s} c ‚Üí strip (stepA f g s c) Ôºù strip c
  strip-stepA (AnSkip _)            = refl
  strip-stepA (AnAssign x e _)      = refl
  strip-stepA (AnSeq c‚ÇÅ c‚ÇÇ)         = ap¬≤ Seq (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnITE b _ c‚ÇÅ _ c‚ÇÇ _) = ap¬≤ (ITE b) (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnWhile inv b _ c _) = ap (While b) (strip-stepA c)

  _‚â§‚Å±_ : AnInstr A ‚Üí AnInstr A ‚Üí Bool
  c‚ÇÅ ‚â§‚Å± c‚ÇÇ = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ and all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)

  skip-‚â§‚Å± : ‚àÄ {s c}
          ‚Üí Reflects (Œ£[ s' Íûâ A ] (c Ôºù AnSkip s') √ó is-true (leq s s')) (AnSkip s ‚â§‚Å± c)
  skip-‚â§‚Å± {s} {c} = dmap ≥ (Œª where ((s' , eq) , le) ‚Üí
                                       s' , eq , subst (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) eq le)
                          (_‚àò Œª where (s' , eq , le) ‚Üí
                                        (s' , eq) , subst (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) (eq ‚Åª¬π) le)
                          (reflects-and2 (reflects-strip-skip c) reflects-id)

  assign-‚â§‚Å± : ‚àÄ {x e s c}
            ‚Üí Reflects (Œ£[ s' Íûâ A ] (c Ôºù AnAssign x e s') √ó is-true (leq s s')) (AnAssign x e s ‚â§‚Å± c)
  assign-‚â§‚Å± {s} {c} = dmap ≥ (Œª where ((s' , eq) , le) ‚Üí
                                         s' , eq , subst (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) eq le)
                            (_‚àò Œª where (s' , eq , le) ‚Üí
                                          (s' , eq) , subst (is-true ‚àò all2?‚ÇÅ leq [ s ]‚ÇÅ ‚àò annos) (eq ‚Åª¬π) le)
                            (reflects-and2 (reflects-strip-assign c) reflects-id)

  seq-‚â§‚Å± : ‚àÄ {c‚ÇÅ c‚ÇÇ c}
         ‚Üí Reflects (Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ]
                           (c Ôºù AnSeq c‚ÇÉ c‚ÇÑ)
                         √ó is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÉ) √ó is-true (c‚ÇÇ ‚â§‚Å± c‚ÇÑ))
                    (AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c)
  seq-‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ} {c} =
    dmap ≥ (Œª where ((a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ) , le) ‚Üí
                       let eq1' = reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÇ ‚Åª¬π)
                           eq2' = reflects-true (reflects-instr (strip c‚ÇÇ) (strip a‚ÇÇ)) (eq‚ÇÉ ‚Åª¬π)
                           le12 = and-true-‚âÉ {x = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos a‚ÇÅ)} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos a‚ÇÇ)} $
                                  subst is-true (all2?-++‚ÇÅ (length-annos-same {c‚ÇÅ = c‚ÇÅ} eq1')) $
                                  subst (is-true ‚àò all2?‚ÇÅ leq (annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ) ‚àò annos) eq‚ÇÅ le
                        in
                          a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ
                        , (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip a‚ÇÅ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos a‚ÇÅ)} ‚Åª¬π $ eq1' , le12 .fst)
                        , (and-true-‚âÉ {x = strip c‚ÇÇ ==‚Å± strip a‚ÇÇ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos a‚ÇÇ)} ‚Åª¬π $ eq2' , le12 .snd))
          (_‚àò Œª where (c‚ÇÉ , c‚ÇÑ , eq , le‚ÇÅ , le‚ÇÇ) ‚Üí
                        let le1' = and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÉ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} $ le‚ÇÅ
                            le2' = and-true-‚âÉ {x = strip c‚ÇÇ ==‚Å± strip c‚ÇÑ} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} $ le‚ÇÇ
                          in
                          ( ( c‚ÇÉ , c‚ÇÑ , eq
                            , true-reflects (reflects-instr (strip c‚ÇÅ) (strip c‚ÇÉ)) (le1' .fst) ‚Åª¬π
                            , true-reflects (reflects-instr (strip c‚ÇÇ) (strip c‚ÇÑ)) (le2' .fst) ‚Åª¬π))
                          , subst (is-true ‚àò all2?‚ÇÅ leq (annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ) ‚àò annos) (eq ‚Åª¬π)
                                  (subst is-true
                                    (all2?-++‚ÇÅ (length-annos-same {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÉ} (le1' .fst)) ‚Åª¬π)
                                    (and-true-‚âÉ {x = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÉ)} {y = all2?‚ÇÅ leq (annos c‚ÇÇ) (annos c‚ÇÑ)} ‚Åª¬π $
                                     le1' .snd , le2' .snd)))
          (reflects-and2 (reflects-strip-seq c) reflects-id)

  mono-post : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí is-true (c‚ÇÅ ‚â§‚Å± c‚ÇÇ) ‚Üí is-true (leq (post c‚ÇÅ) (post c‚ÇÇ))
  mono-post {c‚ÇÅ} {c‚ÇÇ} c =
    (and-true-‚âÉ {x = all id (zip-with leq (annos c‚ÇÅ .init) (annos c‚ÇÇ .init))}
                {y = leq (annos c‚ÇÅ .last) (annos c‚ÇÇ .last)} $
       (and-true-‚âÉ {x = strip c‚ÇÅ ==‚Å± strip c‚ÇÇ} {y = all2?‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)} $ c) .snd) .snd

