module Nipkow.Lang where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool renaming (_==_ to _==·µá_)
open import Data.Nat renaming (_==_ to _==‚Åø_)
open import Data.Nat.Order.Inductive
open import Data.String
open import Data.List
open import Data.Dec renaming (elim to elim·µà)
open import Data.Reflects renaming (dmap to dmap ≥)

open import List1

private variable
  A : ùí∞

{- The programming language -}

data AExpr : ùí∞ where
  ANum  : ‚Ñï ‚Üí AExpr
  AVar  : String ‚Üí AExpr
  APlus : AExpr ‚Üí AExpr ‚Üí AExpr

module AExprCode where
  Code-aexpr : AExpr ‚Üí AExpr ‚Üí ùí∞
  Code-aexpr (ANum n)      (ANum m)      = n Ôºù m
  Code-aexpr (AVar x)      (AVar y)      = x Ôºù y
  Code-aexpr (APlus a‚ÇÅ a‚ÇÇ) (APlus a‚ÇÉ a‚ÇÑ) = Code-aexpr a‚ÇÅ a‚ÇÉ √ó Code-aexpr a‚ÇÇ a‚ÇÑ
  Code-aexpr _              _            = ‚ä•

  code-aexpr-refl : (a : AExpr) ‚Üí Code-aexpr a a
  code-aexpr-refl (ANum n)      = refl
  code-aexpr-refl (AVar x)      = refl
  code-aexpr-refl (APlus a‚ÇÅ a‚ÇÇ) = code-aexpr-refl a‚ÇÅ , code-aexpr-refl a‚ÇÇ

  encode-aexpr : ‚àÄ {a‚ÇÅ a‚ÇÇ} ‚Üí a‚ÇÅ Ôºù a‚ÇÇ ‚Üí Code-aexpr a‚ÇÅ a‚ÇÇ
  encode-aexpr {a‚ÇÅ} e = subst (Code-aexpr a‚ÇÅ) e (code-aexpr-refl a‚ÇÅ)

  decode-aexpr : ‚àÄ {a‚ÇÅ a‚ÇÇ} ‚Üí Code-aexpr a‚ÇÅ a‚ÇÇ ‚Üí a‚ÇÅ Ôºù a‚ÇÇ
  decode-aexpr {ANum n}      {ANum m}       c        = ap ANum c
  decode-aexpr {AVar x}      {AVar y}       c        = ap AVar c
  decode-aexpr {APlus a‚ÇÅ a‚ÇÇ} {APlus a‚ÇÉ a‚ÇÑ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ APlus (decode-aexpr c‚ÇÅ) (decode-aexpr c‚ÇÇ)

ANum-inj : ‚àÄ {n m} ‚Üí ANum n Ôºù ANum m ‚Üí n Ôºù m
ANum-inj = AExprCode.encode-aexpr

AVar-inj : ‚àÄ {x y} ‚Üí AVar x Ôºù AVar y ‚Üí x Ôºù y
AVar-inj = AExprCode.encode-aexpr

APlus-inj : ‚àÄ {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ} ‚Üí APlus a‚ÇÅ a‚ÇÇ Ôºù APlus a‚ÇÉ a‚ÇÑ ‚Üí (a‚ÇÅ Ôºù a‚ÇÉ) √ó (a‚ÇÇ Ôºù a‚ÇÑ)
APlus-inj e = let (c‚ÇÅ , c‚ÇÇ) = AExprCode.encode-aexpr e in AExprCode.decode-aexpr c‚ÇÅ , AExprCode.decode-aexpr c‚ÇÇ

ANum‚â†AVar : ‚àÄ {n y} ‚Üí ANum n ‚â† AVar y
ANum‚â†AVar = AExprCode.encode-aexpr

AVar‚â†ANum : ‚àÄ {x m} ‚Üí AVar x ‚â† ANum m
AVar‚â†ANum = AExprCode.encode-aexpr

ANum‚â†APlus : ‚àÄ {n a‚ÇÅ a‚ÇÇ} ‚Üí ANum n ‚â† APlus a‚ÇÅ a‚ÇÇ
ANum‚â†APlus = AExprCode.encode-aexpr

AVar‚â†APlus : ‚àÄ {x a‚ÇÅ a‚ÇÇ} ‚Üí AVar x ‚â† APlus a‚ÇÅ a‚ÇÇ
AVar‚â†APlus = AExprCode.encode-aexpr

APlus‚â†ANum : ‚àÄ {a‚ÇÅ a‚ÇÇ m} ‚Üí APlus a‚ÇÅ a‚ÇÇ ‚â† ANum m
APlus‚â†ANum = AExprCode.encode-aexpr

APlus‚â†AVar : ‚àÄ {a‚ÇÅ a‚ÇÇ y} ‚Üí APlus a‚ÇÅ a‚ÇÇ ‚â† AVar y
APlus‚â†AVar = AExprCode.encode-aexpr

_==·µÉ·µâ_ : AExpr ‚Üí AExpr ‚Üí Bool
(ANum n)      ==·µÉ·µâ (ANum m)      = n ==‚Åø m
(AVar x)      ==·µÉ·µâ (AVar y)      = ‚åä x ‚âü y ‚åã
(APlus e‚ÇÅ e‚ÇÇ) ==·µÉ·µâ (APlus e‚ÇÉ e‚ÇÑ) = e‚ÇÅ ==·µÉ·µâ e‚ÇÉ and e‚ÇÇ ==·µÉ·µâ e‚ÇÑ
_             ==·µÉ·µâ _             = false

reflects-aexpr : ‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí Reflects (a‚ÇÅ Ôºù a‚ÇÇ) (a‚ÇÅ ==·µÉ·µâ a‚ÇÇ)
reflects-aexpr (ANum n)      (ANum m)      = dmap ≥ (ap ANum) (Œª c ‚Üí c ‚àò ANum-inj) (==-reflects n m)
reflects-aexpr (ANum n)      (AVar y)      = of‚Åø ANum‚â†AVar
reflects-aexpr (ANum n)      (APlus a‚ÇÉ a‚ÇÑ) = of‚Åø ANum‚â†APlus
reflects-aexpr (AVar x)      (ANum m)      = of‚Åø AVar‚â†ANum
reflects-aexpr (AVar x)      (AVar y)      = dmap ≥ (ap AVar) (Œª c ‚Üí c ‚àò AVar-inj) (discrete-reflects! {x = x} {y = y})
reflects-aexpr (AVar x)      (APlus a‚ÇÉ a‚ÇÑ) = of‚Åø AVar‚â†APlus
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (ANum m)      = of‚Åø APlus‚â†ANum
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (AVar y)      = of‚Åø APlus‚â†AVar
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (APlus a‚ÇÉ a‚ÇÑ) =
  let r‚ÇÅ‚ÇÉ = reflects-aexpr a‚ÇÅ a‚ÇÉ
      r‚ÇÇ‚ÇÑ = reflects-aexpr a‚ÇÇ a‚ÇÑ
    in
  dmap ≥ (Œª x ‚Üí ap¬≤ APlus (true-reflects r‚ÇÅ‚ÇÉ (x .fst)) (true-reflects r‚ÇÇ‚ÇÑ (x .snd)))
        (Œª c ‚Üí c ‚àò (Œª b ‚Üí (reflects-true r‚ÇÅ‚ÇÉ (b .fst)) , reflects-true r‚ÇÇ‚ÇÑ (b .snd)) ‚àò APlus-inj)
        reflects-and

af : (String ‚Üí ‚Ñï) ‚Üí AExpr ‚Üí ‚Ñï
af g (ANum n)      = n
af g (AVar x)      = g x
af g (APlus e‚ÇÅ e‚ÇÇ) = af g e‚ÇÅ + af g e‚ÇÇ

data BExpr : ùí∞ where
  BC   : Bool ‚Üí BExpr
  BNot : BExpr ‚Üí BExpr
  BAnd : BExpr ‚Üí BExpr ‚Üí BExpr
  BLt  : AExpr ‚Üí AExpr ‚Üí BExpr

module BExprCode where
  Code-bexpr : BExpr ‚Üí BExpr ‚Üí ùí∞
  Code-bexpr (BC c‚ÇÅ)      (BC c‚ÇÇ)      = c‚ÇÅ Ôºù c‚ÇÇ
  Code-bexpr (BNot b‚ÇÅ)    (BNot b‚ÇÇ)    = Code-bexpr b‚ÇÅ b‚ÇÇ
  Code-bexpr (BAnd b‚ÇÅ b‚ÇÇ) (BAnd b‚ÇÉ b‚ÇÑ) = Code-bexpr b‚ÇÅ b‚ÇÉ √ó Code-bexpr b‚ÇÇ b‚ÇÑ
  Code-bexpr (BLt a‚ÇÅ a‚ÇÇ)  (BLt a‚ÇÉ a‚ÇÑ)  = (a‚ÇÅ Ôºù a‚ÇÉ) √ó (a‚ÇÇ Ôºù a‚ÇÑ)
  Code-bexpr _            _            = ‚ä•

  code-bexpr-refl : (b : BExpr) ‚Üí Code-bexpr b b
  code-bexpr-refl (BC c)       = refl
  code-bexpr-refl (BNot b)     = code-bexpr-refl b
  code-bexpr-refl (BAnd b‚ÇÅ b‚ÇÇ) = code-bexpr-refl b‚ÇÅ , code-bexpr-refl b‚ÇÇ
  code-bexpr-refl (BLt a‚ÇÅ a‚ÇÇ)  = refl , refl

  encode-bexpr : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí b‚ÇÅ Ôºù b‚ÇÇ ‚Üí Code-bexpr b‚ÇÅ b‚ÇÇ
  encode-bexpr {b‚ÇÅ} e = subst (Code-bexpr b‚ÇÅ) e (code-bexpr-refl b‚ÇÅ)

  decode-bexpr : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí Code-bexpr b‚ÇÅ b‚ÇÇ ‚Üí b‚ÇÅ Ôºù b‚ÇÇ
  decode-bexpr {BC c‚ÇÅ}      {BC c‚ÇÇ}       c        = ap BC c
  decode-bexpr {BNot b‚ÇÅ}    {BNot b‚ÇÇ}     c        = ap BNot (decode-bexpr c)
  decode-bexpr {BAnd b‚ÇÅ b‚ÇÇ} {BAnd b‚ÇÉ b‚ÇÑ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ BAnd (decode-bexpr c‚ÇÅ) (decode-bexpr c‚ÇÇ)
  decode-bexpr {BLt a‚ÇÅ a‚ÇÇ}  {BLt a‚ÇÉ a‚ÇÑ}  (c‚ÇÅ , c‚ÇÇ) = ap¬≤ BLt c‚ÇÅ c‚ÇÇ

bf : (String ‚Üí ‚Ñï) ‚Üí BExpr ‚Üí Bool
bf g (BC c)       = c
bf g (BNot b)     = not (bf g b)
bf g (BAnd b‚ÇÅ b‚ÇÇ) = bf g b‚ÇÅ and bf g b‚ÇÇ
bf g (BLt e‚ÇÅ e‚ÇÇ)  = af g e‚ÇÅ <·µá af g e‚ÇÇ

_==·µá·µâ_ : BExpr ‚Üí BExpr ‚Üí Bool
(BC c‚ÇÅ)      ==·µá·µâ (BC c‚ÇÇ)      = c‚ÇÅ ==·µá c‚ÇÇ
(BNot e‚ÇÅ)    ==·µá·µâ (BNot e‚ÇÇ)    = e‚ÇÅ ==·µá·µâ e‚ÇÇ
(BAnd e‚ÇÅ e‚ÇÇ) ==·µá·µâ (BAnd e‚ÇÉ e‚ÇÑ) = e‚ÇÅ ==·µá·µâ e‚ÇÉ and e‚ÇÇ ==·µá·µâ e‚ÇÑ
(BLt e‚ÇÅ e‚ÇÇ)  ==·µá·µâ (BLt e‚ÇÉ e‚ÇÑ)  = e‚ÇÅ ==·µÉ·µâ e‚ÇÉ and e‚ÇÇ ==·µÉ·µâ e‚ÇÑ
_            ==·µá·µâ _            = false

data Instr : ùí∞ where
  Skip   : Instr
  Assign : String ‚Üí AExpr ‚Üí Instr
  Seq    : Instr ‚Üí Instr ‚Üí Instr
  ITE    : BExpr ‚Üí Instr ‚Üí Instr ‚Üí Instr
  While  : BExpr ‚Üí Instr ‚Üí Instr

_==‚Å±_ : Instr ‚Üí Instr ‚Üí Bool
Skip           ==‚Å± Skip           = true
(Assign x e‚ÇÅ)  ==‚Å± (Assign y e‚ÇÇ)  = ‚åä x ‚âü y ‚åã and e‚ÇÅ ==·µÉ·µâ e‚ÇÇ
(Seq x‚ÇÅ x‚ÇÇ)    ==‚Å± (Seq y‚ÇÅ y‚ÇÇ)    = x‚ÇÅ ==‚Å± y‚ÇÅ and x‚ÇÇ ==‚Å± y‚ÇÇ
(ITE b‚ÇÅ x‚ÇÅ x‚ÇÇ) ==‚Å± (ITE b‚ÇÇ y‚ÇÅ y‚ÇÇ) = b‚ÇÅ ==·µá·µâ b‚ÇÇ and x‚ÇÅ ==‚Å± y‚ÇÅ and x‚ÇÇ ==‚Å± y‚ÇÇ
(While b‚ÇÅ x‚ÇÅ)  ==‚Å± (While b‚ÇÇ x‚ÇÇ)  = b‚ÇÅ ==·µá·µâ b‚ÇÇ and x‚ÇÅ ==‚Å± x‚ÇÇ
_              ==‚Å± _              = false

{- Annotated commands -}

data AnInstr (A : ùí∞) : ùí∞ where
  AnSkip   : (p : A) ‚Üí AnInstr A
  AnAssign : (x : String) ‚Üí (e : AExpr) ‚Üí (p : A) ‚Üí AnInstr A
  AnSeq    : (c‚ÇÅ : AnInstr A) ‚Üí (c‚ÇÇ : AnInstr A) ‚Üí AnInstr A
  AnITE    : (b : BExpr) ‚Üí (p‚ÇÅ : A) ‚Üí (c‚ÇÅ : AnInstr A) ‚Üí (p‚ÇÇ : A) ‚Üí (c‚ÇÇ : AnInstr A) ‚Üí (q : A) ‚Üí AnInstr A
  AnWhile  : (inv : A) ‚Üí (b : BExpr) ‚Üí (p : A)  ‚Üí (c : AnInstr A) ‚Üí (q : A) ‚Üí AnInstr A

module AnInstrCode where
  Code-AnInstr : AnInstr A ‚Üí AnInstr A ‚Üí ùí∞
  Code-AnInstr (AnSkip p‚ÇÅ)                (AnSkip p‚ÇÇ)                = p‚ÇÅ Ôºù p‚ÇÇ
  Code-AnInstr (AnAssign x‚ÇÅ e‚ÇÅ p‚ÇÅ)        (AnAssign x‚ÇÇ e‚ÇÇ p‚ÇÇ)        = (x‚ÇÅ Ôºù x‚ÇÇ) √ó (e‚ÇÅ Ôºù e‚ÇÇ) √ó (p‚ÇÅ Ôºù p‚ÇÇ)
  Code-AnInstr (AnSeq c‚ÇÅ c‚ÇÇ)              (AnSeq c‚ÇÉ c‚ÇÑ)              = Code-AnInstr c‚ÇÅ c‚ÇÉ √ó Code-AnInstr c‚ÇÇ c‚ÇÑ
  Code-AnInstr (AnITE b‚ÇÅ p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ)  (AnITE b‚ÇÇ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ)  =
    (b‚ÇÅ Ôºù b‚ÇÇ) √ó (p‚ÇÅ Ôºù p‚ÇÉ) √ó Code-AnInstr c‚ÇÅ c‚ÇÉ √ó (p‚ÇÇ Ôºù p‚ÇÑ) √ó Code-AnInstr c‚ÇÇ c‚ÇÑ √ó (q‚ÇÅ Ôºù q‚ÇÇ)
  Code-AnInstr (AnWhile inv‚ÇÅ b‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ) (AnWhile inv‚ÇÇ b‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ) =
    (inv‚ÇÅ Ôºù inv‚ÇÇ) √ó (b‚ÇÅ Ôºù b‚ÇÇ) √ó (p‚ÇÅ Ôºù p‚ÇÇ) √ó Code-AnInstr c‚ÇÅ c‚ÇÇ √ó (q‚ÇÅ Ôºù q‚ÇÇ)
  Code-AnInstr _                           _                         = ‚ä•

  code-aninstr-refl : (c : AnInstr A) ‚Üí Code-AnInstr c c
  code-aninstr-refl (AnSkip p)              = refl
  code-aninstr-refl (AnAssign x e p)        = refl , refl , refl
  code-aninstr-refl (AnSeq c‚ÇÅ c‚ÇÇ)           = code-aninstr-refl c‚ÇÅ , code-aninstr-refl c‚ÇÇ
  code-aninstr-refl (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = refl , refl , code-aninstr-refl c‚ÇÅ , refl , code-aninstr-refl c‚ÇÇ , refl
  code-aninstr-refl (AnWhile inv b p c q)   = refl , refl , refl , code-aninstr-refl c , refl

  encode-aninstr : ‚àÄ {c‚ÇÅ c‚ÇÇ : AnInstr A} ‚Üí c‚ÇÅ Ôºù c‚ÇÇ ‚Üí Code-AnInstr c‚ÇÅ c‚ÇÇ
  encode-aninstr {c‚ÇÅ} e = subst (Code-AnInstr c‚ÇÅ) e (code-aninstr-refl c‚ÇÅ)

  decode-aninstr : ‚àÄ {c‚ÇÅ c‚ÇÇ : AnInstr A} ‚Üí Code-AnInstr c‚ÇÅ c‚ÇÇ ‚Üí c‚ÇÅ Ôºù c‚ÇÇ
  decode-aninstr {c‚ÇÅ = AnSkip p‚ÇÅ}                {AnSkip p‚ÇÇ}                 cd                                 = ap AnSkip cd
  decode-aninstr {c‚ÇÅ = AnAssign x‚ÇÅ e‚ÇÅ p‚ÇÅ}        {AnAssign x‚ÇÇ e‚ÇÇ p‚ÇÇ}        (cd‚ÇÅ , cd‚ÇÇ , cd‚ÇÉ)                   =
    ap (Œª q ‚Üí AnAssign q e‚ÇÅ p‚ÇÅ) cd‚ÇÅ ‚àô ap¬≤ (AnAssign x‚ÇÇ) cd‚ÇÇ cd‚ÇÉ
  decode-aninstr {c‚ÇÅ = AnSeq c‚ÇÅ c‚ÇÇ}              {AnSeq c‚ÇÉ c‚ÇÑ}              (cd‚ÇÅ , cd‚ÇÇ)                         =
    ap¬≤ AnSeq (decode-aninstr cd‚ÇÅ) (decode-aninstr cd‚ÇÇ)
  decode-aninstr {c‚ÇÅ = AnITE b‚ÇÅ p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ}  {AnITE b‚ÇÇ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}  (cd‚ÇÅ , cd‚ÇÇ , cd‚ÇÉ , cd‚ÇÑ , cd‚ÇÖ , cd‚ÇÜ) =
    ap¬≤ (Œª z‚ÇÅ z‚ÇÇ ‚Üí AnITE z‚ÇÅ z‚ÇÇ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ) cd‚ÇÅ cd‚ÇÇ
    ‚àô ap¬≤ (Œª z‚ÇÅ z‚ÇÇ ‚Üí AnITE b‚ÇÇ p‚ÇÉ z‚ÇÅ z‚ÇÇ c‚ÇÇ q‚ÇÅ) (decode-aninstr cd‚ÇÉ) cd‚ÇÑ
    ‚àô ap¬≤ (AnITE b‚ÇÇ p‚ÇÉ c‚ÇÉ p‚ÇÑ) (decode-aninstr cd‚ÇÖ) cd‚ÇÜ
  decode-aninstr {c‚ÇÅ = AnWhile inv‚ÇÅ b‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ} {AnWhile inv‚ÇÇ b‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ} (cd‚ÇÅ , cd‚ÇÇ , cd‚ÇÉ , cd‚ÇÑ , cd‚ÇÖ)       =
    ap (Œª z ‚Üí AnWhile z b‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ) cd‚ÇÅ
    ‚àô ap¬≤ (Œª z‚ÇÅ z‚ÇÇ ‚Üí AnWhile inv‚ÇÇ z‚ÇÅ z‚ÇÇ c‚ÇÅ q‚ÇÅ) cd‚ÇÇ cd‚ÇÉ
    ‚àô ap¬≤ (AnWhile inv‚ÇÇ b‚ÇÇ p‚ÇÇ) (decode-aninstr cd‚ÇÑ) cd‚ÇÖ

AnSkip-inj : ‚àÄ {p‚ÇÅ p‚ÇÇ : A} ‚Üí AnSkip p‚ÇÅ Ôºù AnSkip p‚ÇÇ ‚Üí p‚ÇÅ Ôºù p‚ÇÇ
AnSkip-inj = AnInstrCode.encode-aninstr

AnSkip‚â†AnAssign : ‚àÄ {x e} {p q : A} ‚Üí AnSkip p ‚â† AnAssign x e q
AnSkip‚â†AnAssign = AnInstrCode.encode-aninstr

AnAssign‚â†AnSkip : ‚àÄ {x e} {p q : A} ‚Üí AnAssign x e p ‚â† AnSkip q
AnAssign‚â†AnSkip = AnInstrCode.encode-aninstr

AnSeq‚â†AnSkip : ‚àÄ {c‚ÇÅ c‚ÇÇ} {q : A} ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â† AnSkip q
AnSeq‚â†AnSkip = AnInstrCode.encode-aninstr

AnSeq‚â†AnAssign : ‚àÄ {x e c‚ÇÅ c‚ÇÇ} {p : A} ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â† AnAssign x e p
AnSeq‚â†AnAssign = AnInstrCode.encode-aninstr

AnITE‚â†AnSkip : ‚àÄ {b c‚ÇÅ c‚ÇÇ} {p‚ÇÅ p‚ÇÇ q r : A} ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q ‚â† AnSkip r
AnITE‚â†AnSkip = AnInstrCode.encode-aninstr

AnITE‚â†AnAssign : ‚àÄ {b c‚ÇÅ c‚ÇÇ x e} {p‚ÇÅ p‚ÇÇ q r : A} ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q ‚â† AnAssign x e r
AnITE‚â†AnAssign = AnInstrCode.encode-aninstr

AnWhile‚â†AnSkip : ‚àÄ {b c} {inv p q r : A} ‚Üí AnWhile inv b p c q ‚â† AnSkip r
AnWhile‚â†AnSkip = AnInstrCode.encode-aninstr

AnWhile‚â†AnAssign : ‚àÄ {b c x e} {inv p q r : A} ‚Üí AnWhile inv b p c q ‚â† AnAssign x e r
AnWhile‚â†AnAssign = AnInstrCode.encode-aninstr

annos : AnInstr A ‚Üí List1 A
annos (AnSkip p)              = [ p ]‚ÇÅ
annos (AnAssign _ _ p)        = [ p ]‚ÇÅ
annos (AnSeq c‚ÇÅ c‚ÇÇ)           = annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ
annos (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = to-list ((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) +‚à∂ q
annos (AnWhile inv b p c q)   = to-list (inv ‚à∑‚ÇÅ (q ‚à∑‚ÇÅ annos c)) +‚à∂ q

post : AnInstr A ‚Üí A
post = List1.last ‚àò annos

strip : AnInstr A ‚Üí Instr
strip (AnSkip _)            = Skip
strip (AnAssign x e _)      = Assign x e
strip (AnSeq c‚ÇÅ c‚ÇÇ)         = Seq (strip c‚ÇÅ) (strip c‚ÇÇ)
strip (AnITE b _ c‚ÇÅ _ c‚ÇÇ _) = ITE b (strip c‚ÇÅ) (strip c‚ÇÇ)
strip (AnWhile _ b _ c _)   = While b (strip c)
