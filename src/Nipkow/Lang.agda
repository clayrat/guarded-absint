module Nipkow.Lang where

open import Prelude
open import Data.Empty
open import Data.Bool renaming (_==_ to _==·µá_ ; ==-reflects to ==·µá-reflects)
open import Data.Nat renaming (_==_ to _==‚Åø_ ; ==-reflects to ==‚Åø-reflects)
open import Data.Nat.Order.Base
open import Data.Sum
open import Data.String
open import Data.Dec renaming (elim to elim·µà)
open import Data.Reflects renaming (dmap to dmap ≥)

open import Nipkow.State as S

{- The programming language -}

{- Arithmetic expressions -}

data AExpr : ùí∞ where
  ANum  : ‚Ñï ‚Üí AExpr
  AVar  : String ‚Üí AExpr
  APlus : AExpr ‚Üí AExpr ‚Üí AExpr

module AExprCode where
  Code-aexpr : AExpr ‚Üí AExpr ‚Üí ùí∞
  Code-aexpr (ANum n)      (ANum m)      = n Ôºù m
  Code-aexpr (AVar x)      (AVar y)      = x Ôºù y
  Code-aexpr (APlus a‚ÇÅ a‚ÇÇ) (APlus a‚ÇÉ a‚ÇÑ) = Code-aexpr a‚ÇÅ a‚ÇÉ √ó Code-aexpr a‚ÇÇ a‚ÇÑ
  Code-aexpr _              _            = ‚ä•

  code-aexpr-refl : (a : AExpr) ‚Üí Code-aexpr a a
  code-aexpr-refl (ANum n)      = refl
  code-aexpr-refl (AVar x)      = refl
  code-aexpr-refl (APlus a‚ÇÅ a‚ÇÇ) = code-aexpr-refl a‚ÇÅ , code-aexpr-refl a‚ÇÇ

  encode-aexpr : ‚àÄ {a‚ÇÅ a‚ÇÇ} ‚Üí a‚ÇÅ Ôºù a‚ÇÇ ‚Üí Code-aexpr a‚ÇÅ a‚ÇÇ
  encode-aexpr {a‚ÇÅ} e = subst (Code-aexpr a‚ÇÅ) e (code-aexpr-refl a‚ÇÅ)

  decode-aexpr : ‚àÄ {a‚ÇÅ a‚ÇÇ} ‚Üí Code-aexpr a‚ÇÅ a‚ÇÇ ‚Üí a‚ÇÅ Ôºù a‚ÇÇ
  decode-aexpr {ANum n}      {ANum m}       c        = ap ANum c
  decode-aexpr {AVar x}      {AVar y}       c        = ap AVar c
  decode-aexpr {APlus a‚ÇÅ a‚ÇÇ} {APlus a‚ÇÉ a‚ÇÑ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ APlus (decode-aexpr c‚ÇÅ) (decode-aexpr c‚ÇÇ)

  code-aexpr-is-prop : ‚àÄ a b ‚Üí is-prop (Code-aexpr a b)
  code-aexpr-is-prop (ANum n‚ÇÅ)     (ANum n‚ÇÇ)     = hlevel!
  code-aexpr-is-prop (ANum n‚ÇÅ)     (AVar x‚ÇÇ)     = hlevel!
  code-aexpr-is-prop (ANum n‚ÇÅ)     (APlus b‚ÇÅ b‚ÇÇ) = hlevel!
  code-aexpr-is-prop (AVar x‚ÇÅ)     (ANum n‚ÇÇ)     = hlevel!
  code-aexpr-is-prop (AVar x‚ÇÅ)     (AVar x‚ÇÇ)     = path-is-of-hlevel 1 (is-discrete‚Üíis-set string-is-discrete) x‚ÇÅ x‚ÇÇ
  code-aexpr-is-prop (AVar x‚ÇÅ)     (APlus b‚ÇÅ b‚ÇÇ) = hlevel!
  code-aexpr-is-prop (APlus a‚ÇÅ a‚ÇÇ) (ANum n‚ÇÇ)     = hlevel!
  code-aexpr-is-prop (APlus a‚ÇÅ a‚ÇÇ) (AVar x‚ÇÇ)     = hlevel!
  code-aexpr-is-prop (APlus a‚ÇÅ a‚ÇÇ) (APlus b‚ÇÅ b‚ÇÇ) = √ó-is-of-hlevel 1 (code-aexpr-is-prop a‚ÇÅ b‚ÇÅ) (code-aexpr-is-prop a‚ÇÇ b‚ÇÇ)

  AExpr-identity-system : is-identity-system Code-aexpr code-aexpr-refl
  AExpr-identity-system = set-identity-system code-aexpr-is-prop decode-aexpr

instance
  H-Level-AExpr : ‚àÄ {n} ‚Üí H-Level (2 + n) AExpr
  H-Level-AExpr = hlevel-basic-instance 2 $
                  identity-system‚Üíis-of-hlevel 1
                    AExprCode.AExpr-identity-system
                    AExprCode.code-aexpr-is-prop
  {-# OVERLAPPING H-Level-AExpr #-}

ANum-inj : ‚àÄ {n m} ‚Üí ANum n Ôºù ANum m ‚Üí n Ôºù m
ANum-inj = AExprCode.encode-aexpr

AVar-inj : ‚àÄ {x y} ‚Üí AVar x Ôºù AVar y ‚Üí x Ôºù y
AVar-inj = AExprCode.encode-aexpr

APlus-inj : ‚àÄ {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ} ‚Üí APlus a‚ÇÅ a‚ÇÇ Ôºù APlus a‚ÇÉ a‚ÇÑ ‚Üí (a‚ÇÅ Ôºù a‚ÇÉ) √ó (a‚ÇÇ Ôºù a‚ÇÑ)
APlus-inj e = let (c‚ÇÅ , c‚ÇÇ) = AExprCode.encode-aexpr e in AExprCode.decode-aexpr c‚ÇÅ , AExprCode.decode-aexpr c‚ÇÇ

ANum‚â†AVar : ‚àÄ {n y} ‚Üí ANum n ‚â† AVar y
ANum‚â†AVar = AExprCode.encode-aexpr

ANum‚â†APlus : ‚àÄ {n a‚ÇÅ a‚ÇÇ} ‚Üí ANum n ‚â† APlus a‚ÇÅ a‚ÇÇ
ANum‚â†APlus = AExprCode.encode-aexpr

AVar‚â†APlus : ‚àÄ {x a‚ÇÅ a‚ÇÇ} ‚Üí AVar x ‚â† APlus a‚ÇÅ a‚ÇÇ
AVar‚â†APlus = AExprCode.encode-aexpr

_==·µÉ·µâ_ : AExpr ‚Üí AExpr ‚Üí Bool
(ANum n)      ==·µÉ·µâ (ANum m)      = n ==‚Åø m
(AVar x)      ==·µÉ·µâ (AVar y)      = ‚åä x ‚âü y ‚åã
(APlus e‚ÇÅ e‚ÇÇ) ==·µÉ·µâ (APlus e‚ÇÉ e‚ÇÑ) = e‚ÇÅ ==·µÉ·µâ e‚ÇÉ and e‚ÇÇ ==·µÉ·µâ e‚ÇÑ
_             ==·µÉ·µâ _             = false

reflects-aexpr : ‚àÄ a‚ÇÅ a‚ÇÇ ‚Üí Reflects (a‚ÇÅ Ôºù a‚ÇÇ) (a‚ÇÅ ==·µÉ·µâ a‚ÇÇ)
reflects-aexpr (ANum n)      (ANum m)      = dmap ≥ (ap ANum) (_‚àò ANum-inj) (==‚Åø-reflects n m)
reflects-aexpr (ANum n)      (AVar y)      = of‚Åø ANum‚â†AVar
reflects-aexpr (ANum n)      (APlus a‚ÇÉ a‚ÇÑ) = of‚Åø ANum‚â†APlus
reflects-aexpr (AVar x)      (ANum m)      = of‚Åø (ANum‚â†AVar ‚àò _‚Åª¬π)
reflects-aexpr (AVar x)      (AVar y)      = dmap ≥ (ap AVar) (_‚àò AVar-inj) (discrete-reflects! {x = x} {y = y})
reflects-aexpr (AVar x)      (APlus a‚ÇÉ a‚ÇÑ) = of‚Åø AVar‚â†APlus
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (ANum m)      = of‚Åø (ANum‚â†APlus ‚àò _‚Åª¬π)
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (AVar y)      = of‚Åø (AVar‚â†APlus ‚àò _‚Åª¬π)
reflects-aexpr (APlus a‚ÇÅ a‚ÇÇ) (APlus a‚ÇÉ a‚ÇÑ) =
  dmap ≥ (Œª x ‚Üí ap¬≤ APlus (x .fst) (x .snd)) (_‚àò APlus-inj)
        (reflects-√ó (reflects-aexpr a‚ÇÅ a‚ÇÉ) (reflects-aexpr a‚ÇÇ a‚ÇÑ))

open S.State ‚Ñï 0

aval : State ‚Üí AExpr ‚Üí ‚Ñï
aval s (ANum n)      = n
aval s (AVar x)      = stlup s x
aval s (APlus e‚ÇÅ e‚ÇÇ) = aval s e‚ÇÅ + aval s e‚ÇÇ

{- Boolean expressions -}

data BExpr : ùí∞ where
  BC   : Bool ‚Üí BExpr
  BNot : BExpr ‚Üí BExpr
  BAnd : BExpr ‚Üí BExpr ‚Üí BExpr
  BLt  : AExpr ‚Üí AExpr ‚Üí BExpr

module BExprCode where
  Code-bexpr : BExpr ‚Üí BExpr ‚Üí ùí∞
  Code-bexpr (BC c‚ÇÅ)      (BC c‚ÇÇ)      = c‚ÇÅ Ôºù c‚ÇÇ
  Code-bexpr (BNot b‚ÇÅ)    (BNot b‚ÇÇ)    = Code-bexpr b‚ÇÅ b‚ÇÇ
  Code-bexpr (BAnd b‚ÇÅ b‚ÇÇ) (BAnd b‚ÇÉ b‚ÇÑ) = Code-bexpr b‚ÇÅ b‚ÇÉ √ó Code-bexpr b‚ÇÇ b‚ÇÑ
  Code-bexpr (BLt a‚ÇÅ a‚ÇÇ)  (BLt a‚ÇÉ a‚ÇÑ)  = (a‚ÇÅ Ôºù a‚ÇÉ) √ó (a‚ÇÇ Ôºù a‚ÇÑ)
  Code-bexpr _            _            = ‚ä•

  code-bexpr-refl : (b : BExpr) ‚Üí Code-bexpr b b
  code-bexpr-refl (BC c)       = refl
  code-bexpr-refl (BNot b)     = code-bexpr-refl b
  code-bexpr-refl (BAnd b‚ÇÅ b‚ÇÇ) = code-bexpr-refl b‚ÇÅ , code-bexpr-refl b‚ÇÇ
  code-bexpr-refl (BLt a‚ÇÅ a‚ÇÇ)  = refl , refl

  encode-bexpr : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí b‚ÇÅ Ôºù b‚ÇÇ ‚Üí Code-bexpr b‚ÇÅ b‚ÇÇ
  encode-bexpr {b‚ÇÅ} e = subst (Code-bexpr b‚ÇÅ) e (code-bexpr-refl b‚ÇÅ)

  decode-bexpr : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí Code-bexpr b‚ÇÅ b‚ÇÇ ‚Üí b‚ÇÅ Ôºù b‚ÇÇ
  decode-bexpr {BC c‚ÇÅ}      {BC c‚ÇÇ}       c        = ap BC c
  decode-bexpr {BNot b‚ÇÅ}    {BNot b‚ÇÇ}     c        = ap BNot (decode-bexpr c)
  decode-bexpr {BAnd b‚ÇÅ b‚ÇÇ} {BAnd b‚ÇÉ b‚ÇÑ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ BAnd (decode-bexpr c‚ÇÅ) (decode-bexpr c‚ÇÇ)
  decode-bexpr {BLt a‚ÇÅ a‚ÇÇ}  {BLt a‚ÇÉ a‚ÇÑ}  (c‚ÇÅ , c‚ÇÇ) = ap¬≤ BLt c‚ÇÅ c‚ÇÇ

  code-bexpr-is-prop : ‚àÄ a b ‚Üí is-prop (Code-bexpr a b)
  code-bexpr-is-prop (BC x)       (BC y)       = hlevel!
  code-bexpr-is-prop (BC x)       (BNot b)     = hlevel!
  code-bexpr-is-prop (BC x)       (BAnd b‚ÇÅ b‚ÇÇ) = hlevel!
  code-bexpr-is-prop (BC x)       (BLt b‚ÇÅ b‚ÇÇ)  = hlevel!
  code-bexpr-is-prop (BNot a)     (BC x)       = hlevel!
  code-bexpr-is-prop (BNot a)     (BNot b)     = code-bexpr-is-prop a b
  code-bexpr-is-prop (BNot a)     (BAnd b‚ÇÅ b‚ÇÇ) = hlevel!
  code-bexpr-is-prop (BNot a)     (BLt x x‚ÇÅ)   = hlevel!
  code-bexpr-is-prop (BAnd a‚ÇÅ a‚ÇÇ) (BC x)       = hlevel!
  code-bexpr-is-prop (BAnd a‚ÇÅ a‚ÇÇ) (BNot b)     = hlevel!
  code-bexpr-is-prop (BAnd a‚ÇÅ a‚ÇÇ) (BAnd b‚ÇÅ b‚ÇÇ) = √ó-is-of-hlevel 1 (code-bexpr-is-prop a‚ÇÅ b‚ÇÅ) (code-bexpr-is-prop a‚ÇÇ b‚ÇÇ)
  code-bexpr-is-prop (BAnd a‚ÇÅ a‚ÇÇ) (BLt b‚ÇÅ b‚ÇÇ)  = hlevel!
  code-bexpr-is-prop (BLt a‚ÇÅ a‚ÇÇ)  (BC x‚ÇÇ)      = hlevel!
  code-bexpr-is-prop (BLt a‚ÇÅ a‚ÇÇ)  (BNot b)     = hlevel!
  code-bexpr-is-prop (BLt a‚ÇÅ a‚ÇÇ)  (BAnd b‚ÇÅ b‚ÇÇ) = hlevel!
  code-bexpr-is-prop (BLt a‚ÇÅ a‚ÇÇ)  (BLt b‚ÇÅ b‚ÇÇ)  = hlevel!

  BExpr-identity-system : is-identity-system Code-bexpr code-bexpr-refl
  BExpr-identity-system = set-identity-system code-bexpr-is-prop decode-bexpr

instance
  H-Level-BExpr : ‚àÄ {n} ‚Üí H-Level (2 + n) BExpr
  H-Level-BExpr = hlevel-basic-instance 2 $
                  identity-system‚Üíis-of-hlevel 1
                    BExprCode.BExpr-identity-system
                    BExprCode.code-bexpr-is-prop
  {-# OVERLAPPING H-Level-BExpr #-}

BC-inj : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí BC c‚ÇÅ Ôºù BC c‚ÇÇ ‚Üí c‚ÇÅ Ôºù c‚ÇÇ
BC-inj = BExprCode.encode-bexpr

BNot-inj : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí BNot b‚ÇÅ Ôºù BNot b‚ÇÇ ‚Üí b‚ÇÅ Ôºù b‚ÇÇ
BNot-inj = BExprCode.decode-bexpr ‚àò BExprCode.encode-bexpr

BAnd-inj : ‚àÄ {b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ} ‚Üí BAnd b‚ÇÅ b‚ÇÇ Ôºù BAnd b‚ÇÉ b‚ÇÑ ‚Üí (b‚ÇÅ Ôºù b‚ÇÉ) √ó (b‚ÇÇ Ôºù b‚ÇÑ)
BAnd-inj e = let (h1 , h2) = BExprCode.encode-bexpr e in
             BExprCode.decode-bexpr h1 , BExprCode.decode-bexpr h2

BLt-inj : ‚àÄ {b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ} ‚Üí BLt b‚ÇÅ b‚ÇÇ Ôºù BLt b‚ÇÉ b‚ÇÑ ‚Üí (b‚ÇÅ Ôºù b‚ÇÉ) √ó (b‚ÇÇ Ôºù b‚ÇÑ)
BLt-inj = BExprCode.encode-bexpr

BC‚â†BNot : ‚àÄ {c e} ‚Üí BC c ‚â† BNot e
BC‚â†BNot = BExprCode.encode-bexpr

BC‚â†BAnd : ‚àÄ {c b‚ÇÅ b‚ÇÇ} ‚Üí BC c ‚â† BAnd b‚ÇÅ b‚ÇÇ
BC‚â†BAnd = BExprCode.encode-bexpr

BC‚â†BLt : ‚àÄ {c a‚ÇÅ a‚ÇÇ} ‚Üí BC c ‚â† BLt a‚ÇÅ a‚ÇÇ
BC‚â†BLt = BExprCode.encode-bexpr

BNot‚â†BAnd : ‚àÄ {b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí BNot b‚ÇÅ ‚â† BAnd b‚ÇÇ b‚ÇÉ
BNot‚â†BAnd = BExprCode.encode-bexpr

BNot‚â†BLt : ‚àÄ {b a‚ÇÅ a‚ÇÇ} ‚Üí BNot b ‚â† BLt a‚ÇÅ a‚ÇÇ
BNot‚â†BLt = BExprCode.encode-bexpr

BAnd‚â†BLt : ‚àÄ {b‚ÇÅ b‚ÇÇ a‚ÇÅ a‚ÇÇ} ‚Üí BAnd b‚ÇÅ b‚ÇÇ ‚â† BLt a‚ÇÅ a‚ÇÇ
BAnd‚â†BLt = BExprCode.encode-bexpr

_==·µá·µâ_ : BExpr ‚Üí BExpr ‚Üí Bool
(BC c‚ÇÅ)      ==·µá·µâ (BC c‚ÇÇ)      = c‚ÇÅ ==·µá c‚ÇÇ
(BNot e‚ÇÅ)    ==·µá·µâ (BNot e‚ÇÇ)    = e‚ÇÅ ==·µá·µâ e‚ÇÇ
(BAnd e‚ÇÅ e‚ÇÇ) ==·µá·µâ (BAnd e‚ÇÉ e‚ÇÑ) = e‚ÇÅ ==·µá·µâ e‚ÇÉ and e‚ÇÇ ==·µá·µâ e‚ÇÑ
(BLt e‚ÇÅ e‚ÇÇ)  ==·µá·µâ (BLt e‚ÇÉ e‚ÇÑ)  = e‚ÇÅ ==·µÉ·µâ e‚ÇÉ and e‚ÇÇ ==·µÉ·µâ e‚ÇÑ
_            ==·µá·µâ _            = false

reflects-bexpr : ‚àÄ b‚ÇÅ b‚ÇÇ ‚Üí Reflects (b‚ÇÅ Ôºù b‚ÇÇ) (b‚ÇÅ ==·µá·µâ b‚ÇÇ)
reflects-bexpr (BC c‚ÇÅ)      (BC c‚ÇÇ)      = dmap ≥ (ap BC) (_‚àò BC-inj) (==·µá-reflects c‚ÇÅ c‚ÇÇ)
reflects-bexpr (BC c‚ÇÅ)      (BNot e‚ÇÇ)    = of‚Åø BC‚â†BNot
reflects-bexpr (BC c‚ÇÅ)      (BAnd e‚ÇÉ e‚ÇÑ) = of‚Åø BC‚â†BAnd
reflects-bexpr (BC c‚ÇÅ)      (BLt e‚ÇÉ e‚ÇÑ)  = of‚Åø BC‚â†BLt
reflects-bexpr (BNot e‚ÇÅ)    (BC c‚ÇÇ)      = of‚Åø (BC‚â†BNot ‚àò _‚Åª¬π)
reflects-bexpr (BNot e‚ÇÅ)    (BNot e‚ÇÇ)    = dmap ≥ (ap BNot) (_‚àò BNot-inj) (reflects-bexpr e‚ÇÅ e‚ÇÇ)
reflects-bexpr (BNot e‚ÇÅ)    (BAnd e‚ÇÉ e‚ÇÑ) = of‚Åø BNot‚â†BAnd
reflects-bexpr (BNot e‚ÇÅ)    (BLt e‚ÇÉ e‚ÇÑ)  = of‚Åø BNot‚â†BLt
reflects-bexpr (BAnd e‚ÇÅ e‚ÇÇ) (BC c‚ÇÇ)      = of‚Åø (BC‚â†BAnd ‚àò _‚Åª¬π)
reflects-bexpr (BAnd e‚ÇÅ e‚ÇÇ) (BNot e‚ÇÉ)    = of‚Åø (BNot‚â†BAnd ‚àò _‚Åª¬π)
reflects-bexpr (BAnd e‚ÇÅ e‚ÇÇ) (BAnd e‚ÇÉ e‚ÇÑ) =
  dmap ≥ (Œª x ‚Üí ap¬≤ BAnd (x .fst) (x .snd)) (_‚àò BAnd-inj)
        (reflects-√ó (reflects-bexpr e‚ÇÅ e‚ÇÉ) (reflects-bexpr e‚ÇÇ e‚ÇÑ))
reflects-bexpr (BAnd e‚ÇÅ e‚ÇÇ) (BLt e‚ÇÉ e‚ÇÑ)  = of‚Åø BAnd‚â†BLt
reflects-bexpr (BLt e‚ÇÅ e‚ÇÇ)  (BC c‚ÇÇ)      = of‚Åø (BC‚â†BLt ‚àò _‚Åª¬π)
reflects-bexpr (BLt e‚ÇÅ e‚ÇÇ)  (BNot e‚ÇÉ)    = of‚Åø (BNot‚â†BLt ‚àò _‚Åª¬π)
reflects-bexpr (BLt e‚ÇÅ e‚ÇÇ)  (BAnd e‚ÇÉ e‚ÇÑ) = of‚Åø (BAnd‚â†BLt ‚àò _‚Åª¬π)
reflects-bexpr (BLt e‚ÇÅ e‚ÇÇ)  (BLt e‚ÇÉ e‚ÇÑ)  =
  dmap ≥ (Œª x ‚Üí ap¬≤ BLt (x .fst) (x .snd)) (_‚àò BLt-inj)
        (reflects-√ó (reflects-aexpr e‚ÇÅ e‚ÇÉ) (reflects-aexpr e‚ÇÇ e‚ÇÑ))

bval : State ‚Üí BExpr ‚Üí Bool
bval s (BC c)       = c
bval s (BNot b)     = not (bval s b)
bval s (BAnd b‚ÇÅ b‚ÇÇ) = bval s b‚ÇÅ and bval s b‚ÇÇ
bval s (BLt e‚ÇÅ e‚ÇÇ)  = aval s e‚ÇÅ <? aval s e‚ÇÇ

{- Commands -}

data Instr : ùí∞ where
  Skip   : Instr
  Assign : String ‚Üí AExpr ‚Üí Instr
  Seq    : Instr ‚Üí Instr ‚Üí Instr
  ITE    : BExpr ‚Üí Instr ‚Üí Instr ‚Üí Instr
  While  : BExpr ‚Üí Instr ‚Üí Instr

module InstrCode where
  Code-Instr : Instr ‚Üí Instr ‚Üí ùí∞
  Code-Instr  Skip           Skip          = ‚ä§
  Code-Instr (Assign x‚ÇÅ e‚ÇÅ) (Assign x‚ÇÇ e‚ÇÇ) = (x‚ÇÅ Ôºù x‚ÇÇ) √ó (e‚ÇÅ Ôºù e‚ÇÇ)
  Code-Instr (Seq c‚ÇÅ c‚ÇÇ)    (Seq c‚ÇÉ c‚ÇÑ)    = Code-Instr c‚ÇÅ c‚ÇÉ √ó Code-Instr c‚ÇÇ c‚ÇÑ
  Code-Instr (ITE b‚ÇÅ c‚ÇÅ c‚ÇÇ) (ITE b‚ÇÇ c‚ÇÉ c‚ÇÑ) = (b‚ÇÅ Ôºù b‚ÇÇ) √ó Code-Instr c‚ÇÅ c‚ÇÉ √ó Code-Instr c‚ÇÇ c‚ÇÑ
  Code-Instr (While b‚ÇÅ c‚ÇÅ)  (While b‚ÇÇ c‚ÇÇ)  = (b‚ÇÅ Ôºù b‚ÇÇ) √ó Code-Instr c‚ÇÅ c‚ÇÇ
  Code-Instr _                           _ = ‚ä•

  code-instr-refl : (c : Instr) ‚Üí Code-Instr c c
  code-instr-refl  Skip         = tt
  code-instr-refl (Assign x e)  = refl , refl
  code-instr-refl (Seq c‚ÇÅ c‚ÇÇ)   = code-instr-refl c‚ÇÅ , code-instr-refl c‚ÇÇ
  code-instr-refl (ITE b c‚ÇÅ c‚ÇÇ) = refl , code-instr-refl c‚ÇÅ , code-instr-refl c‚ÇÇ
  code-instr-refl (While b c)   = refl , code-instr-refl c

  encode-instr : ‚àÄ {c‚ÇÅ c‚ÇÇ : Instr} ‚Üí c‚ÇÅ Ôºù c‚ÇÇ ‚Üí Code-Instr c‚ÇÅ c‚ÇÇ
  encode-instr {c‚ÇÅ} e = subst (Code-Instr c‚ÇÅ) e (code-instr-refl c‚ÇÅ)

  decode-instr : ‚àÄ {c‚ÇÅ c‚ÇÇ : Instr} ‚Üí Code-Instr c‚ÇÅ c‚ÇÇ ‚Üí c‚ÇÅ Ôºù c‚ÇÇ
  decode-instr {c‚ÇÅ = Skip}          {c‚ÇÇ = Skip}           cd               = refl
  decode-instr {c‚ÇÅ = Assign x‚ÇÅ e‚ÇÅ}  {c‚ÇÇ = Assign x‚ÇÇ e‚ÇÇ}  (cd‚ÇÅ , cd‚ÇÇ)       = ap¬≤ Assign cd‚ÇÅ cd‚ÇÇ
  decode-instr {c‚ÇÅ = Seq c‚ÇÅ c‚ÇÇ}     {c‚ÇÇ = Seq c‚ÇÉ c‚ÇÑ}     (cd‚ÇÅ , cd‚ÇÇ)       =
    ap¬≤ Seq (decode-instr cd‚ÇÅ) (decode-instr cd‚ÇÇ)
  decode-instr {c‚ÇÅ = ITE b‚ÇÅ c‚ÇÅ c‚ÇÇ}  {c‚ÇÇ = ITE b‚ÇÇ c‚ÇÉ c‚ÇÑ}  (cd‚ÇÅ , cd‚ÇÇ , cd‚ÇÉ) =
      ap (Œª z ‚Üí ITE z c‚ÇÅ c‚ÇÇ) cd‚ÇÅ
    ‚àô ap¬≤ (ITE b‚ÇÇ) (decode-instr cd‚ÇÇ) (decode-instr cd‚ÇÉ)
  decode-instr {c‚ÇÅ = While b‚ÇÅ c‚ÇÅ}   {c‚ÇÇ = While b‚ÇÇ c‚ÇÇ}   (cd‚ÇÅ , cd‚ÇÇ)       =
    ap¬≤ While cd‚ÇÅ (decode-instr cd‚ÇÇ)

Assign-inj : ‚àÄ {x e y g} ‚Üí Assign x e Ôºù Assign y g ‚Üí (x Ôºù y) √ó (e Ôºù g)
Assign-inj = InstrCode.encode-instr

Seq-inj : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ} ‚Üí Seq c‚ÇÅ c‚ÇÇ Ôºù Seq c‚ÇÉ c‚ÇÑ ‚Üí (c‚ÇÅ Ôºù c‚ÇÉ) √ó (c‚ÇÇ Ôºù c‚ÇÑ)
Seq-inj e = let (h1 , h2) = InstrCode.encode-instr e in
            InstrCode.decode-instr h1 , InstrCode.decode-instr h2

ITE-inj : ‚àÄ {b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ} ‚Üí ITE b‚ÇÅ c‚ÇÅ c‚ÇÇ Ôºù ITE b‚ÇÇ c‚ÇÉ c‚ÇÑ ‚Üí (b‚ÇÅ Ôºù b‚ÇÇ) √ó (c‚ÇÅ Ôºù c‚ÇÉ) √ó (c‚ÇÇ Ôºù c‚ÇÑ)
ITE-inj e = let (h1 , h2 , h3) = InstrCode.encode-instr e in
            h1 , InstrCode.decode-instr h2 , InstrCode.decode-instr h3

While-inj : ‚àÄ {b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ} ‚Üí While b‚ÇÅ c‚ÇÅ Ôºù While b‚ÇÇ c‚ÇÇ ‚Üí (b‚ÇÅ Ôºù b‚ÇÇ) √ó (c‚ÇÅ Ôºù c‚ÇÇ)
While-inj e = let (h1 , h2) = InstrCode.encode-instr e in
              h1 , InstrCode.decode-instr h2

Skip‚â†Assign : ‚àÄ {x e} ‚Üí Skip ‚â† Assign x e
Skip‚â†Assign = InstrCode.encode-instr

Skip‚â†Seq : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí Skip ‚â† Seq c‚ÇÅ c‚ÇÇ
Skip‚â†Seq = InstrCode.encode-instr

Skip‚â†ITE : ‚àÄ {b c‚ÇÅ c‚ÇÇ} ‚Üí Skip ‚â† ITE b c‚ÇÅ c‚ÇÇ
Skip‚â†ITE = InstrCode.encode-instr

Skip‚â†While : ‚àÄ {b c} ‚Üí Skip ‚â† While b c
Skip‚â†While = InstrCode.encode-instr

Assign‚â†Seq : ‚àÄ {x e c‚ÇÅ c‚ÇÇ} ‚Üí Assign x e ‚â† Seq c‚ÇÅ c‚ÇÇ
Assign‚â†Seq = InstrCode.encode-instr

Assign‚â†ITE : ‚àÄ {b c‚ÇÅ c‚ÇÇ x e} ‚Üí Assign x e ‚â† ITE b c‚ÇÅ c‚ÇÇ
Assign‚â†ITE = InstrCode.encode-instr

Assign‚â†While : ‚àÄ {b c x e} ‚Üí Assign x e ‚â† While b c
Assign‚â†While = InstrCode.encode-instr

Seq‚â†ITE : ‚àÄ {b c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ} ‚Üí Seq c‚ÇÅ c‚ÇÇ ‚â† ITE b c‚ÇÉ c‚ÇÑ
Seq‚â†ITE = InstrCode.encode-instr

Seq‚â†While : ‚àÄ {b c‚ÇÅ c‚ÇÇ c} ‚Üí Seq c‚ÇÅ c‚ÇÇ ‚â† While b c
Seq‚â†While = InstrCode.encode-instr

ITE‚â†While : ‚àÄ {b‚ÇÅ c‚ÇÅ c‚ÇÇ b‚ÇÇ c‚ÇÉ} ‚Üí ITE b‚ÇÅ c‚ÇÅ c‚ÇÇ  ‚â† While b‚ÇÇ c‚ÇÉ
ITE‚â†While = InstrCode.encode-instr

_==‚Å±_ : Instr ‚Üí Instr ‚Üí Bool
Skip           ==‚Å± Skip           = true
(Assign x e‚ÇÅ)  ==‚Å± (Assign y e‚ÇÇ)  = ‚åä x ‚âü y ‚åã and e‚ÇÅ ==·µÉ·µâ e‚ÇÇ
(Seq x‚ÇÅ x‚ÇÇ)    ==‚Å± (Seq y‚ÇÅ y‚ÇÇ)    = x‚ÇÅ ==‚Å± y‚ÇÅ and x‚ÇÇ ==‚Å± y‚ÇÇ
(ITE b‚ÇÅ x‚ÇÅ x‚ÇÇ) ==‚Å± (ITE b‚ÇÇ y‚ÇÅ y‚ÇÇ) = b‚ÇÅ ==·µá·µâ b‚ÇÇ and x‚ÇÅ ==‚Å± y‚ÇÅ and x‚ÇÇ ==‚Å± y‚ÇÇ
(While b‚ÇÅ x‚ÇÅ)  ==‚Å± (While b‚ÇÇ x‚ÇÇ)  = b‚ÇÅ ==·µá·µâ b‚ÇÇ and x‚ÇÅ ==‚Å± x‚ÇÇ
_              ==‚Å± _              = false

reflects-instr : ‚àÄ c‚ÇÅ c‚ÇÇ ‚Üí Reflects (c‚ÇÅ Ôºù c‚ÇÇ) (c‚ÇÅ ==‚Å± c‚ÇÇ)
reflects-instr  Skip           Skip          = of ∏ refl
reflects-instr  Skip          (Assign _ _)   = of‚Åø Skip‚â†Assign
reflects-instr  Skip          (Seq _ _)      = of‚Åø Skip‚â†Seq
reflects-instr  Skip          (ITE _ _ _)    = of‚Åø Skip‚â†ITE
reflects-instr  Skip          (While _ _)    = of‚Åø Skip‚â†While
reflects-instr (Assign _ _)    Skip          = of‚Åø (Skip‚â†Assign ‚àò _‚Åª¬π)
reflects-instr (Assign x e)   (Assign y g)   =
  dmap ≥ (Œª x ‚Üí ap¬≤ Assign (x .fst) (x .snd)) (_‚àò Assign-inj)
        (reflects-√ó (discrete-reflects! {x = x} {y = y}) (reflects-aexpr e g))
reflects-instr (Assign _ _)   (Seq _ _)      = of‚Åø Assign‚â†Seq
reflects-instr (Assign _ _)   (ITE _ _ _)    = of‚Åø Assign‚â†ITE
reflects-instr (Assign _ _)   (While _ _)    = of‚Åø Assign‚â†While
reflects-instr (Seq _ _)       Skip          = of‚Åø (Skip‚â†Seq ‚àò _‚Åª¬π)
reflects-instr (Seq _ _)      (Assign _ _)   = of‚Åø (Assign‚â†Seq ‚àò _‚Åª¬π)
reflects-instr (Seq c‚ÇÅ c‚ÇÇ)    (Seq c‚ÇÉ c‚ÇÑ)    =
  dmap ≥ (Œª x ‚Üí ap¬≤ Seq (x .fst) (x .snd)) (_‚àò Seq-inj)
        (reflects-√ó (reflects-instr c‚ÇÅ c‚ÇÉ) (reflects-instr c‚ÇÇ c‚ÇÑ))
reflects-instr (Seq _ _)      (ITE _ _ _)    = of‚Åø Seq‚â†ITE
reflects-instr (Seq _ _)      (While _ _)    = of‚Åø Seq‚â†While
reflects-instr (ITE _ _ _)     Skip          = of‚Åø (Skip‚â†ITE ‚àò _‚Åª¬π)
reflects-instr (ITE _ _ _)    (Assign _ _)   = of‚Åø (Assign‚â†ITE ‚àò _‚Åª¬π)
reflects-instr (ITE _ _ _)    (Seq _ _)      = of‚Åø (Seq‚â†ITE ‚àò _‚Åª¬π)
reflects-instr (ITE b‚ÇÅ c‚ÇÅ c‚ÇÇ) (ITE b‚ÇÇ c‚ÇÉ c‚ÇÑ) =
  dmap ≥ (Œª x ‚Üí ap (Œª q ‚Üí ITE q c‚ÇÅ c‚ÇÇ) (x .fst) ‚àô ap¬≤ (ITE b‚ÇÇ) (x .snd .fst) (x .snd .snd)) (_‚àò ITE-inj)
        (reflects-√ó¬≥ (reflects-bexpr b‚ÇÅ b‚ÇÇ) (reflects-instr c‚ÇÅ c‚ÇÉ) (reflects-instr c‚ÇÇ c‚ÇÑ))
reflects-instr (ITE _ _ _)    (While _ _)    = of‚Åø ITE‚â†While
reflects-instr (While _ _)     Skip          = of‚Åø (Skip‚â†While ‚àò _‚Åª¬π)
reflects-instr (While _ _)    (Assign _ _)   = of‚Åø (Assign‚â†While ‚àò _‚Åª¬π)
reflects-instr (While _ _)    (Seq _ _)      = of‚Åø (Seq‚â†While ‚àò _‚Åª¬π)
reflects-instr (While _ _)    (ITE _ _ _)    = of‚Åø (ITE‚â†While ‚àò _‚Åª¬π)
reflects-instr (While b‚ÇÅ c‚ÇÅ)  (While b‚ÇÇ c‚ÇÇ)  =
  dmap ≥ (Œª x ‚Üí ap¬≤ While (x .fst) (x .snd)) (_‚àò While-inj)
        (reflects-√ó (reflects-bexpr b‚ÇÅ b‚ÇÇ) (reflects-instr c‚ÇÅ c‚ÇÇ))

sym-instr : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ==‚Å± c‚ÇÇ Ôºù c‚ÇÇ ==‚Å± c‚ÇÅ
sym-instr {c‚ÇÅ} {c‚ÇÇ} = reflects-bool-inj (reflects-instr c‚ÇÅ c‚ÇÇ)
                                        (dmap ≥ _‚Åª¬π (_‚àò _‚Åª¬π) (reflects-instr c‚ÇÇ c‚ÇÅ))

instance
  instr-is-discrete : is-discrete Instr
  instr-is-discrete {x} {y} = (x ==‚Å± y) because reflects-instr x y

instr-is-set : is-set Instr
instr-is-set = is-discrete‚Üíis-set instr-is-discrete

asize : Instr ‚Üí ‚Ñï
asize  Skip         = 1
asize (Assign _ _)  = 1
asize (Seq c‚ÇÅ c‚ÇÇ)   = asize c‚ÇÅ + asize c‚ÇÇ
asize (ITE _ c‚ÇÅ c‚ÇÇ) = 3 + asize c‚ÇÅ + asize c‚ÇÇ
asize (While _ c)   = 3 + asize c

asize-pos : ‚àÄ i ‚Üí 0 < asize i
asize-pos  Skip         = z<s
asize-pos (Assign x e)  = z<s
asize-pos (Seq i‚ÇÅ i‚ÇÇ)   = <-+-r (asize-pos i‚ÇÅ)
asize-pos (ITE b i‚ÇÅ i‚ÇÇ) = z<s
asize-pos (While b i)   = z<s
