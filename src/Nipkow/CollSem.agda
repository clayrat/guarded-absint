module Nipkow.CollSem where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool
open import Data.Nat
open import Data.Sum
open import Data.String
open import Data.List
open import Data.List.Correspondences.Binary.All
open import Data.Reflects

open import Combinatorics.Power
open import Order.Base
open import Order.Diagram.Lub
open import Order.SupLattice
open import Order.SupLattice.SmallBasis
open import Order.Constructions.Subsets

open import List1
open import Nipkow.Lang
open import Nipkow.OpSem
open import Nipkow.ACom
open import Nipkow.ACom.Leq
open import Nipkow.ACom.Order
open import Nipkow.State as S

module CollsemA
  (A : ùí∞ (‚Ñìsuc 0‚Ñì))
  (sup : A ‚Üí A ‚Üí A)
  (leq : A ‚Üí A ‚Üí ùí∞)
  (leq-sup-r1 : ‚àÄ {x a b} ‚Üí leq x a ‚Üí leq x (sup a b))
  (leq-sup-r2 : ‚àÄ {x a b} ‚Üí leq x b ‚Üí leq x (sup a b))
  (leq-sup-l : ‚àÄ {x a b} ‚Üí leq a x ‚Üí leq b x ‚Üí leq (sup a b) x)
  where

  open List1.List1
  open AnInstrLeq A leq

  -- semantics

  stepA : (String ‚Üí AExpr ‚Üí A ‚Üí A)
        ‚Üí (BExpr ‚Üí A ‚Üí A)
        ‚Üí A ‚Üí AnInstr A ‚Üí AnInstr A
  stepA f g s (AnSkip _)              = AnSkip s
  stepA f g s (AnAssign x e _)        = AnAssign x e (f x e s)
  stepA f g s (AnSeq c‚ÇÅ c‚ÇÇ)           = AnSeq (stepA f g s c‚ÇÅ) (stepA f g (post c‚ÇÅ) c‚ÇÇ)
  stepA f g s (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = AnITE b (g b s) (stepA f g p‚ÇÅ c‚ÇÅ) (g (BNot b) s) (stepA f g p‚ÇÇ c‚ÇÇ) (sup (post c‚ÇÅ) (post c‚ÇÇ))
  stepA f g s (AnWhile inv b p c q)   = AnWhile (sup s (post c)) b (g b inv) (stepA f g p c) (g (BNot b) inv)

  strip-stepA : ‚àÄ {f g s} c ‚Üí strip (stepA f g s c) Ôºù strip c
  strip-stepA (AnSkip _)            = refl
  strip-stepA (AnAssign x e _)      = refl
  strip-stepA (AnSeq c‚ÇÅ c‚ÇÇ)         = ap¬≤ Seq (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnITE b _ c‚ÇÅ _ c‚ÇÇ _) = ap¬≤ (ITE b) (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnWhile inv b _ c _) = ap (While b) (strip-stepA c)

  mono2-stepA : ‚àÄ {f : String ‚Üí AExpr ‚Üí A ‚Üí A} {g : BExpr ‚Üí A ‚Üí A} {c‚ÇÅ c‚ÇÇ}
              ‚Üí (‚àÄ {x e s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí leq (f x e s‚ÇÅ) (f x e s‚ÇÇ))
              ‚Üí (‚àÄ {b s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí leq (g b s‚ÇÅ) (g b s‚ÇÇ))
              ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
              ‚Üí ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí stepA f g s‚ÇÅ c‚ÇÅ ‚â§‚Å± stepA f g s‚ÇÇ c‚ÇÇ
  mono2-stepA {f} {g} {c‚ÇÅ = AnSkip p}              {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (s' , eq , _) = skip-‚â§‚Å±-eliml {c = c‚ÇÇ} lc in
    skip-‚â§‚Å±-intro2 refl (ap (stepA f g s‚ÇÇ) eq) ls
  mono2-stepA {f} {g} {c‚ÇÅ = AnAssign x e p}        {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (s' , eq , _) = assign-‚â§‚Å±-eliml {c = c‚ÇÇ} lc in
    assign-‚â§‚Å±-intro2 refl (ap (stepA f g s‚ÇÇ) eq) (fm ls)
  mono2-stepA {f} {g} {c‚ÇÅ = AnSeq c‚ÇÅ c‚ÇÉ}           {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (a‚ÇÅ , a‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ) = seq-‚â§‚Å±-eliml {c = c‚ÇÇ} lc in
    seq-‚â§‚Å±-intro2 refl (ap (stepA f g s‚ÇÇ) eq)
                  (mono2-stepA fm gm le‚ÇÅ ls)
                  (mono2-stepA fm gm le‚ÇÇ (mono-post le‚ÇÅ))
  mono2-stepA {f} {g} {c‚ÇÅ = AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÉ q} {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , _) = ite-‚â§‚Å±-eliml {c = c‚ÇÇ} lc in
    ite-‚â§‚Å±-intro2 refl (ap (stepA f g s‚ÇÇ) eq)
                  (gm ls) (mono2-stepA fm gm le‚ÇÇ le‚ÇÅ)
                  (gm ls) (mono2-stepA fm gm le‚ÇÑ le‚ÇÉ)
                  (leq-sup-l (leq-sup-r1 (mono-post {c‚ÇÅ = c‚ÇÅ} le‚ÇÇ))
                             (leq-sup-r2 (mono-post {c‚ÇÅ = c‚ÇÉ} le‚ÇÑ)))
  mono2-stepA {f} {g} {c‚ÇÅ = AnWhile inv‚ÇÅ b p c‚ÇÅ q} {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (inv‚ÇÇ , p‚ÇÇ , c‚ÇÄ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , _) = while-‚â§‚Å±-eliml {c = c‚ÇÇ} lc in
    while-‚â§‚Å±-intro2 refl (ap (stepA f g s‚ÇÇ) eq)
                    (leq-sup-l (leq-sup-r1 ls) (leq-sup-r2 (mono-post le‚ÇÉ))) (gm le‚ÇÅ)
                    (mono2-stepA fm gm le‚ÇÉ le‚ÇÇ) (gm le‚ÇÅ)

open S.State ‚Ñï 0

SetState : ùí∞ (‚Ñìsuc 0‚Ñì)
SetState = ‚Ñô State 0‚Ñì

open AnInstrLeq SetState _‚äÜ_
open CollsemA SetState _‚à™_ _‚äÜ_
                        (Œª {x} {a} {b} ‚Üí ‚Ñô-inl {A = a} {B = b} {C = x})
                        (Œª {x} {a} {b} ‚Üí ‚Ñô-inr {A = a} {B = b} {C = x})
                        (Œª {x} {a} {b} ‚Üí ‚à™-‚äÜ  {A = a} {B = b} {C = x})

-- TODO: AnInstr SetState ‚áí AnInstr SetState ?

step : SetState ‚Üí AnInstr SetState ‚Üí AnInstr SetState
step = stepA (Œª x e ‚Üí ‚Ñô-map (Œª s ‚Üí stupd x (aval s e) s) .hom)
              Œª b S s ‚Üí el! (is-true (bval s b) √ó s ‚àà S)

mono2-step : ‚àÄ {c‚ÇÅ c‚ÇÇ}
           ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
           ‚Üí ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üí step s‚ÇÅ c‚ÇÅ ‚â§‚Å± step s‚ÇÇ c‚ÇÇ
mono2-step =
  mono2-stepA (Œª le ‚Üí map (second (second le)))
              (Œª le ‚Üí second le)

strip-step : ‚àÄ {s} {c} ‚Üí strip (step s c) Ôºù strip c
strip-step {c} = strip-stepA c

{- Relation to big-step semantics -}
big-step-post-step : ‚àÄ {s s' i a ss}
                   ‚Üí Exec i s s'
                   ‚Üí strip a Ôºù i
                   ‚Üí s ‚àà ss
                   ‚Üí step ss a ‚â§‚Å± a
                   ‚Üí s' ‚àà post a
big-step-post-step {s} .{s' = s}    .{i = Skip}        {a} {ss}  ExSkip                                 seq sin stleq =
  let (p , eq) = strip-skip-r seq
      le = skip-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
   in
  subst (Œª q ‚Üí s ‚àà post q) (eq ‚Åª¬π) (le sin)
big-step-post-step {s}  {s'}        .{i = Assign x e}  {a} {ss} (ExAssign {x} {e} upd)                  seq sin stleq =
  let (p , eq) = strip-assign-r seq
      le = assign-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) (le ‚à£ (s , upd , sin) ‚à£‚ÇÅ)
big-step-post-step {s}  {s'}        .{i = Seq i‚ÇÅ i‚ÇÇ}   {a} {ss} (ExSeq {i‚ÇÅ} {i‚ÇÇ} ex‚ÇÅ ex‚ÇÇ)               seq sin stleq =
  let (a‚ÇÅ , a‚ÇÇ , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-seq-r seq
      (le1 , le2) = seq-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  big-step-post-step {a = a‚ÇÇ} {ss = post a‚ÇÅ} ex‚ÇÇ eq‚ÇÇ
    (big-step-post-step {a = a‚ÇÅ} ex‚ÇÅ eq‚ÇÅ sin le1)
    le2
big-step-post-step {s}  {s'}        .{i = ITE b i‚ÇÅ i‚ÇÇ} {a} {ss} (ExITET {b} {i‚ÇÅ} {i‚ÇÇ} bt ex)            seq sin stleq =
  let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r seq
      (le1 , le2 , _ , _ , le5) = ite-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le5 $
  ‚à£ inl (big-step-post-step {a = a‚ÇÅ} {ss = p‚ÇÅ} ex eq‚ÇÅ (le1 (bt , sin)) le2) ‚à£‚ÇÅ
big-step-post-step {s}  {s'}        .{i = ITE b i‚ÇÅ i‚ÇÇ} {a} {ss} (ExITEF {b} {i‚ÇÅ} {i‚ÇÇ} bf ex)            seq sin stleq =
  let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r seq
      (_ , _ , le3 , le4 , le5) = ite-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le5 $
  ‚à£ inr (big-step-post-step {a = a‚ÇÇ} {ss = p‚ÇÇ} ex eq‚ÇÇ (le3 (bf , sin)) le4) ‚à£‚ÇÅ
big-step-post-step {s}  .{s' = s''} .{i = While b i}  {a} {ss} (ExWhileT {s'} {s''} {b} {i} bt ex‚ÇÅ ex‚ÇÇ) seq sin stleq =
  let (inv , p , a‚ÇÄ , q , eq , eq‚ÇÅ) = strip-while-r seq
      (le1 , le2 , le3 , le4) = while-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s'' ‚àà post q) (eq ‚Åª¬π) $
  big-step-post-step {s' = s''} {a = AnWhile inv b p a‚ÇÄ q} {ss = post a‚ÇÄ} ex‚ÇÇ (ap (While b) eq‚ÇÅ)
    (big-step-post-step {s' = s'} {a = a‚ÇÄ} {ss = p} ex‚ÇÅ eq‚ÇÅ (le2 (bt , le1 ‚à£ inl sin ‚à£‚ÇÅ)) le3)
    (While-‚â§‚Å± (le1 ‚àò map [ inr , inr ]·µ§) refl le2 le3 le4)
big-step-post-step {s}  {s'}        .{i = While b i}  {a} {ss} (ExWhileF {b} {i} bf)                    seq sin stleq =
  let (inv , p , a‚ÇÄ , q , eq , eq‚ÇÅ) = strip-while-r seq
      (le1 , _ , _ , le4) = while-‚â§‚Å±-elim2 (ap (step ss) eq) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le4 $
  bf , (le1 ‚à£ inl sin ‚à£‚ÇÅ)
