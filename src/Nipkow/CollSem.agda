module Nipkow.CollSem where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool renaming (elim to elim·µá)
open import Data.Nat
--open import Data.Nat.Order.Inductive
open import Data.Sum
open import Data.String
open import Data.List
open import Data.List.Correspondences.Binary.All2
open import Data.Dec renaming (elim to elim·µà)
open import Data.Reflects renaming (dmap to dmap ≥)

open import Order.Base
open import Order.Diagram.Lub
open import Order.SupLattice

open import Combinatorics.Power

open import List1
open import Nipkow.Lang
open import Nipkow.OpSem
open import Nipkow.ACom
open import Nipkow.State as S

module AnInstrLeq
  (A : ùí∞ (‚Ñìsuc 0‚Ñì))
  (leq : A ‚Üí A ‚Üí ùí∞)
  where

  open List1.List1

  _‚â§‚Å±_ : AnInstr A ‚Üí AnInstr A ‚Üí ùí∞ (‚Ñìsuc 0‚Ñì)
  c‚ÇÅ ‚â§‚Å± c‚ÇÇ = (strip c‚ÇÅ Ôºù strip c‚ÇÇ) √ó All2‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)

  opaque
    skip-‚â§‚Å±-l : ‚àÄ {s c s'}
              ‚Üí c Ôºù AnSkip s' ‚Üí leq s s'
              ‚Üí AnSkip s ‚â§‚Å± c
    skip-‚â§‚Å±-l {s} eq le = subst (AnSkip s ‚â§‚Å±_) (eq ‚Åª¬π) (refl , [] , le)

    skip-‚â§‚Å±-r : ‚àÄ {s c}
              ‚Üí AnSkip s ‚â§‚Å± c
              ‚Üí Œ£[ s' Íûâ A ] (c Ôºù AnSkip s') √ó leq s s'
    skip-‚â§‚Å±-r {s} {c} (h1 , h2 , h3) =
      let (s' , eq) = strip-skip-r (h1 ‚Åª¬π) in
      s' , eq , subst (leq s) (ap post eq) h3

    skip-‚â§‚Å±-r-id : ‚àÄ {s s'}
                 ‚Üí AnSkip s ‚â§‚Å± AnSkip s'
                 ‚Üí leq s s'
    skip-‚â§‚Å±-r-id {s} {s'} (h1 , h2 , h3) = h3

    assign-‚â§‚Å±-l : ‚àÄ {x e s c s'}
                ‚Üí c Ôºù AnAssign x e s' ‚Üí leq s s'
                ‚Üí AnAssign x e s ‚â§‚Å± c
    assign-‚â§‚Å±-l {x} {e} {s} eq le =
      subst (AnAssign x e s ‚â§‚Å±_) (eq ‚Åª¬π) (refl , [] , le)

    assign-‚â§‚Å±-r : ‚àÄ {x e s c}
                ‚Üí AnAssign x e s ‚â§‚Å± c
                ‚Üí Œ£[ s' Íûâ A ] (c Ôºù AnAssign x e s') √ó leq s s'
    assign-‚â§‚Å±-r {x} {e} {s} {c} (h1 , h2 , h3) =
      let (s' , eq) = strip-assign-r (h1 ‚Åª¬π) in
      s' , eq , subst (leq s) (ap post eq) h3

    assign-‚â§‚Å±-r-id : ‚àÄ {x e s s'}
                   ‚Üí AnAssign x e s ‚â§‚Å± AnAssign x e s'
                   ‚Üí leq s s'
    assign-‚â§‚Å±-r-id {x} {e} {s} {s'} (h1 , h2 , h3) = h3

    seq-‚â§‚Å±-l : ‚àÄ {c‚ÇÅ c‚ÇÇ c c‚ÇÉ c‚ÇÑ}
             ‚Üí c Ôºù AnSeq c‚ÇÉ c‚ÇÑ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
             ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
    seq-‚â§‚Å±-l {c‚ÇÅ} {c‚ÇÇ} eq (e‚ÇÅ , le‚ÇÅ) (e‚ÇÇ , le‚ÇÇ) =
      subst (AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å±_) (eq ‚Åª¬π)
      (ap¬≤ Seq e‚ÇÅ e‚ÇÇ , All2‚ÇÅ-++‚ÇÅ le‚ÇÅ le‚ÇÇ)

    seq-‚â§‚Å±-r : ‚àÄ {c‚ÇÅ c‚ÇÇ c}
             ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
             ‚Üí Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ]
                 (c Ôºù AnSeq c‚ÇÉ c‚ÇÑ) √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-r {c‚ÇÅ} {c‚ÇÇ} {c} (h1 , h2) =
      let (a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ) = strip-seq-r (h1 ‚Åª¬π)
          (le1 , le2) = All2‚ÇÅ-split
                          (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                             (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÇ ‚Åª¬π)))
                          (subst (All2‚ÇÅ leq (annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ) ‚àò annos) eq‚ÇÅ h2)
         in
        a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ , (eq‚ÇÇ ‚Åª¬π , le1) , eq‚ÇÉ ‚Åª¬π , le2

    seq-‚â§‚Å±-r-id : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ}
                ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
                ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-r-id {c‚ÇÅ} {c‚ÇÇ} le =
      let (a‚ÇÅ , a‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ) = seq-‚â§‚Å±-r le
          (eq‚ÇÅ , eq‚ÇÇ) = AnSeq-inj eq
        in
      subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÅ ‚Åª¬π) le‚ÇÅ , subst (c‚ÇÇ ‚â§‚Å±_) (eq‚ÇÇ ‚Åª¬π) le‚ÇÇ

    ite-‚â§‚Å±-l : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
             ‚Üí c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
             ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
             ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
    ite-‚â§‚Å±-l {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} eq le‚ÇÅ (e‚ÇÇ , le‚ÇÇ) le‚ÇÉ (e‚ÇÑ , le‚ÇÑ) le‚ÇÖ =
      subst (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π)
        ( ap¬≤ (ITE b) e‚ÇÇ e‚ÇÑ
        , All2‚ÇÅ-‚à∂+‚ÇÅ-r (All2‚ÇÅ-++‚ÇÅ (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ le‚ÇÇ) (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÉ le‚ÇÑ)) le‚ÇÖ)

    ite-‚â§‚Å±-r : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c}
             ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
             ‚Üí Œ£[ p‚ÇÉ Íûâ A ] Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ p‚ÇÑ Íûâ A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                              (c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ)
                            √ó leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-r {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {c} (h1 , h2) =
      let (p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r (h1 ‚Åª¬π)
          le = All2‚ÇÅ-‚à∂+‚ÇÅ-l (  length‚ÇÅ-++ {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ}
                            ‚àô ap¬≤ (Œª x y ‚Üí suc x + suc y)
                                  (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                                     (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÅ ‚Åª¬π)))
                                  (length-annos-same {c‚ÇÅ = c‚ÇÇ}
                                     (reflects-true (reflects-instr (strip c‚ÇÇ) (strip a‚ÇÇ)) (eq‚ÇÇ ‚Åª¬π)))
                            ‚àô length‚ÇÅ-++ {xs = p‚ÇÉ ‚à∑‚ÇÅ annos a‚ÇÅ} {ys = p‚ÇÑ ‚à∑‚ÇÅ annos a‚ÇÇ} ‚Åª¬π) $
                 subst (All2‚ÇÅ leq (((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) eq h2
          (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All2‚ÇÅ-split (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÅ ‚Åª¬π))))
                                      (le .fst)
          (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÅ
          (le‚ÇÉ‚ÇÅ , le‚ÇÉ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
        in
      p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q , eq , le‚ÇÇ‚ÇÅ , (eq‚ÇÅ ‚Åª¬π , le‚ÇÇ‚ÇÇ) , le‚ÇÉ‚ÇÅ , (eq‚ÇÇ ‚Åª¬π , le‚ÇÉ‚ÇÇ) , le .snd

    ite-‚â§‚Å±-r-id : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
                ‚Üí leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-r-id {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} le =
      let (r‚ÇÅ , a‚ÇÅ , r‚ÇÇ , a‚ÇÇ , w‚ÇÅ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) = ite-‚â§‚Å±-r le
          (_ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ , eq‚ÇÖ) = AnITE-inj eq
        in
        subst (leq p‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le‚ÇÅ
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÇ ‚Åª¬π) le‚ÇÇ
      , subst (leq p‚ÇÇ) (eq‚ÇÉ ‚Åª¬π) le‚ÇÉ
      , subst (c‚ÇÇ ‚â§‚Å±_) (eq‚ÇÑ ‚Åª¬π) le‚ÇÑ
      , subst (leq q‚ÇÅ) (eq‚ÇÖ ‚Åª¬π) le‚ÇÖ

    while-‚â§‚Å±-l : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
               ‚Üí c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
               ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
               ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
               ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
    while-‚â§‚Å±-l {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} eq le‚ÇÅ le‚ÇÇ (e‚ÇÉ , le‚ÇÉ) le‚ÇÑ =
      subst (AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π)
        ( ap (While b) e‚ÇÉ
        , All2‚ÇÅ-‚à∂+‚ÇÅ-r (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÇ le‚ÇÉ)) le‚ÇÑ)

    while-‚â§‚Å±-r : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c}
               ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
               ‚Üí Œ£[ inv‚ÇÇ Íûâ A ] Œ£[ p‚ÇÇ Íûâ A ] Œ£[ c‚ÇÇ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                     (c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ)
                   √ó leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-r {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} (h1 , h2) =
      let (inv‚ÇÇ , p , a , q , eq , eq‚ÇÅ) = strip-while-r (h1 ‚Åª¬π)
          le = All2‚ÇÅ-‚à∂+‚ÇÅ-l (ap (2 +_)
                              (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                                (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a)) (eq‚ÇÅ ‚Åª¬π)))) $
               subst (All2‚ÇÅ leq (((inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ)) ‚à∂+‚ÇÅ q‚ÇÅ)) ‚àò annos) eq h2
          (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l (le .fst)
          (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
       in
      inv‚ÇÇ , p , a , q , eq , le‚ÇÅ‚ÇÅ , le‚ÇÇ‚ÇÅ , (eq‚ÇÅ ‚Åª¬π , le‚ÇÇ‚ÇÇ) , le .snd

    while-‚â§‚Å±-r-id : ‚àÄ {b inv‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                  ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
                  ‚Üí leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-r-id {b} {inv‚ÇÅ} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} le =
      let (inv‚ÇÄ , p , a , q , eq , le1 , le2 , le3 , le4) = while-‚â§‚Å±-r le
          (eq‚ÇÅ , _ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ) = AnWhile-inj eq
        in
        subst (leq inv‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le1
      , subst (leq p‚ÇÅ) (eq‚ÇÇ ‚Åª¬π) le2
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÉ ‚Åª¬π) le3
      , subst (leq q‚ÇÅ) (eq‚ÇÑ ‚Åª¬π) le4

  mono-post : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq (post c‚ÇÅ) (post c‚ÇÇ)
  mono-post (_ , _ , h) = h

module AnInstrOrd
  (P : Poset (‚Ñìsuc 0‚Ñì) 0‚Ñì)
  (L : is-sup-lattice P 0‚Ñì)
  where

  open Poset P
  open is-lub
  open is-sup-lattice L
  open AnInstrLeq Ob _‚â§_

  an-poset : Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  an-poset .Poset.Ob                                = AnInstr Ob
  an-poset .Poset._‚â§_                               = _‚â§‚Å±_
  an-poset .Poset.‚â§-thin                            = √ó-is-of-hlevel 1 (instr-is-set (strip _) (strip _))
                                                                       (All2‚ÇÅ-is-of-hlevel 0 (Œª _ _ ‚Üí ‚â§-thin))
  an-poset .Poset.‚â§-refl                            = refl , all2‚ÇÅ-refl (Œª _ ‚Üí ‚â§-refl)
  an-poset .Poset.‚â§-trans (exy , axy) (eyz , ayz)   = exy ‚àô eyz , all2‚ÇÅ-trans (Œª _ _ _ ‚Üí ‚â§-trans) axy ayz
  an-poset .Poset.‚â§-antisym (exy , axy) (eyx , ayx) =
    strip-annos-same (reflects-true (reflects-instr (strip _) (strip _)) exy)
                     (all2‚ÇÅ-antisym (Œª _ _ ‚Üí ‚â§-antisym) axy ayx)

  anc-poset : Instr ‚Üí Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  anc-poset c .Poset.Ob = Œ£[ a Íûâ AnInstr Ob ] (strip a Ôºù c)
  anc-poset c .Poset._‚â§_ (a1 , e1) (a2 , e2) = a1 ‚â§‚Å± a2  -- TODO try just all2 leq, because strip equality is assumed
  anc-poset c .Poset.‚â§-thin = √ó-is-of-hlevel 1 (instr-is-set (strip _) (strip _))
                                               (All2‚ÇÅ-is-of-hlevel 0 (Œª _ _ ‚Üí ‚â§-thin))
  anc-poset c .Poset.‚â§-refl = refl , all2‚ÇÅ-refl (Œª _ ‚Üí ‚â§-refl)
  anc-poset c .Poset.‚â§-trans (exy , axy) (eyz , ayz)   = exy ‚àô eyz , all2‚ÇÅ-trans (Œª _ _ _ ‚Üí ‚â§-trans) axy ayz
  anc-poset c .Poset.‚â§-antisym {x = ax , ex} {y = ay , ey} (exy , axy) (eyx , ayx) =
    Œ£-prop-path (Œª a ‚Üí instr-is-set (strip a) c) $
    strip-annos-same (reflects-true (reflects-instr (strip _) (strip _)) exy)
                     (all2‚ÇÅ-antisym (Œª _ _ ‚Üí ‚â§-antisym) axy ayx)

  anc-sup : (c : Instr) ‚Üí {I : ùí∞} ‚Üí (I ‚Üí Œ£[ a Íûâ AnInstr Ob ] (strip a Ôºù c)) ‚Üí Œ£[ a Íûâ AnInstr Ob ] (strip a Ôºù c)
  anc-sup  Skip         F =
    AnSkip (sup Œª i ‚Üí let (a , e) = strip-skip-r (F i .snd) in a) , refl
  anc-sup (Assign x e)  F =
    AnAssign x e (sup Œª i ‚Üí let (a , e) = strip-assign-r (F i .snd) in a) , refl
  anc-sup (Seq c‚ÇÅ c‚ÇÇ)   F =
    let (a‚ÇÅ , e‚ÇÅ) = anc-sup c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , e‚ÇÇ) = anc-sup c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
    AnSeq a‚ÇÅ a‚ÇÇ , ap¬≤ Seq e‚ÇÅ e‚ÇÇ
  anc-sup (ITE b c‚ÇÅ c‚ÇÇ) F =
    let (a‚ÇÅ , e‚ÇÅ) = anc-sup c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , e‚ÇÇ) = anc-sup c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
   AnITE b
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ)
     a‚ÇÅ
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ)
     a‚ÇÇ
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q)
   , ap¬≤ (ITE b) e‚ÇÅ e‚ÇÇ
  anc-sup (While b c)   F =
    let (a , e) = anc-sup c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
     in
    AnWhile (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv)
            b
            (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p)
            a
            (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q)
    , ap (While b) e

  anc-lub : ‚àÄ c {I : ùí∞} (F : I ‚Üí Œ£[ a Íûâ AnInstr Ob ] (strip a Ôºù c))
          ‚Üí is-lub (anc-poset c) F (anc-sup c F)
  anc-lub  Skip         F =
    let a  = sup     Œª j ‚Üí let (a , e) = strip-skip-r (F j .snd) in a
        sa = suprema Œª j ‚Üí let (a , e) = strip-skip-r (F j .snd) in a
      in
    record {
      fam‚â§lub = Œª i ‚Üí subst (_‚â§‚Å± AnSkip a) (let (a , e) = strip-skip-r (F i .snd) in e ‚Åª¬π) $
                      skip-‚â§‚Å±-l refl $
                      sa .fam‚â§lub i
    ; least = Œª where (a' , eq) f ‚Üí
                         let (a1 , eq1) = strip-skip-r eq in
                         subst (AnSkip a ‚â§‚Å±_) (eq1 ‚Åª¬π) $
                         skip-‚â§‚Å±-l refl $
                         sa .least a1 Œª i ‚Üí skip-‚â§‚Å±-r-id $
                                            subst (_‚â§‚Å± AnSkip a1) (let (a , e) = strip-skip-r (F i .snd) in e) $
                                            subst (F i .fst ‚â§‚Å±_) eq1 (f i)
    }
  anc-lub (Assign x e)  F =
    let a  = sup     Œª j ‚Üí let (a , e) = strip-assign-r (F j .snd) in a
        sa = suprema Œª j ‚Üí let (a , e) = strip-assign-r (F j .snd) in a
      in
    record {
      fam‚â§lub = Œª i ‚Üí subst (_‚â§‚Å± AnAssign x e a) (let (a , e) = strip-assign-r (F i .snd) in e ‚Åª¬π) $
                      assign-‚â§‚Å±-l refl $
                      sa .fam‚â§lub i
    ; least = Œª where (a' , eq) f ‚Üí
                          let (a1 , eq1) = strip-assign-r eq in
                          subst (AnAssign x e a ‚â§‚Å±_) (eq1 ‚Åª¬π) $
                          assign-‚â§‚Å±-l refl $
                          sa .least a1 Œª i ‚Üí assign-‚â§‚Å±-r-id $
                                             subst (_‚â§‚Å± AnAssign x e a1) (let (_ , e) = strip-assign-r (F i .snd) in e) $
                                             subst (F i .fst ‚â§‚Å±_) eq1 (f i)
    }
  anc-lub (Seq c‚ÇÅ c‚ÇÇ)   F =
    let (a‚ÇÅ , _) = anc-sup c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        ih‚ÇÅ      = anc-lub c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , _) = anc-sup c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        ih‚ÇÇ      = anc-lub c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
    record {
      fam‚â§lub = Œª i ‚Üí subst (_‚â§‚Å± AnSeq a‚ÇÅ a‚ÇÇ) (let (_ , _ , eq' , _ , _) = strip-seq-r (F i .snd) in eq' ‚Åª¬π) $
                      seq-‚â§‚Å±-l refl (ih‚ÇÅ .fam‚â§lub i) (ih‚ÇÇ .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                          let (a1 , a2 , eq0 , eq1 , eq2) = strip-seq-r eq in
                          subst (AnSeq a‚ÇÅ a‚ÇÇ ‚â§‚Å±_) (eq0 ‚Åª¬π) $
                          seq-‚â§‚Å±-l refl
                            (ih‚ÇÅ .least (a1 , eq1) Œª i ‚Üí let le12 = seq-‚â§‚Å±-r-id $
                                                                    subst (_‚â§‚Å± AnSeq a1 a2) (let (_ , _ , e , _ , _) = strip-seq-r (F i .snd) in e) $
                                                                    subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                         le12 .fst)
                            (ih‚ÇÇ .least (a2 , eq2) Œª i ‚Üí let le12 = seq-‚â§‚Å±-r-id $
                                                                    subst (_‚â§‚Å± AnSeq a1 a2) (let (_ , _ , e , _ , _) = strip-seq-r (F i .snd) in e) $
                                                                    subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                         le12 .snd)
    }
  anc-lub (ITE b c‚ÇÅ c‚ÇÇ) F =
    let p‚ÇÅ  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ
        sp‚ÇÅ = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ
        (a‚ÇÅ , _) = anc-sup c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        ih‚ÇÅ      = anc-lub c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        p‚ÇÇ  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ
        sp‚ÇÇ = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ
        (a‚ÇÇ , _) = anc-sup c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        ih‚ÇÇ      = anc-lub c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        q  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q
        sq = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q
      in
    record {
      fam‚â§lub = Œª i ‚Üí subst (_‚â§‚Å± AnITE b p‚ÇÅ a‚ÇÅ p‚ÇÇ a‚ÇÇ q) (let (_ , _ , _ , _ , _ , eq' , _ , _) = strip-ite-r (F i .snd) in eq' ‚Åª¬π) $
                      ite-‚â§‚Å±-l refl (sp‚ÇÅ .fam‚â§lub i) (ih‚ÇÅ .fam‚â§lub i) (sp‚ÇÇ .fam‚â§lub i) (ih‚ÇÇ .fam‚â§lub i) (sq .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                          let (p1 , a1 , p2 , a2 , q0 , eq0 , e1 , e2) = strip-ite-r eq in
                          subst (AnITE b p‚ÇÅ a‚ÇÅ p‚ÇÇ a‚ÇÇ q ‚â§‚Å±_) (eq0 ‚Åª¬π) $
                          ite-‚â§‚Å±-l refl
                            (sp‚ÇÅ .least p1 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-r-id $
                                                               subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                 le12345 .fst)
                            (ih‚ÇÅ .least (a1 , e1) Œª i ‚Üí let le12345 = ite-‚â§‚Å±-r-id $
                                                                      subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                                      subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                        le12345 .snd .fst)
                            (sp‚ÇÇ .least p2 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-r-id $
                                                               subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                 le12345 .snd .snd .fst)
                            (ih‚ÇÇ .least (a2 , e2) Œª i ‚Üí let le12345 = ite-‚â§‚Å±-r-id $
                                                                      subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                                      subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                        le12345 .snd .snd .snd .fst)
                            (sq .least q0 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-r-id $
                                                              subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                              subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                le12345 .snd .snd .snd .snd)
    }
  anc-lub (While b c)   F =
    let inv  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv
        sinv = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv
        p  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p
        sp = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p
        (a , _) = anc-sup c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
        ih      = anc-lub c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
        q  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q
        sq = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q
      in
    record {
      fam‚â§lub = Œª i ‚Üí subst (_‚â§‚Å± AnWhile inv b p a q) (let (_ , _ , _ , _ , eq' , _) = strip-while-r (F i .snd) in eq' ‚Åª¬π) $
                      while-‚â§‚Å±-l refl (sinv .fam‚â§lub i) (sp .fam‚â§lub i) (ih .fam‚â§lub i) (sq .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                        let (inv1 , p1 , a1 , q1 , eq0 , e1) = strip-while-r eq in
                        subst (AnWhile inv b p a q ‚â§‚Å±_) (eq0 ‚Åª¬π) $
                        while-‚â§‚Å±-l refl
                          (sinv .least inv1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-r-id $
                                                               subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                  le1234 .fst)
                          (sp .least p1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-r-id $
                                                           subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                           subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                              le1234 .snd .fst)
                          (ih .least (a1 , e1) Œª i ‚Üí let le1234 = while-‚â§‚Å±-r-id $
                                                                  subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                                  subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                     le1234 .snd .snd .fst)
                          (sq .least q1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-r-id $
                                                           subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                           subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                              le1234 .snd .snd .snd)
    }

  anc-suplat : (c : Instr) ‚Üí is-sup-lattice (anc-poset c) 0‚Ñì
  anc-suplat c .is-sup-lattice.sup = anc-sup c
  anc-suplat c .is-sup-lattice.suprema = anc-lub c

module CollsemA
  (A : ùí∞ (‚Ñìsuc 0‚Ñì))
  (sup : A ‚Üí A ‚Üí A)
  (leq : A ‚Üí A ‚Üí ùí∞)
  (leq-sup-r1 : ‚àÄ {x a b} ‚Üí leq x a ‚Üí leq x (sup a b))
  (leq-sup-r2 : ‚àÄ {x a b} ‚Üí leq x b ‚Üí leq x (sup a b))
  (leq-sup-l : ‚àÄ {x a b} ‚Üí leq a x ‚Üí leq b x ‚Üí leq (sup a b) x)
  where

  open List1.List1
  open AnInstrLeq A leq

  -- semantics

  stepA : (String ‚Üí AExpr ‚Üí A ‚Üí A)
        ‚Üí (BExpr ‚Üí A ‚Üí A)
        ‚Üí A ‚Üí AnInstr A ‚Üí AnInstr A
  stepA f g s (AnSkip _)              = AnSkip s
  stepA f g s (AnAssign x e _)        = AnAssign x e (f x e s)
  stepA f g s (AnSeq c‚ÇÅ c‚ÇÇ)           = AnSeq (stepA f g s c‚ÇÅ) (stepA f g (post c‚ÇÅ) c‚ÇÇ)
  stepA f g s (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q) = AnITE b (g b s) (stepA f g p‚ÇÅ c‚ÇÅ) (g (BNot b) s) (stepA f g p‚ÇÇ c‚ÇÇ) (sup (post c‚ÇÅ) (post c‚ÇÇ))
  stepA f g s (AnWhile inv b p c q)   = AnWhile (sup s (post c)) b (g b inv) (stepA f g p c) (g (BNot b) inv)

  strip-stepA : ‚àÄ {f g s} c ‚Üí strip (stepA f g s c) Ôºù strip c
  strip-stepA (AnSkip _)            = refl
  strip-stepA (AnAssign x e _)      = refl
  strip-stepA (AnSeq c‚ÇÅ c‚ÇÇ)         = ap¬≤ Seq (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnITE b _ c‚ÇÅ _ c‚ÇÇ _) = ap¬≤ (ITE b) (strip-stepA c‚ÇÅ) (strip-stepA c‚ÇÇ)
  strip-stepA (AnWhile inv b _ c _) = ap (While b) (strip-stepA c)

  mono2-stepA : ‚àÄ {f : String ‚Üí AExpr ‚Üí A ‚Üí A} {g : BExpr ‚Üí A ‚Üí A} {c‚ÇÅ c‚ÇÇ}
              ‚Üí (‚àÄ {x e s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí leq (f x e s‚ÇÅ) (f x e s‚ÇÇ))
              ‚Üí (‚àÄ {b s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí leq (g b s‚ÇÅ) (g b s‚ÇÇ))
              ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
              ‚Üí ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí leq s‚ÇÅ s‚ÇÇ ‚Üí stepA f g s‚ÇÅ c‚ÇÅ ‚â§‚Å± stepA f g s‚ÇÇ c‚ÇÇ
  mono2-stepA {f} {g} {c‚ÇÅ = AnSkip p}              {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (s' , eq , _) = skip-‚â§‚Å±-r {c = c‚ÇÇ} lc in
    skip-‚â§‚Å±-l {c = stepA f g s‚ÇÇ c‚ÇÇ} (ap (stepA f g s‚ÇÇ) eq) ls
  mono2-stepA {f} {g} {c‚ÇÅ = AnAssign x e p}        {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (s' , eq , _) = assign-‚â§‚Å±-r {c = c‚ÇÇ} lc in
    assign-‚â§‚Å±-l {c = stepA f g s‚ÇÇ c‚ÇÇ} (ap (stepA f g s‚ÇÇ) eq) (fm ls)
  mono2-stepA {f} {g} {c‚ÇÅ = AnSeq c‚ÇÅ c‚ÇÉ}           {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (a‚ÇÅ , a‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ) = seq-‚â§‚Å±-r {c = c‚ÇÇ} lc in
    seq-‚â§‚Å±-l {c = stepA f g s‚ÇÇ c‚ÇÇ}
             (ap (stepA f g s‚ÇÇ) eq)
             (mono2-stepA fm gm le‚ÇÅ ls)
             (mono2-stepA fm gm le‚ÇÇ (mono-post le‚ÇÅ))
  mono2-stepA {f} {g} {c‚ÇÅ = AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÉ q} {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , _) = ite-‚â§‚Å±-r {c = c‚ÇÇ} lc in
    ite-‚â§‚Å±-l {c = stepA f g s‚ÇÇ c‚ÇÇ}
             (ap (stepA f g s‚ÇÇ) eq)
             (gm ls) (mono2-stepA fm gm le‚ÇÇ le‚ÇÅ)
             (gm ls) (mono2-stepA fm gm le‚ÇÑ le‚ÇÉ)
             (leq-sup-l (leq-sup-r1 (mono-post {c‚ÇÅ = c‚ÇÅ} le‚ÇÇ))
                        (leq-sup-r2 (mono-post {c‚ÇÅ = c‚ÇÉ} le‚ÇÑ)))
  mono2-stepA {f} {g} {c‚ÇÅ = AnWhile inv‚ÇÅ b p c‚ÇÅ q} {c‚ÇÇ} fm gm lc {s‚ÇÅ} {s‚ÇÇ} ls =
    let (inv‚ÇÇ , p‚ÇÇ , c‚ÇÄ , q‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , _) = while-‚â§‚Å±-r {c = c‚ÇÇ} lc in
    while-‚â§‚Å±-l {c = stepA f g s‚ÇÇ c‚ÇÇ}
               (ap (stepA f g s‚ÇÇ) eq)
               (leq-sup-l (leq-sup-r1 ls) (leq-sup-r2 (mono-post le‚ÇÉ))) (gm le‚ÇÅ)
               (mono2-stepA fm gm le‚ÇÉ le‚ÇÇ) (gm le‚ÇÅ)

open S.State ‚Ñï 0

SetState : ùí∞ (‚Ñìsuc 0‚Ñì)
SetState = ‚Ñô State 0‚Ñì

open AnInstrLeq SetState _‚äÜ_
open CollsemA SetState _‚à™_ _‚äÜ_
                        (Œª {x} {a} {b} ‚Üí ‚Ñô-inl {A = a} {B = b} {C = x})
                        (Œª {x} {a} {b} ‚Üí ‚Ñô-inr {A = a} {B = b} {C = x})
                        (Œª {x} {a} {b} ‚Üí ‚à™-‚äÜ  {A = a} {B = b} {C = x})

step : SetState ‚Üí AnInstr SetState ‚Üí AnInstr SetState
step = stepA (Œª x e ‚Üí ‚Ñô-map (Œª s ‚Üí stupd x (aval s e) s))
              Œª b S s ‚Üí el! (is-true (bval s b) √ó s ‚àà S)

mono2-step : ‚àÄ {c‚ÇÅ c‚ÇÇ}
           ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
           ‚Üí ‚àÄ {s‚ÇÅ s‚ÇÇ} ‚Üí s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üí step s‚ÇÅ c‚ÇÅ ‚â§‚Å± step s‚ÇÇ c‚ÇÇ
mono2-step =
  mono2-stepA (Œª le ‚Üí map (second (second le)))
              (Œª le ‚Üí second le)

strip-step : ‚àÄ {s} {c} ‚Üí strip (step s c) Ôºù strip c
strip-step {c} = strip-stepA c

{- Relation to big-step semantics -}
big-step-post-step : ‚àÄ {s s' i a ss}
                   ‚Üí Exec i s s' ‚Üí strip a Ôºù i
                   ‚Üí s ‚àà ss
                   ‚Üí step ss a ‚â§‚Å± a
                   ‚Üí s' ‚àà post a
big-step-post-step {s} .{s' = s}    .{i = Skip}        {a} {ss}  ExSkip                                 seq sin stleq =
  let (p , eq) = strip-skip-r seq
      le = skip-‚â§‚Å±-r-id {s = Œª z ‚Üí el! ‚åû z ‚àà ss ‚åü} {s' = Œª z ‚Üí el! ‚åû z ‚àà strip-skip-r seq .fst ‚åü} $
           subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
   in
  subst (Œª q ‚Üí s ‚àà post q) (eq ‚Åª¬π) (le sin)
big-step-post-step {s}  {s'}        .{i = Assign x e}  {a} {ss} (ExAssign {x} {e} upd)                  seq sin stleq =
  let (p , eq) = strip-assign-r seq
      le = assign-‚â§‚Å±-r-id {s = Œª z ‚Üí el! (‚àÉ[ w Íûâ State ] (z Ôºù stupd x (aval w e) w) √ó (w ‚àà ss))}
                          {s' = Œª z ‚Üí el! ‚åû z ‚àà strip-assign-r seq .fst ‚åü}
                          $
           subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) (le ‚à£ (s , upd , sin) ‚à£‚ÇÅ)
big-step-post-step {s}  {s'}        .{i = Seq i‚ÇÅ i‚ÇÇ}   {a} {ss} (ExSeq {i‚ÇÅ} {i‚ÇÇ} ex‚ÇÅ ex‚ÇÇ)               seq sin stleq =
  let (a‚ÇÅ , a‚ÇÇ , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-seq-r seq
      le12 = seq-‚â§‚Å±-r-id $ subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
      le1 = le12 .fst
      le2 = le12 .snd
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  big-step-post-step {a = a‚ÇÇ} {ss = post a‚ÇÅ}
    ex‚ÇÇ eq‚ÇÇ (big-step-post-step {a = a‚ÇÅ} ex‚ÇÅ eq‚ÇÅ sin le1) le2
big-step-post-step {s}  {s'}        .{i = ITE b i‚ÇÅ i‚ÇÇ} {a} {ss} (ExITET {b} {i‚ÇÅ} {i‚ÇÇ} bt ex)            seq sin stleq =
  let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r seq
      le12345 = ite-‚â§‚Å±-r-id {q‚ÇÅ = Œª z ‚Üí el! ((z ‚àà post a‚ÇÅ) ‚äé‚ÇÅ (z ‚àà post a‚ÇÇ))}
                            {q‚ÇÇ = Œª z ‚Üí el! ‚åû z ‚àà strip-ite-r seq .snd .snd .snd .snd .fst ‚åü} $
                subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
      le1 = le12345 .fst
      le2 = le12345 .snd .fst
      le5 = le12345 .snd .snd .snd .snd
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le5 $
  ‚à£ inl (big-step-post-step {a = a‚ÇÅ} {ss = p‚ÇÅ} ex eq‚ÇÅ (le1 (bt , sin)) le2) ‚à£‚ÇÅ
big-step-post-step {s}  {s'}        .{i = ITE b i‚ÇÅ i‚ÇÇ} {a} {ss} (ExITEF {b} {i‚ÇÅ} {i‚ÇÇ} bf ex)            seq sin stleq =
  let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r seq
      le12345 = ite-‚â§‚Å±-r-id {q‚ÇÅ = Œª z ‚Üí el! ((z ‚àà post a‚ÇÅ) ‚äé‚ÇÅ (z ‚àà post a‚ÇÇ))}
                            {q‚ÇÇ = Œª z ‚Üí el! ‚åû z ‚àà strip-ite-r seq .snd .snd .snd .snd .fst ‚åü} $
                subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
      le3 = le12345 .snd .snd .fst
      le4 = le12345 .snd .snd .snd .fst
      le5 = le12345 .snd .snd .snd .snd
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le5 $
  ‚à£ inr (big-step-post-step {a = a‚ÇÇ} {ss = p‚ÇÇ} ex eq‚ÇÇ (le3 (bf , sin)) le4) ‚à£‚ÇÅ
big-step-post-step {s}  .{s' = s''} .{i = While b i}  {a} {ss} (ExWhileT {s'} {s''} {b} {i} bt ex‚ÇÅ ex‚ÇÇ) seq sin stleq =
  let (inv , p , a‚ÇÄ , q , eq , eq‚ÇÅ) = strip-while-r seq
      le1234 = while-‚â§‚Å±-r-id {q‚ÇÅ = Œª z ‚Üí el! (is-true (bval z (BNot b)) √ó z ‚àà inv)}
                             {q‚ÇÇ = Œª z ‚Üí el! ‚åû z ‚àà strip-while-r seq .snd .snd .snd .fst ‚åü} $
               subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
      le1 = le1234 .fst
      le2 = le1234 .snd .fst
      le3 = le1234 .snd .snd .fst
      le4 = le1234 .snd .snd .snd
    in
  subst (Œª q ‚Üí s'' ‚àà post q) (eq ‚Åª¬π) $
  big-step-post-step {s' = s''} {a = AnWhile inv b p a‚ÇÄ q} {ss = post a‚ÇÄ} ex‚ÇÇ (ap (While b) eq‚ÇÅ)
    (big-step-post-step {s' = s'} {a = a‚ÇÄ} {ss = p} ex‚ÇÅ eq‚ÇÅ (le2 (bt , le1 ‚à£ inl sin ‚à£‚ÇÅ)) le3)
    (while-‚â§‚Å±-l {q‚ÇÅ = Œª z ‚Üí el! (is-true (bval z (BNot b)) √ó z ‚àà inv)} {q‚ÇÇ = q}
       refl
       (le1 ‚àò map [ inr , inr ]·µ§) le2 le3 le4)
big-step-post-step {s}  {s'}        .{i = While b i}  {a} {ss} (ExWhileF {b} {i} bf)                    seq sin stleq =
  let (inv , p , a‚ÇÄ , q , eq , eq‚ÇÅ) = strip-while-r seq
      le1234 = while-‚â§‚Å±-r-id {q‚ÇÅ = Œª z ‚Üí el! (is-true (bval z (BNot b)) √ó z ‚àà inv)}
                             {q‚ÇÇ = Œª z ‚Üí el! ‚åû z ‚àà strip-while-r seq .snd .snd .snd .fst ‚åü} $
               subst (Œª q ‚Üí step ss q ‚â§‚Å± q) eq stleq
      le1 = le1234 .fst
      le4 = le1234 .snd .snd .snd
    in
  subst (Œª q ‚Üí s' ‚àà post q) (eq ‚Åª¬π) $
  le4 $
  bf , (le1 ‚à£ inl sin ‚à£‚ÇÅ)
