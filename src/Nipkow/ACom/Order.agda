module Nipkow.ACom.Order where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool
open import Data.Nat as ‚Ñï
open import Data.Nat.Order.Base
  renaming ( _‚â§_ to _‚â§‚Åø_ ; _<_ to _<‚Åø_
           ; ‚â§-refl to ‚â§‚Åø-refl ; ‚â§-trans to ‚â§‚Åø-trans ; ‚â§-antisym to ‚â§‚Åø-antisym)
open import Data.Nat.Order.Inductive.Base using (_‚â§?_)
open import Data.Nat.Order.Minmax
open import Data.Sum
open import Data.String
open import Data.Maybe as M
open import Data.List
open import Data.List.Operations.Properties
open import Data.List.Correspondences.Binary.All
open import Data.Reflects

open import Combinatorics.Power
open import Order.Base
open import Order.Diagram.Bottom
open import Order.Diagram.Lub
open import Order.Constructions.Product
open import Order.SupLattice
open import Order.SupLattice.SmallBasis
open import Order.SupLattice.SmallBasis.Closure
open import Order.SupLattice.SmallPresentation

open import List1
open import Nipkow.Lang
open import Nipkow.ACom
open import Nipkow.ACom.Leq

module AnInstrOrd {B : ùí∞}
  (P : Poset (‚Ñìsuc 0‚Ñì) 0‚Ñì)
  (L : is-sup-lattice P 0‚Ñì)
  (Œ≤ : B ‚Üí ‚åû P ‚åü)
  (h : is-basis P L Œ≤)
  (sp : has-small-presentation P L Œ≤ h)
  where

  open Poset P
  open is-lub
  open is-sup-lattice L
  open is-basis h
  open AnInstrLeq Ob _‚â§_
  open AnInstrLeqProp Ob _‚â§_ ‚â§-thin ‚â§-refl ‚â§-trans ‚â§-antisym

{-
  an-poset : Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  an-poset .Poset.Ob        = AnInstr Ob
  an-poset .Poset._‚â§_       = _‚â§‚Å±_
  an-poset .Poset.‚â§-thin    = hlevel 1
  an-poset .Poset.‚â§-refl    = ‚â§‚Å±-refl
  an-poset .Poset.‚â§-trans   = ‚â§‚Å±-trans
  an-poset .Poset.‚â§-antisym = ‚â§‚Å±-antisym
-}

  -- we need more structure to form a suplattice
  anc-poset : Instr ‚Üí Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  anc-poset c .Poset.Ob                    = AnStr Ob c
  anc-poset c .Poset._‚â§_ (a1 , _) (a2 , _) = a1 ‚â§‚Å± a2
  anc-poset c .Poset.‚â§-thin                = hlevel 1
  anc-poset c .Poset.‚â§-refl                = ‚â§‚Å±-refl
  anc-poset c .Poset.‚â§-trans               = ‚â§‚Å±-trans
  anc-poset c .Poset.‚â§-antisym xy yx       = Œ£-prop-path! (‚â§‚Å±-antisym xy yx)

  anc-lub : ‚àÄ c {I : ùí∞} (F : I ‚Üí AnStr Ob c)
          ‚Üí Lub (anc-poset c) F
  anc-lub  Skip             F =
    ‚âÉ‚ÜíLub‚Ä≤ (AnStr-Skip-‚âÉ ‚Åª¬π)
      Skip-‚â§‚Å± skip-‚â§‚Å±-elim
      (lubs (Œª j ‚Üí let (a , _) = strip-skip (F j .snd) in a))
  anc-lub (Assign x e)      F =
    ‚âÉ‚ÜíLub‚Ä≤ (AnStr-Assign-‚âÉ ‚Åª¬π)
      (Assign-‚â§‚Å± refl refl) assign-‚â§‚Å±-elim
      (lubs (Œª j ‚Üí let (a , _) = strip-assign (F j .snd) in a))
  anc-lub (Seq c‚ÇÅ c‚ÇÇ)       F =
    ‚âÉ‚ÜíLub‚Ä≤ (AnStr-Seq-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ) ‚Üí Seq-‚â§‚Å± le‚ÇÅ le‚ÇÇ) seq-‚â§‚Å±-elim
      (  anc-lub c‚ÇÅ (Œª i ‚Üí let (a‚ÇÅ , _ , _ , e‚ÇÅ , _) = strip-seq (F i .snd) in a‚ÇÅ , e‚ÇÅ)
       √ó anc-lub c‚ÇÇ (Œª i ‚Üí let (_ , a‚ÇÇ , _ , _ , e‚ÇÇ) = strip-seq (F i .snd) in a‚ÇÇ , e‚ÇÇ))
  anc-lub (ITE b c‚ÇÅ c‚ÇÇ) {I} F =
    ‚âÉ‚ÜíLub‚Ä≤ {P = P √ó anc-poset c‚ÇÅ √ó P √ó anc-poset c‚ÇÇ √ó P}
      (AnStr-ITE-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) ‚Üí ITE-‚â§‚Å± refl le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ) ite-‚â§‚Å±-elim
      (  lubs       (Œª i ‚Üí let (p‚ÇÅ , _  , _  , _  , _ , _ , _  , _ ) = strip-ite (F i .snd) in p‚ÇÅ)
       √ó anc-lub c‚ÇÅ (Œª i ‚Üí let (_  , a‚ÇÅ , _  , _  , _ , _ , e‚ÇÅ , _ ) = strip-ite (F i .snd) in a‚ÇÅ , e‚ÇÅ)
       √ó lubs       (Œª i ‚Üí let (_  , _  , p‚ÇÇ , _  , _ , _ , _  , _ ) = strip-ite (F i .snd) in p‚ÇÇ)
       √ó anc-lub c‚ÇÇ (Œª i ‚Üí let (_  , _  , _  , a‚ÇÇ , _ , _ , _  , e‚ÇÇ) = strip-ite (F i .snd) in a‚ÇÇ , e‚ÇÇ)
       √ó lubs       (Œª i ‚Üí let (_  , _  , _  , _  , q , _ , _  , _ ) = strip-ite (F i .snd) in q))
  anc-lub (While b c)   {I} F =
    ‚âÉ‚ÜíLub‚Ä≤ {P = P √ó P √ó anc-poset c √ó P}
      (AnStr-While-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ) ‚Üí While-‚â§‚Å± le‚ÇÅ refl le‚ÇÇ le‚ÇÉ le‚ÇÑ) while-‚â§‚Å±-elim
      (  lubs      (Œª i ‚Üí let (inv , _ , _ , _ , _  , _) = strip-while (F i .snd) in inv)
       √ó lubs      (Œª i ‚Üí let (_   , p , _ , _ , _  , _) = strip-while (F i .snd) in p)
       √ó anc-lub c (Œª i ‚Üí let (_   , _ , a , _ , _  , e) = strip-while (F i .snd) in a , e)
       √ó lubs      (Œª i ‚Üí let (_   , _ , _ , q , _  , _) = strip-while (F i .snd) in q))

  anc-suplat : (c : Instr) ‚Üí is-sup-lattice (anc-poset c) 0‚Ñì
  anc-suplat c .is-sup-lattice.has-lubs {F} = anc-lub c F

  -- small basis via annotation

  annotate-bot : ‚àÄ {c a}
               ‚Üí strip a Ôºù c
               ‚Üí annotate (Œª _ ‚Üí bot) c ‚â§‚Å± a
  annotate-bot {c} {a} e =
    =all‚Üí‚â§‚Å± (strip-annotate ‚àô e ‚Åª¬π)
      (subst (Œª q ‚Üí All¬≤‚ÇÅ _‚â§_ q (annos a))
            (annos-annotate-const ‚Åª¬π)
            (subst (Œª q ‚Üí All¬≤‚ÇÅ _‚â§_ (replicate‚ÇÅ q bot) (annos a))
                   (length‚ÇÅ-annos {a = a} ‚àô ap asize e)
                   (All¬≤‚ÇÅ-replicate-l has-bot)))

  un·µê-Œ≤ : Maybe B ‚Üí Ob
  un·µê-Œ≤ = M.rec bot Œ≤

  single-at : ‚àÄ {‚Ñì·µá} {B : ùí∞ ‚Ñì·µá}
            ‚Üí B ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí Maybe B
  single-at b n k = if n =? k then just b else nothing

  shr : (‚Ñï ‚Üí Maybe B) ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí Maybe B
  shr f n k = if n ‚â§? k then f (k ‚à∏ n) else nothing

  filt : (‚Ñï ‚Üí Maybe B) ‚Üí (‚Ñï ‚Üí Bool) ‚Üí ‚Ñï ‚Üí Maybe B
  filt f p n = if p n then f n else nothing

  shl-shr : {f : ‚Ñï ‚Üí Maybe B} {n : ‚Ñï}
          ‚Üí shl (un·µê-Œ≤ ‚àò shr f n) n Ôºù un·µê-Œ≤ ‚àò f
  shl-shr {f} {n} = fun-ext Œª k ‚Üí ap un·µê-Œ≤ (  if-true (true‚Üíso! (‚â§-+-l {m = n}))
                                            ‚àô ap f (+-cancel-‚à∏-r k n))

  shl-filt-not : {f : ‚Ñï ‚Üí Maybe B} {p : ‚Ñï ‚Üí Bool} {n : ‚Ñï}
                 ‚Üí (‚àÄ m ‚Üí n ‚â§‚Åø m ‚Üí ‚åû not (p m) ‚åü)
                 ‚Üí shl (un·µê-Œ≤ ‚àò filt f p) n Ôºù Œª _ ‚Üí bot
  shl-filt-not {n} h = fun-ext Œª k ‚Üí ap un·µê-Œ≤ (if-false (h (k + n) ‚â§-+-l))

  shl-single-at-not : {b : B} {n m : ‚Ñï}
                  ‚Üí n <‚Åø m
                  ‚Üí shl (un·µê-Œ≤ ‚àò single-at b n) m Ôºù Œª _ ‚Üí bot
  shl-single-at-not {n} {m} lt =
    fun-ext Œª k ‚Üí ap un·µê-Œ≤ (if-false (false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                (contra (Œª e ‚Üí subst (m ‚â§‚Åø_) (e ‚Åª¬π) (‚â§-+-l))
                                                        (<‚Üí‚â± $ lt))))

  annotate-Œ≤ : (c : Instr) ‚Üí (‚Ñï ‚Üí Maybe B) ‚Üí AnInstr Ob
  annotate-Œ≤ c f = annotate (un·µê-Œ≤ ‚àò f) c

  annotate-Œ≤-filt : ‚àÄ {c : Instr} {f : ‚Ñï ‚Üí Maybe B} {p : ‚Ñï ‚Üí Bool}
                  ‚Üí (‚àÄ n ‚Üí n <‚Åø asize c ‚Üí ‚åû p n ‚åü)
                  ‚Üí annotate-Œ≤ c (filt f p) Ôºù annotate-Œ≤ c f
  annotate-Œ≤-filt h = annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-true (h n lt))

  anc-Œ≤ : (c : Instr) ‚Üí (‚Ñï ‚Üí Maybe B) ‚Üí AnStr Ob c
  anc-Œ≤ c f = annotate-Œ≤ c f , strip-annotate

  anc-bas : ‚àÄ c ‚Üí is-basis (anc-poset c) (anc-suplat c) (anc-Œ≤ c)
  anc-bas  Skip         =
    ‚âÉ‚Üíis-basis‚Ä≤
      (AnStr-Skip-‚âÉ ‚Åª¬π)
      Skip-‚â§‚Å± skip-‚â§‚Å±-elim
      (fstream-at-basis 0 $ maybe-basis h)
  anc-bas (Assign x e)  =
    ‚âÉ‚Üíis-basis‚Ä≤
      (AnStr-Assign-‚âÉ ‚Åª¬π)
      (Assign-‚â§‚Å± refl refl) assign-‚â§‚Å±-elim
      (fstream-at-basis 0 $ maybe-basis h)
  anc-bas (Seq c‚ÇÅ c‚ÇÇ)   =
    let ih‚ÇÅ = anc-bas c‚ÇÅ
        ih‚ÇÇ = anc-bas c‚ÇÇ
     in
    ‚âÉ‚Üíis-basis‚Ä≤
      {P‚ÇÅ = anc-poset  c‚ÇÅ √ó anc-poset  c‚ÇÇ}
      {L‚ÇÅ = anc-suplat c‚ÇÅ √ó anc-suplat c‚ÇÇ}
      (AnStr-Seq-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ) ‚Üí Seq-‚â§‚Å± le‚ÇÅ le‚ÇÇ) seq-‚â§‚Å±-elim
      (record {
          ‚â§-is-small = Œª where ((a‚ÇÅ , e‚ÇÅ) , (a‚ÇÇ , e‚ÇÇ)) bf ‚Üí √ó-is-of-size (ih‚ÇÅ .is-basis.‚â§-is-small (a‚ÇÅ , e‚ÇÅ) bf)
                                                                         (ih‚ÇÇ .is-basis.‚â§-is-small (a‚ÇÇ , e‚ÇÇ) (shl bf (asize c‚ÇÅ)))
        ; ‚Üì-is-sup = Œª where ((a‚ÇÅ , e‚ÇÅ) , (a‚ÇÇ , e‚ÇÇ)) ‚Üí
                                    record {
                                       fam‚â§lub = Œª where (bf , le‚ÇÅ , le‚ÇÇ) ‚Üí
                                                               ih‚ÇÅ .is-basis.‚Üì-is-sup (a‚ÇÅ , e‚ÇÅ) .fam‚â§lub (bf , le‚ÇÅ)
                                                             , ih‚ÇÇ .is-basis.‚Üì-is-sup (a‚ÇÇ , e‚ÇÇ) .fam‚â§lub (shl bf (asize c‚ÇÅ) , le‚ÇÇ)
                                     ; least = Œª where ((a‚ÇÅ' , e‚ÇÅ') , (a‚ÇÇ' , e‚ÇÇ')) f ‚Üí
                                                               ih‚ÇÅ .is-basis.‚Üì-is-sup (a‚ÇÅ , e‚ÇÅ) .least (a‚ÇÅ' , e‚ÇÅ')
                                                                 (Œª where (bf , le) ‚Üí
                                                                             let bf‚ÇÅ = filt bf (_<? asize c‚ÇÅ)
                                                                                 p‚ÇÅ = annotate-Œ≤-filt (Œª n ‚Üí true‚Üíso!)
                                                                              in
                                                                             subst (_‚â§‚Å± a‚ÇÅ') p‚ÇÅ $
                                                                             f ( bf‚ÇÅ
                                                                               , subst (_‚â§‚Å± a‚ÇÅ) (p‚ÇÅ ‚Åª¬π) le
                                                                               , subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ)
                                                                                       (shl-filt-not {f = bf} {p = _<? asize c‚ÇÅ} {n = asize c‚ÇÅ}
                                                                                          (Œª m le ‚Üí false‚Üíso! (‚â§‚âÉ‚âØ $ le)) ‚Åª¬π)
                                                                                       (annotate-bot e‚ÇÇ))
                                                                              .fst)
                                                             , ih‚ÇÇ .is-basis.‚Üì-is-sup (a‚ÇÇ , e‚ÇÇ) .least (a‚ÇÇ' , e‚ÇÇ')
                                                                 (Œª where (bf , le) ‚Üí
                                                                              let bf‚ÇÇ = shr bf (asize c‚ÇÅ)
                                                                                  p‚ÇÇ = shl-shr {f = bf} {n = asize c‚ÇÅ}
                                                                                in
                                                                              subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ') p‚ÇÇ $
                                                                              f ( bf‚ÇÇ
                                                                                , subst (_‚â§‚Å± a‚ÇÅ)
                                                                                           (annotate-ext {c = c‚ÇÅ} {f = Œª _ ‚Üí bot} {g = un·µê-Œ≤ ‚àò shr bf (asize c‚ÇÅ)}
                                                                                                Œª n lt ‚Üí ap un·µê-Œ≤ (if-false {b = asize c‚ÇÅ ‚â§? n}
                                                                                                                            (false‚Üíso! (<‚âÉ‚â± $ lt))) ‚Åª¬π)
                                                                                           (annotate-bot e‚ÇÅ)
                                                                                , subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ) (p‚ÇÇ ‚Åª¬π) le)
                                                                               .snd)
                                     }
        })
  anc-bas (ITE b c‚ÇÅ c‚ÇÇ) =
    let ih‚ÇÅ = anc-bas c‚ÇÅ
        ih‚ÇÇ = anc-bas c‚ÇÇ
      in
    ‚âÉ‚Üíis-basis‚Ä≤
      {P‚ÇÅ = P √ó anc-poset  c‚ÇÅ √ó P √ó anc-poset  c‚ÇÇ √ó P}
      {L‚ÇÅ = L √ó anc-suplat c‚ÇÅ √ó L √ó anc-suplat c‚ÇÇ √ó L}
      (AnStr-ITE-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) ‚Üí ITE-‚â§‚Å± refl le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ) ite-‚â§‚Å±-elim
      (record {
         ‚â§-is-small = Œª where (p‚ÇÅ , (a‚ÇÅ , e‚ÇÅ) , p‚ÇÇ , (a‚ÇÇ , e‚ÇÇ) , q) bf ‚Üí
                                 √ó-is-of-size ((fstream-at-basis 0 $ maybe-basis h) .is-basis.‚â§-is-small p‚ÇÅ bf) $
                                 √ó-is-of-size (ih‚ÇÅ .is-basis.‚â§-is-small (a‚ÇÅ , e‚ÇÅ) (shl bf 1)) $
                                 √ó-is-of-size ((fstream-at-basis (1 + asize c‚ÇÅ) $ maybe-basis h) .is-basis.‚â§-is-small p‚ÇÇ bf) $
                                 √ó-is-of-size (ih‚ÇÇ .is-basis.‚â§-is-small (a‚ÇÇ , e‚ÇÇ) (shl bf (2 + asize c‚ÇÅ)))
                                              ((fstream-at-basis (2 + asize c‚ÇÅ + asize c‚ÇÇ) $ maybe-basis h) .is-basis.‚â§-is-small q bf)
       ; ‚Üì-is-sup = Œª where (p‚ÇÅ , (a‚ÇÅ , e‚ÇÅ) , p‚ÇÇ , (a‚ÇÇ , e‚ÇÇ) , q) ‚Üí
                               record {
                                 fam‚â§lub = Œª where (bf , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) ‚Üí
                                                       le‚ÇÅ
                                                     , ih‚ÇÅ .is-basis.‚Üì-is-sup (a‚ÇÅ , e‚ÇÅ) .fam‚â§lub (shl bf 1 , le‚ÇÇ)
                                                     , le‚ÇÉ
                                                     , ih‚ÇÇ .is-basis.‚Üì-is-sup (a‚ÇÇ , e‚ÇÇ) .fam‚â§lub (shl bf (2 + asize c‚ÇÅ) , le‚ÇÑ)
                                                     , le‚ÇÖ
                               ; least = Œª where (p‚ÇÅ' , (a‚ÇÅ' , e‚ÇÅ') , p‚ÇÇ' , (a‚ÇÇ' , e‚ÇÇ') , q') f ‚Üí
                                                      ‚Üì-is-sup p‚ÇÅ .least p‚ÇÅ'
                                                        (Œª where (b' , le) ‚Üí
                                                                   let bf‚ÇÅ = single-at b' 0 in
                                                                   f ( bf‚ÇÅ
                                                                     , le
                                                                     , subst (Œª q ‚Üí annotate q c‚ÇÅ ‚â§‚Å± a‚ÇÅ) (shl-single-at-not z<s ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÅ)
                                                                     , has-bot p‚ÇÇ
                                                                     , subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ) (shl-single-at-not z<s ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÇ)
                                                                     , has-bot q)
                                                                    .fst)
                                                    , ih‚ÇÅ .is-basis.‚Üì-is-sup (a‚ÇÅ , e‚ÇÅ) .least (a‚ÇÅ' , e‚ÇÅ')
                                                        (Œª where (bf , le) ‚Üí
                                                                    let bf‚ÇÇ = shr (filt bf (_<? asize c‚ÇÅ)) 1
                                                                        p‚ÇÇ‚ÇÅ = annotate-Œ≤-filt (Œª n ‚Üí true‚Üíso!)
                                                                        p‚ÇÇ‚ÇÇ = shl-shr {f = filt bf (_<? asize c‚ÇÅ)} {n = 1}
                                                                     in
                                                                   subst (_‚â§‚Å± a‚ÇÅ') p‚ÇÇ‚ÇÅ $ subst (Œª q ‚Üí annotate q c‚ÇÅ ‚â§‚Å± a‚ÇÅ') p‚ÇÇ‚ÇÇ $
                                                                   f ( bf‚ÇÇ
                                                                     , has-bot p‚ÇÅ
                                                                     , subst (Œª q ‚Üí annotate q c‚ÇÅ ‚â§‚Å± a‚ÇÅ) (p‚ÇÇ‚ÇÇ ‚Åª¬π) (subst (_‚â§‚Å± a‚ÇÅ) (p‚ÇÇ‚ÇÅ ‚Åª¬π) le)
                                                                     , subst (Œª q ‚Üí un·µê-Œ≤ q ‚â§ p‚ÇÇ) (if-false (false‚Üíso! ‚¶É <-reflects {m = asize c‚ÇÅ} ‚¶Ñ <-irr) ‚Åª¬π )
                                                                             (has-bot p‚ÇÇ)
                                                                     , subst (_‚â§‚Å± a‚ÇÇ)
                                                                             (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (  if-true (true‚Üíso! ‚¶É <-reflects {n = n + (2 + asize c‚ÇÅ)} ‚¶Ñ
                                                                                                                                  (<-+-l z<s))
                                                                                                              ‚àô if-false (false‚Üíso!
                                                                                                                                  (‚â§‚Üí‚âØ $ ‚â§‚Åø-trans (‚â§‚Åø-trans ‚â§-ascend ‚â§-+-l)
                                                                                                                                                  (=‚Üí‚â§ (ap (_‚à∏ 1) (+-suc-r n (1 + asize c‚ÇÅ) ‚Åª¬π)))))) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÇ)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ q)
                                                                             (if-false (false‚Üíso! ‚¶É <-reflects {m = 1 + asize c‚ÇÅ + asize c‚ÇÇ} {n = asize c‚ÇÅ} ‚¶Ñ
                                                                                                  (‚â§‚Üí‚âØ $ ‚â§-suc-r ‚â§-+-r)) ‚Åª¬π)
                                                                             (has-bot q))
                                                                    .snd .fst)
                                                    , ‚Üì-is-sup p‚ÇÇ .least p‚ÇÇ'
                                                        (Œª where (b' , le) ‚Üí
                                                                   let bf‚ÇÉ = single-at b' (1 + asize c‚ÇÅ)
                                                                       p‚ÇÉ = ap un·µê-Œ≤ (if-true (true‚Üíso! (refl‚Çö {x = asize c‚ÇÅ})))
                                                                     in
                                                                   subst (_‚â§ p‚ÇÇ') p‚ÇÉ $
                                                                   f ( bf‚ÇÉ
                                                                     , has-bot p‚ÇÅ
                                                                     , subst (_‚â§‚Å± a‚ÇÅ)
                                                                             (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-false (false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                                                                                                  (contra (Œª e ‚Üí =‚Üí‚â§ (suc-inj (e ‚àô +-comm n 1))) (<‚Üí‚â± $ lt)))) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÅ)
                                                                     , subst (_‚â§ p‚ÇÇ) (p‚ÇÉ ‚Åª¬π) le
                                                                     , subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ)
                                                                             (shl-single-at-not {n = 1 + asize c‚ÇÅ} {m = 2 + asize c‚ÇÅ} (s<s <-ascend) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÇ)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ q)
                                                                             (if-false {b = asize c‚ÇÅ =? (1 + asize c‚ÇÅ + asize c‚ÇÇ)}
                                                                                       (false‚Üíso! ‚¶É Reflects-‚Ñï-Path {m = asize c‚ÇÅ} {n = 1 + asize c‚ÇÅ + asize c‚ÇÇ} ‚¶Ñ
                                                                                                  Œª p ‚Üí false! (p ‚àô +-suc-r (asize c‚ÇÅ) (asize c‚ÇÇ) ‚Åª¬π)) ‚Åª¬π)
                                                                             (has-bot q))
                                                                    .snd .snd .fst)
                                                    , ih‚ÇÇ .is-basis.‚Üì-is-sup (a‚ÇÇ , e‚ÇÇ) .least (a‚ÇÇ' , e‚ÇÇ')
                                                        (Œª where (bf , le) ‚Üí
                                                                   let bf‚ÇÑ = shr (filt bf (_<? asize c‚ÇÇ)) (2 + asize c‚ÇÅ)
                                                                       p‚ÇÑ‚ÇÅ = annotate-Œ≤-filt (Œª n ‚Üí true‚Üíso!)
                                                                       p‚ÇÑ‚ÇÇ = shl-shr {f = filt bf (_<? asize c‚ÇÇ)} {n = 2 + asize c‚ÇÅ}
                                                                     in
                                                                   subst (_‚â§‚Å± a‚ÇÇ') p‚ÇÑ‚ÇÅ $ subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ') p‚ÇÑ‚ÇÇ $
                                                                   f ( bf‚ÇÑ
                                                                     , has-bot p‚ÇÅ
                                                                     , subst (_‚â§‚Å± a‚ÇÅ)
                                                                             (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-false {b = 1 + asize c‚ÇÅ <? n + 1}
                                                                                                                       (false‚Üíso! ‚¶É <-reflects ‚¶Ñ
                                                                                                                                  (‚â§‚Üí‚âØ $ ‚â§‚Åø-trans (=‚Üí‚â§ (+-comm n 1)) (s‚â§s (<‚Üí‚â§ lt))))) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÅ)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ p‚ÇÇ)
                                                                             (if-false (false‚Üíso! ‚¶É <-reflects {m = asize c‚ÇÅ} ‚¶Ñ <-irr) ‚Åª¬π)
                                                                             (has-bot p‚ÇÇ)
                                                                     , subst (Œª q ‚Üí annotate q c‚ÇÇ ‚â§‚Å± a‚ÇÇ) (p‚ÇÑ‚ÇÇ ‚Åª¬π) (subst (_‚â§‚Å± a‚ÇÇ) (p‚ÇÑ‚ÇÅ ‚Åª¬π) le)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ q)
                                                                             (( if-true ( true‚Üíso! ‚¶É <-reflects {m = asize c‚ÇÅ} ‚¶Ñ
                                                                                                   (<-+-r <-ascend))
                                                                               ‚àô if-false ( false‚Üíso! ‚¶É <-reflects ‚¶Ñ
                                                                                                      ((‚â§‚Üí‚âØ $ =‚Üí‚â§ (  +-cancel-‚à∏-r (asize c‚ÇÇ) (asize c‚ÇÅ) ‚Åª¬π
                                                                                                                   ‚àô ap (_‚à∏ asize c‚ÇÅ) (+-comm (asize c‚ÇÇ) (asize c‚ÇÅ))))))) ‚Åª¬π)
                                                                             (has-bot q))
                                                                     .snd .snd .snd .fst)
                                                    , ‚Üì-is-sup q .least q'
                                                        Œª where (b' , le) ‚Üí
                                                                   let bf‚ÇÖ = single-at b' (2 + asize c‚ÇÅ + asize c‚ÇÇ)
                                                                       p‚ÇÖ = ap un·µê-Œ≤ (if-true (true‚Üíso! (refl‚Çö {x = asize c‚ÇÅ + asize c‚ÇÇ})))
                                                                     in
                                                                   subst (_‚â§ q') p‚ÇÖ $
                                                                   f ( bf‚ÇÖ
                                                                     , has-bot p‚ÇÅ
                                                                     , subst (_‚â§‚Å± a‚ÇÅ)
                                                                             (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-false (false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                                                                                                  (contra
                                                                                                                                     (Œª e ‚Üí ‚â§-peel (‚â§‚Åø-trans (s‚â§s (‚â§-suc-r ‚â§-+-r))
                                                                                                                                                             (=‚Üí‚â§ (e ‚àô +-comm n 1))))
                                                                                                                                     (<‚Üí‚â± $ lt)))) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÅ)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ p‚ÇÇ)
                                                                             (if-false ( false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                                                                   (Œª p ‚Üí false! ‚¶É Reflects-id‚â†+-suc ‚¶Ñ ((+-suc-r (asize c‚ÇÅ) (asize c‚ÇÇ) ‚àô p) ‚Åª¬π))) ‚Åª¬π)
                                                                             (has-bot p‚ÇÇ)
                                                                     , subst (_‚â§‚Å± a‚ÇÇ)
                                                                             (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-false (false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                                                                                                  (contra
                                                                                                                                    (Œª e ‚Üí =‚Üí‚â§ (+-cancel-r (asize c‚ÇÇ) n (2 + asize c‚ÇÅ)
                                                                                                                                                    (+-comm (asize c‚ÇÇ) (2 + asize c‚ÇÅ) ‚àô e)))
                                                                                                                                    (<‚Üí‚â± $ lt)))) ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÇ)
                                                                     , subst (_‚â§ q) (p‚ÇÖ ‚Åª¬π) le)
                                                                     .snd .snd .snd .snd
                               }
       })
  anc-bas (While b c)   =
    let ih = anc-bas c in
    ‚âÉ‚Üíis-basis‚Ä≤
      {P‚ÇÅ = P √ó P √ó anc-poset  c √ó P}
      {L‚ÇÅ = L √ó L √ó anc-suplat c √ó L}
      (AnStr-While-‚âÉ ‚Åª¬π)
      (Œª where (le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ) ‚Üí While-‚â§‚Å± le‚ÇÅ refl le‚ÇÇ le‚ÇÉ le‚ÇÑ) while-‚â§‚Å±-elim
      (record {
         ‚â§-is-small = Œª where (inv‚ÇÄ , p‚ÇÄ , (a‚ÇÄ , e‚ÇÄ) , q‚ÇÄ) bf ‚Üí
                                √ó-is-of-size ((fstream-at-basis 0 $ maybe-basis h) .is-basis.‚â§-is-small inv‚ÇÄ bf) $
                                √ó-is-of-size ((fstream-at-basis 1 $ maybe-basis h) .is-basis.‚â§-is-small p‚ÇÄ bf) $
                                √ó-is-of-size (ih .is-basis.‚â§-is-small (a‚ÇÄ , e‚ÇÄ) (shl bf 2))
                                             ((fstream-at-basis (2 + asize c) $ maybe-basis h) .is-basis.‚â§-is-small q‚ÇÄ bf)
       ; ‚Üì-is-sup = Œª where (inv‚ÇÄ , p‚ÇÄ , (a‚ÇÄ , e‚ÇÄ) , q‚ÇÄ) ‚Üí
                               record {
                                 fam‚â§lub = Œª where (bf , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ) ‚Üí
                                                       le‚ÇÅ
                                                     , le‚ÇÇ
                                                     , ih .is-basis.‚Üì-is-sup (a‚ÇÄ , e‚ÇÄ) .fam‚â§lub (shl bf 2 , le‚ÇÉ)
                                                     , le‚ÇÑ
                               ; least = Œª where (inv‚ÇÄ' , p‚ÇÄ' , (a‚ÇÄ' , e‚ÇÄ') , q‚ÇÄ') f ‚Üí
                                                     (‚Üì-is-sup inv‚ÇÄ .least inv‚ÇÄ'
                                                        Œª where (b' , le) ‚Üí
                                                                   let bf‚ÇÅ = single-at b' 0 in
                                                                   f ( bf‚ÇÅ
                                                                     , le
                                                                     , has-bot p‚ÇÄ
                                                                     , subst (Œª q ‚Üí annotate q c ‚â§‚Å± a‚ÇÄ)
                                                                             (shl-single-at-not {n = 0} {m = 2} z<s ‚Åª¬π)
                                                                             (annotate-bot e‚ÇÄ)
                                                                     , has-bot q‚ÇÄ)
                                                                    .fst)
                                                   , (‚Üì-is-sup p‚ÇÄ .least p‚ÇÄ'
                                                        Œª where (b' , le) ‚Üí
                                                                  let bf‚ÇÇ = single-at b' 1 in
                                                                  f ( bf‚ÇÇ
                                                                    , has-bot inv‚ÇÄ
                                                                    , le
                                                                    , subst (Œª q ‚Üí annotate q c ‚â§‚Å± a‚ÇÄ)
                                                                            (shl-single-at-not {n = 1} {m = 2} (s<s z<s) ‚Åª¬π)
                                                                            (annotate-bot e‚ÇÄ)
                                                                    , has-bot q‚ÇÄ)
                                                                   .snd .fst)
                                                   , (ih .is-basis.‚Üì-is-sup (a‚ÇÄ , e‚ÇÄ) .least (a‚ÇÄ' , e‚ÇÄ')
                                                         Œª where (bf , le) ‚Üí
                                                                  let bf‚ÇÉ = shr (filt bf (_<? asize c)) 2
                                                                      p‚ÇÉ‚ÇÅ = annotate-Œ≤-filt (Œª n ‚Üí true‚Üíso!)
                                                                      p‚ÇÉ‚ÇÇ = shl-shr {f = filt bf (_<? asize c)} {n = 2}
                                                                    in
                                                                   subst (_‚â§‚Å± a‚ÇÄ') p‚ÇÉ‚ÇÅ $ subst (Œª q ‚Üí annotate q c ‚â§‚Å± a‚ÇÄ') p‚ÇÉ‚ÇÇ $
                                                                   f ( bf‚ÇÉ
                                                                     , has-bot inv‚ÇÄ
                                                                     , has-bot p‚ÇÄ
                                                                     , subst (Œª q ‚Üí annotate q c ‚â§‚Å± a‚ÇÄ) (p‚ÇÉ‚ÇÇ ‚Åª¬π) (subst (_‚â§‚Å± a‚ÇÄ) (p‚ÇÉ‚ÇÅ ‚Åª¬π) le)
                                                                     , subst (Œª z ‚Üí un·µê-Œ≤ z ‚â§ q‚ÇÄ)
                                                                             (if-false (false‚Üíso! ‚¶É <-reflects {m = asize c} ‚¶Ñ <-irr ) ‚Åª¬π)
                                                                             (has-bot q‚ÇÄ))
                                                                   .snd .snd .fst)
                                                   , ‚Üì-is-sup q‚ÇÄ .least q‚ÇÄ'
                                                        Œª where (b' , le) ‚Üí
                                                                  let bf‚ÇÑ = single-at b' (2 + asize c)
                                                                      p‚ÇÑ = ap un·µê-Œ≤ $ if-true $ true‚Üíso! (refl‚Çö {x = asize c})
                                                                    in
                                                                  subst (_‚â§ q‚ÇÄ') p‚ÇÑ $
                                                                  f ( bf‚ÇÑ
                                                                    , has-bot inv‚ÇÄ
                                                                    , has-bot p‚ÇÄ
                                                                    , subst (_‚â§‚Å± a‚ÇÄ)
                                                                            (annotate-ext Œª n lt ‚Üí ap un·µê-Œ≤ (if-false (false‚Üíso! ‚¶É Reflects-‚Ñï-Path ‚¶Ñ
                                                                                                                                 (contra
                                                                                                                                   (Œª e ‚Üí =‚Üí‚â§ (+-inj-r (asize c) n 2 (+-comm (asize c) 2 ‚àô e)))
                                                                                                                                   (<‚Üí‚â± $ lt)))) ‚Åª¬π)
                                                                                (annotate-bot e‚ÇÄ)
                                                                    , subst (_‚â§ q‚ÇÄ) (p‚ÇÑ ‚Åª¬π) le)
                                                                  .snd .snd .snd
                               }
       })

{-
  anc-is-small : (c : Instr) (x : AnStr Ob c) (b : ‚Ñï ‚Üí Maybe B) ‚Üí is-of-size 0‚Ñì (annotate-Œ≤ c b ‚â§‚Å± x .fst)
  anc-is-small c x b = ‚âÉ‚Üíis-of-size (‚â§‚Å±‚âÉ=all ‚Åª¬π) (size 0‚Ñì)

  anc-bas : ‚àÄ c ‚Üí is-basis (anc-poset c) (anc-suplat c) (anc-Œ≤ c)
  anc-bas c = record { ‚â§-is-small = anc-is-small c ; ‚Üì-is-sup = anc-‚Üì-is-sup c }

  -- small presentation

  J : ùí∞
  J = sp .fst .fst
  Y : J ‚Üí ‚Ñô B 0‚Ñì
  Y = sp .fst .snd .fst
  R : ‚Ñô (B √ó ‚Ñô B 0‚Ñì) 0‚Ñì
  R = sp .fst .snd .snd
  isp : is-a-small-presentation P L Œ≤ h (J , Y , R)
  isp = sp .snd
-}
