module Nipkow.ACom.Order where

open import Prelude
open import Data.Empty
open import Data.Unit
open import Data.Bool
open import Data.Nat
open import Data.Nat.Order.Minmax
open import Data.Sum
open import Data.String
open import Data.Maybe renaming (rec to rec·µê ; elim to elim·µê)
open import Data.List
open import Data.List.Operations.Properties
open import Data.List.Correspondences.Binary.All2
open import Data.Reflects

open import Order.Base
open import Order.Diagram.Lub
open import Order.SupLattice
open import Order.SupLattice.SmallBasis

open import List1
open import Nipkow.Lang
open import Nipkow.ACom

module AnInstrLeq
  (A : ùí∞ (‚Ñìsuc 0‚Ñì))
  (leq : A ‚Üí A ‚Üí ùí∞)
  where

  open List1.List1

  _‚â§‚Å±_ : AnInstr A ‚Üí AnInstr A ‚Üí ùí∞ (‚Ñìsuc 0‚Ñì)
  c‚ÇÅ ‚â§‚Å± c‚ÇÇ = (strip c‚ÇÅ Ôºù strip c‚ÇÇ) √ó All2‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)

  opaque
    skip-‚â§‚Å±-intro : ‚àÄ {s s'}
                  ‚Üí leq s s'
                  ‚Üí AnSkip s ‚â§‚Å± AnSkip s'
    skip-‚â§‚Å±-intro le = refl , [] , le

    skip-‚â§‚Å±-introl : ‚àÄ {s c s'}
                   ‚Üí c Ôºù AnSkip s' ‚Üí leq s s'
                   ‚Üí AnSkip s ‚â§‚Å± c
    skip-‚â§‚Å±-introl {s} eq le = subst (AnSkip s ‚â§‚Å±_) (eq ‚Åª¬π) (skip-‚â§‚Å±-intro le)

    skip-‚â§‚Å±-intror : ‚àÄ {s c s'}
                   ‚Üí c Ôºù AnSkip s ‚Üí leq s s'
                  ‚Üí c ‚â§‚Å± AnSkip s'
    skip-‚â§‚Å±-intror {s'} eq le = subst (_‚â§‚Å± AnSkip s') (eq ‚Åª¬π) (skip-‚â§‚Å±-intro le)

    skip-‚â§‚Å±-eliml : ‚àÄ {s c}
                  ‚Üí AnSkip s ‚â§‚Å± c
                  ‚Üí Œ£[ s' Íûâ A ] (c Ôºù AnSkip s') √ó leq s s'
    skip-‚â§‚Å±-eliml {s} {c} (h1 , h2 , h3) =
      let (s' , eq) = strip-skip-r (h1 ‚Åª¬π) in
      s' , eq , subst (leq s) (ap post eq) h3

    skip-‚â§‚Å±-elim : ‚àÄ {s s'}
                 ‚Üí AnSkip s ‚â§‚Å± AnSkip s'
                 ‚Üí leq s s'
    skip-‚â§‚Å±-elim {s} {s'} (h1 , h2 , h3) = h3

    assign-‚â§‚Å±-intro : ‚àÄ {x e s s'}
                    ‚Üí leq s s'
                    ‚Üí AnAssign x e s ‚â§‚Å± AnAssign x e s'
    assign-‚â§‚Å±-intro le = refl , [] , le

    assign-‚â§‚Å±-introl : ‚àÄ {x e s c s'}
                     ‚Üí c Ôºù AnAssign x e s' ‚Üí leq s s'
                     ‚Üí AnAssign x e s ‚â§‚Å± c
    assign-‚â§‚Å±-introl {x} {e} {s} eq le =
      subst (AnAssign x e s ‚â§‚Å±_) (eq ‚Åª¬π) (assign-‚â§‚Å±-intro le)

    assign-‚â§‚Å±-intror : ‚àÄ {x e s c s'}
                     ‚Üí c Ôºù AnAssign x e s ‚Üí leq s s'
                     ‚Üí c ‚â§‚Å± AnAssign x e s'
    assign-‚â§‚Å±-intror {x} {e} {s'} eq le =
      subst (_‚â§‚Å± AnAssign x e s') (eq ‚Åª¬π) (assign-‚â§‚Å±-intro le)

    assign-‚â§‚Å±-eliml : ‚àÄ {x e s c}
                ‚Üí AnAssign x e s ‚â§‚Å± c
                ‚Üí Œ£[ s' Íûâ A ] (c Ôºù AnAssign x e s') √ó leq s s'
    assign-‚â§‚Å±-eliml {x} {e} {s} {c} (h1 , h2 , h3) =
      let (s' , eq) = strip-assign-r (h1 ‚Åª¬π) in
      s' , eq , subst (leq s) (ap post eq) h3

    assign-‚â§‚Å±-elim : ‚àÄ {x e s s'}
                   ‚Üí AnAssign x e s ‚â§‚Å± AnAssign x e s'
                   ‚Üí leq s s'
    assign-‚â§‚Å±-elim {x} {e} {s} {s'} (h1 , h2 , h3) = h3

    seq-‚â§‚Å±-intro : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ}
                 ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
                 ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
    seq-‚â§‚Å±-intro (e‚ÇÅ , le‚ÇÅ) (e‚ÇÇ , le‚ÇÇ) = ap¬≤ Seq e‚ÇÅ e‚ÇÇ , All2‚ÇÅ-++‚ÇÅ le‚ÇÅ le‚ÇÇ

    seq-‚â§‚Å±-introl : ‚àÄ {c‚ÇÅ c‚ÇÇ c c‚ÇÉ c‚ÇÑ}
                  ‚Üí c Ôºù AnSeq c‚ÇÉ c‚ÇÑ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
                  ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
    seq-‚â§‚Å±-introl {c‚ÇÅ} {c‚ÇÇ} eq le‚ÇÅ le‚ÇÇ =
      subst (AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å±_) (eq ‚Åª¬π) (seq-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ)

    seq-‚â§‚Å±-intror : ‚àÄ {c‚ÇÅ c‚ÇÇ c c‚ÇÉ c‚ÇÑ}
                  ‚Üí c Ôºù AnSeq c‚ÇÅ c‚ÇÇ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
                  ‚Üí c ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
    seq-‚â§‚Å±-intror {c‚ÇÉ} {c‚ÇÑ} eq le‚ÇÅ le‚ÇÇ =
      subst (_‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ) (eq ‚Åª¬π) (seq-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ)

    seq-‚â§‚Å±-eliml : ‚àÄ {c‚ÇÅ c‚ÇÇ c}
             ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
             ‚Üí Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ]
                 (c Ôºù AnSeq c‚ÇÉ c‚ÇÑ) √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-eliml {c‚ÇÅ} {c‚ÇÇ} {c} (h1 , h2) =
      let (a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ) = strip-seq-r (h1 ‚Åª¬π)
          (le1 , le2) = All2‚ÇÅ-split
                          (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                             (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÇ ‚Åª¬π)))
                          (subst (All2‚ÇÅ leq (annos c‚ÇÅ ++‚ÇÅ annos c‚ÇÇ) ‚àò annos) eq‚ÇÅ h2)
         in
        a‚ÇÅ , a‚ÇÇ , eq‚ÇÅ , (eq‚ÇÇ ‚Åª¬π , le1) , eq‚ÇÉ ‚Åª¬π , le2

    seq-‚â§‚Å±-elim : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ}
                ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
                ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-elim {c‚ÇÅ} {c‚ÇÇ} le =
      let (a‚ÇÅ , a‚ÇÇ , eq , le‚ÇÅ , le‚ÇÇ) = seq-‚â§‚Å±-eliml le
          (eq‚ÇÅ , eq‚ÇÇ) = AnSeq-inj eq
        in
      subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÅ ‚Åª¬π) le‚ÇÅ , subst (c‚ÇÇ ‚â§‚Å±_) (eq‚ÇÇ ‚Åª¬π) le‚ÇÇ

    ite-‚â§‚Å±-intro : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                 ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
                 ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
    ite-‚â§‚Å±-intro {b} le‚ÇÅ (e‚ÇÇ , le‚ÇÇ) le‚ÇÉ (e‚ÇÑ , le‚ÇÑ) le‚ÇÖ =
      ( ap¬≤ (ITE b) e‚ÇÇ e‚ÇÑ
      , All2‚ÇÅ-‚à∂+‚ÇÅ-r (All2‚ÇÅ-++‚ÇÅ (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ le‚ÇÇ) (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÉ le‚ÇÑ)) le‚ÇÖ)

    ite-‚â§‚Å±-introl : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                  ‚Üí c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
                  ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
                  ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
    ite-‚â§‚Å±-introl {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ =
      subst (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π) (ite-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ)

    ite-‚â§‚Å±-intror : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                  ‚Üí c Ôºù AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ
                  ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
                  ‚Üí c ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
    ite-‚â§‚Å±-intror {b} {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ =
      subst (_‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ) (eq ‚Åª¬π) (ite-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ)

    ite-‚â§‚Å±-eliml : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c}
                 ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
                 ‚Üí Œ£[ p‚ÇÉ Íûâ A ] Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ p‚ÇÑ Íûâ A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                                  (c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ)
                                √ó leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-eliml {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {c} (h1 , h2) =
      let (p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q , eq , eq‚ÇÅ , eq‚ÇÇ) = strip-ite-r (h1 ‚Åª¬π)
          le = All2‚ÇÅ-‚à∂+‚ÇÅ-l (  length‚ÇÅ-++ {xs = p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ} {ys = p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ}
                            ‚àô ap¬≤ (Œª x y ‚Üí suc x + suc y)
                                  (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                                     (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÅ ‚Åª¬π)))
                                  (length-annos-same {c‚ÇÅ = c‚ÇÇ}
                                     (reflects-true (reflects-instr (strip c‚ÇÇ) (strip a‚ÇÇ)) (eq‚ÇÇ ‚Åª¬π)))
                            ‚àô length‚ÇÅ-++ {xs = p‚ÇÉ ‚à∑‚ÇÅ annos a‚ÇÅ} {ys = p‚ÇÑ ‚à∑‚ÇÅ annos a‚ÇÇ} ‚Åª¬π) $
                 subst (All2‚ÇÅ leq (((p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ) ++‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÅ) ‚àò annos) eq h2
          (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All2‚ÇÅ-split (ap suc (length-annos-same {c‚ÇÅ = c‚ÇÅ} (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a‚ÇÅ)) (eq‚ÇÅ ‚Åª¬π))))
                                      (le .fst)
          (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÅ
          (le‚ÇÉ‚ÇÅ , le‚ÇÉ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
        in
      p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q , eq , le‚ÇÇ‚ÇÅ , (eq‚ÇÅ ‚Åª¬π , le‚ÇÇ‚ÇÇ) , le‚ÇÉ‚ÇÅ , (eq‚ÇÇ ‚Åª¬π , le‚ÇÉ‚ÇÇ) , le .snd

    ite-‚â§‚Å±-elim : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
                ‚Üí leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-elim {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} le =
      let (r‚ÇÅ , a‚ÇÅ , r‚ÇÇ , a‚ÇÇ , w‚ÇÅ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) = ite-‚â§‚Å±-eliml le
          (_ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ , eq‚ÇÖ) = AnITE-inj eq
        in
        subst (leq p‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le‚ÇÅ
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÇ ‚Åª¬π) le‚ÇÇ
      , subst (leq p‚ÇÇ) (eq‚ÇÉ ‚Åª¬π) le‚ÇÉ
      , subst (c‚ÇÇ ‚â§‚Å±_) (eq‚ÇÑ ‚Åª¬π) le‚ÇÑ
      , subst (leq q‚ÇÅ) (eq‚ÇÖ ‚Åª¬π) le‚ÇÖ

    while-‚â§‚Å±-intro : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                    ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
                    ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
                    ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
    while-‚â§‚Å±-intro {b} le‚ÇÅ le‚ÇÇ (e‚ÇÉ , le‚ÇÉ) le‚ÇÑ =
      ( ap (While b) e‚ÇÉ
      , All2‚ÇÅ-‚à∂+‚ÇÅ-r (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ (All2-‚à∂‚à∂‚ÇÅ-r le‚ÇÇ le‚ÇÉ)) le‚ÇÑ)

    while-‚â§‚Å±-introl : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                    ‚Üí c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
                    ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
                    ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
                    ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
    while-‚â§‚Å±-introl {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ =
      subst (AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π) (while-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ)

    while-‚â§‚Å±-intror : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                    ‚Üí c Ôºù AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ
                    ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
                    ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
                    ‚Üí c ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
    while-‚â§‚Å±-intror {b} {c} {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ =
      subst (_‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ) (eq ‚Åª¬π) (while-‚â§‚Å±-intro le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ)

    while-‚â§‚Å±-eliml : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c}
                   ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
                   ‚Üí Œ£[ inv‚ÇÇ Íûâ A ] Œ£[ p‚ÇÇ Íûâ A ] Œ£[ c‚ÇÇ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                         (c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ)
                       √ó leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-eliml {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} (h1 , h2) =
      let (inv‚ÇÇ , p , a , q , eq , eq‚ÇÅ) = strip-while-r (h1 ‚Åª¬π)
          le = All2‚ÇÅ-‚à∂+‚ÇÅ-l (ap (2 +_)
                              (length-annos-same {c‚ÇÅ = c‚ÇÅ}
                                (reflects-true (reflects-instr (strip c‚ÇÅ) (strip a)) (eq‚ÇÅ ‚Åª¬π)))) $
               subst (All2‚ÇÅ leq (((inv‚ÇÅ ‚à∑‚ÇÅ (p‚ÇÅ ‚à∑‚ÇÅ annos c‚ÇÅ)) ‚à∂+‚ÇÅ q‚ÇÅ)) ‚àò annos) eq h2
          (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l (le .fst)
          (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All2-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
       in
      inv‚ÇÇ , p , a , q , eq , le‚ÇÅ‚ÇÅ , le‚ÇÇ‚ÇÅ , (eq‚ÇÅ ‚Åª¬π , le‚ÇÇ‚ÇÇ) , le .snd

    while-‚â§‚Å±-elim : ‚àÄ {b inv‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                  ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
                  ‚Üí leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-elim {b} {inv‚ÇÅ} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} le =
      let (inv‚ÇÄ , p , a , q , eq , le1 , le2 , le3 , le4) = while-‚â§‚Å±-eliml le
          (eq‚ÇÅ , _ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ) = AnWhile-inj eq
        in
        subst (leq inv‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le1
      , subst (leq p‚ÇÅ) (eq‚ÇÇ ‚Åª¬π) le2
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÉ ‚Åª¬π) le3
      , subst (leq q‚ÇÅ) (eq‚ÇÑ ‚Åª¬π) le4

  mono-post : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq (post c‚ÇÅ) (post c‚ÇÇ)
  mono-post (_ , _ , h) = h

module AnInstrOrd {B : ùí∞}
  (P : Poset (‚Ñìsuc 0‚Ñì) 0‚Ñì)
  (L : is-sup-lattice P 0‚Ñì)
  (Œ≤ : B ‚Üí ‚åû P ‚åü)
  (h : is-basis P L Œ≤)
  where

  open Poset P
  open is-lub
  open is-sup-lattice L
  open is-basis h
  open AnInstrLeq Ob _‚â§_

  -- TODO reuse Order.Diagram.Lub.Reasoning
  P‚ä• : Ob
  P‚ä• = sup {I = ‚ä•} Œª ()

  P‚ä•‚â§ : ‚àÄ {o} ‚Üí P‚ä• ‚â§ o
  P‚ä•‚â§ {o} = suprema (Œª ()) .least o Œª ()

  an-poset : Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  an-poset .Poset.Ob                                = AnInstr Ob
  an-poset .Poset._‚â§_                               = _‚â§‚Å±_
  an-poset .Poset.‚â§-thin                            = √ó-is-of-hlevel 1 (instr-is-set (strip _) (strip _))
                                                                       (All2‚ÇÅ-is-of-hlevel 0 (Œª _ _ ‚Üí ‚â§-thin))
  an-poset .Poset.‚â§-refl                            = refl , all2‚ÇÅ-refl (Œª _ ‚Üí ‚â§-refl)
  an-poset .Poset.‚â§-trans (exy , axy) (eyz , ayz)   = exy ‚àô eyz , all2‚ÇÅ-trans (Œª _ _ _ ‚Üí ‚â§-trans) axy ayz
  an-poset .Poset.‚â§-antisym (exy , axy) (eyx , ayx) =
    strip-annos-same (reflects-true (reflects-instr (strip _) (strip _)) exy)
                     (all2‚ÇÅ-antisym (Œª _ _ ‚Üí ‚â§-antisym) axy ayx)

  anc-poset : Instr ‚Üí Poset (‚Ñìsuc 0‚Ñì) (‚Ñìsuc 0‚Ñì)
  anc-poset c .Poset.Ob = AnStr Ob c
  anc-poset c .Poset._‚â§_ (a1 , e1) (a2 , e2) = a1 ‚â§‚Å± a2  -- TODO try just all2 leq, because strip equality is assumed
  anc-poset c .Poset.‚â§-thin = √ó-is-of-hlevel 1 (instr-is-set (strip _) (strip _))
                                               (All2‚ÇÅ-is-of-hlevel 0 (Œª _ _ ‚Üí ‚â§-thin))
  anc-poset c .Poset.‚â§-refl = refl , all2‚ÇÅ-refl (Œª _ ‚Üí ‚â§-refl)
  anc-poset c .Poset.‚â§-trans (exy , axy) (eyz , ayz)   = exy ‚àô eyz , all2‚ÇÅ-trans (Œª _ _ _ ‚Üí ‚â§-trans) axy ayz
  anc-poset c .Poset.‚â§-antisym {x = ax , ex} {y = ay , ey} (exy , axy) (eyx , ayx) =
    Œ£-prop-path (Œª a ‚Üí instr-is-set (strip a) c) $
    strip-annos-same (reflects-true (reflects-instr (strip _) (strip _)) exy)
                     (all2‚ÇÅ-antisym (Œª _ _ ‚Üí ‚â§-antisym) axy ayx)

  anc-sup : ‚àÄ (c : Instr) ‚Üí {I : ùí∞} ‚Üí (I ‚Üí AnStr Ob c) ‚Üí AnStr Ob c
  anc-sup  Skip         F =
    AnSkip (sup Œª i ‚Üí let (a , e) = strip-skip-r (F i .snd) in a) , refl
  anc-sup (Assign x e)  F =
    AnAssign x e (sup Œª i ‚Üí let (a , e) = strip-assign-r (F i .snd) in a) , refl
  anc-sup (Seq c‚ÇÅ c‚ÇÇ)   F =
    let (a‚ÇÅ , e‚ÇÅ) = anc-sup c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , e‚ÇÇ) = anc-sup c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
    AnSeq a‚ÇÅ a‚ÇÇ , ap¬≤ Seq e‚ÇÅ e‚ÇÇ
  anc-sup (ITE b c‚ÇÅ c‚ÇÇ) F =
    let (a‚ÇÅ , e‚ÇÅ) = anc-sup c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , e‚ÇÇ) = anc-sup c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
   AnITE b
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ)
     a‚ÇÅ
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ)
     a‚ÇÇ
     (sup Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q)
   , ap¬≤ (ITE b) e‚ÇÅ e‚ÇÇ
  anc-sup (While b c)   F =
    let (a , e) = anc-sup c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
     in
    AnWhile (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv)
            b
            (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p)
            a
            (sup Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q)
    , ap (While b) e

  anc-lub : ‚àÄ c {I : ùí∞} (F : I ‚Üí AnStr Ob c)
          ‚Üí is-lub (anc-poset c) F (anc-sup c F)
  anc-lub  Skip         F =
    let a  = sup     Œª j ‚Üí let (a , _) = strip-skip-r (F j .snd) in a
        sa = suprema Œª j ‚Üí let (a , _) = strip-skip-r (F j .snd) in a
      in
    record {
      fam‚â§lub = Œª i ‚Üí skip-‚â§‚Å±-intror (let (a , e) = strip-skip-r (F i .snd) in e) $
                      sa .fam‚â§lub i
    ; least = Œª where (a' , eq) f ‚Üí
                         let (a1 , eq1) = strip-skip-r eq in
                         skip-‚â§‚Å±-introl eq1 $
                         sa .least a1 Œª i ‚Üí skip-‚â§‚Å±-elim $
                                            subst (_‚â§‚Å± AnSkip a1) (let (a , e) = strip-skip-r (F i .snd) in e) $
                                            subst (F i .fst ‚â§‚Å±_) eq1 (f i)
    }
  anc-lub (Assign x e)  F =
    let a  = sup     Œª j ‚Üí let (a , e) = strip-assign-r (F j .snd) in a
        sa = suprema Œª j ‚Üí let (a , e) = strip-assign-r (F j .snd) in a
      in
    record {
      fam‚â§lub = Œª i ‚Üí assign-‚â§‚Å±-intror (let (a , e) = strip-assign-r (F i .snd) in e) $
                      sa .fam‚â§lub i
    ; least = Œª where (a' , eq) f ‚Üí
                          let (a1 , eq1) = strip-assign-r eq in
                          assign-‚â§‚Å±-introl eq1 $
                          sa .least a1 Œª i ‚Üí assign-‚â§‚Å±-elim $
                                             subst (_‚â§‚Å± AnAssign x e a1) (let (_ , e) = strip-assign-r (F i .snd) in e) $
                                             subst (F i .fst ‚â§‚Å±_) eq1 (f i)
    }
  anc-lub (Seq c‚ÇÅ c‚ÇÇ)   F =
    let (a‚ÇÅ , _) = anc-sup c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        ih‚ÇÅ      = anc-lub c‚ÇÅ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        (a‚ÇÇ , _) = anc-sup c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        ih‚ÇÇ      = anc-lub c‚ÇÇ Œª i ‚Üí let (a‚ÇÅ , a‚ÇÇ , eq , e‚ÇÅ , e‚ÇÇ) = strip-seq-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
     in
    record {
      fam‚â§lub = Œª i ‚Üí seq-‚â§‚Å±-intror (let (_ , _ , eq' , _ , _) = strip-seq-r (F i .snd) in eq')
                         (ih‚ÇÅ .fam‚â§lub i) (ih‚ÇÇ .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                          let (a1 , a2 , eq0 , eq1 , eq2) = strip-seq-r eq in
                          seq-‚â§‚Å±-introl eq0
                            (ih‚ÇÅ .least (a1 , eq1) Œª i ‚Üí let le12 = seq-‚â§‚Å±-elim $
                                                                    subst (_‚â§‚Å± AnSeq a1 a2) (let (_ , _ , e , _ , _) = strip-seq-r (F i .snd) in e) $
                                                                    subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                         le12 .fst)
                            (ih‚ÇÇ .least (a2 , eq2) Œª i ‚Üí let le12 = seq-‚â§‚Å±-elim $
                                                                    subst (_‚â§‚Å± AnSeq a1 a2) (let (_ , _ , e , _ , _) = strip-seq-r (F i .snd) in e) $
                                                                    subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                         le12 .snd)
    }
  anc-lub (ITE b c‚ÇÅ c‚ÇÇ) F =
    let p‚ÇÅ  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ
        sp‚ÇÅ = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÅ
        (a‚ÇÅ , _) = anc-sup c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        ih‚ÇÅ      = anc-lub c‚ÇÅ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÅ , e‚ÇÅ
        p‚ÇÇ  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ
        sp‚ÇÇ = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in p‚ÇÇ
        (a‚ÇÇ , _) = anc-sup c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        ih‚ÇÇ      = anc-lub c‚ÇÇ Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in a‚ÇÇ , e‚ÇÇ
        q  = sup     Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q
        sq = suprema Œª i ‚Üí let (p‚ÇÅ , a‚ÇÅ , p‚ÇÇ , a‚ÇÇ , q , eq , e‚ÇÅ , e‚ÇÇ) = strip-ite-r (F i .snd) in q
      in
    record {
      fam‚â§lub = Œª i ‚Üí ite-‚â§‚Å±-intror (let (_ , _ , _ , _ , _ , eq' , _ , _) = strip-ite-r (F i .snd) in eq')
                        (sp‚ÇÅ .fam‚â§lub i) (ih‚ÇÅ .fam‚â§lub i) (sp‚ÇÇ .fam‚â§lub i) (ih‚ÇÇ .fam‚â§lub i) (sq .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                          let (p1 , a1 , p2 , a2 , q0 , eq0 , e1 , e2) = strip-ite-r eq in
                          ite-‚â§‚Å±-introl eq0
                            (sp‚ÇÅ .least p1 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-elim $
                                                               subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                 le12345 .fst)
                            (ih‚ÇÅ .least (a1 , e1) Œª i ‚Üí let le12345 = ite-‚â§‚Å±-elim $
                                                                      subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                                      subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                        le12345 .snd .fst)
                            (sp‚ÇÇ .least p2 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-elim $
                                                               subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                 le12345 .snd .snd .fst)
                            (ih‚ÇÇ .least (a2 , e2) Œª i ‚Üí let le12345 = ite-‚â§‚Å±-elim $
                                                                      subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                                      subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                        le12345 .snd .snd .snd .fst)
                            (sq .least q0 Œª i ‚Üí let le12345 = ite-‚â§‚Å±-elim $
                                                              subst (_‚â§‚Å± AnITE b p1 a1 p2 a2 q0) (let (_ , _ , _ , _ , _ , e' , _ , _) = strip-ite-r (F i .snd) in e') $
                                                              subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                le12345 .snd .snd .snd .snd)
    }
  anc-lub (While b c)   F =
    let inv  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv
        sinv = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in inv
        p  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p
        sp = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in p
        (a , _) = anc-sup c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
        ih      = anc-lub c Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in a , e
        q  = sup     Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q
        sq = suprema Œª i ‚Üí let (inv , p , a , q , eq , e) = strip-while-r (F i .snd) in q
      in
    record {
      fam‚â§lub = Œª i ‚Üí while-‚â§‚Å±-intror (let (_ , _ , _ , _ , eq' , _) = strip-while-r (F i .snd) in eq')
                        (sinv .fam‚â§lub i) (sp .fam‚â§lub i) (ih .fam‚â§lub i) (sq .fam‚â§lub i)
    ; least = Œª where (a' , eq) f ‚Üí
                        let (inv1 , p1 , a1 , q1 , eq0 , e1) = strip-while-r eq in
                        while-‚â§‚Å±-introl eq0
                          (sinv .least inv1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-elim $
                                                               subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                               subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                  le1234 .fst)
                          (sp .least p1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-elim $
                                                           subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                           subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                              le1234 .snd .fst)
                          (ih .least (a1 , e1) Œª i ‚Üí let le1234 = while-‚â§‚Å±-elim $
                                                                  subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                                  subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                                     le1234 .snd .snd .fst)
                          (sq .least q1 Œª i ‚Üí let le1234 = while-‚â§‚Å±-elim $
                                                           subst (_‚â§‚Å± AnWhile inv1 b p1 a1 q1) (let (_ , _ , _ , _ , e' , _) = strip-while-r (F i .snd) in e') $
                                                           subst (F i .fst ‚â§‚Å±_) eq0 (f i) in
                                              le1234 .snd .snd .snd)
    }

  anc-suplat : (c : Instr) ‚Üí is-sup-lattice (anc-poset c) 0‚Ñì
  anc-suplat c .is-sup-lattice.sup = anc-sup c
  anc-suplat c .is-sup-lattice.suprema = anc-lub c

  -- TODO use state monad
  un-Œ≤ : Maybe (B √ó List B) ‚Üí Ob √ó List B
  un-Œ≤ = rec·µê (P‚ä• , []) (first Œ≤)

  uncons-Œ≤ : List B ‚Üí Ob √ó List B
  uncons-Œ≤ = un-Œ≤ ‚àò uncons·µê

  anc-Œ≤-aux : (c : Instr) ‚Üí List B ‚Üí AnStr Ob c √ó List B
  anc-Œ≤-aux  Skip         zs =
    let (p , zs‚ÇÄ) = uncons-Œ≤ zs in
    (AnSkip p , refl) , zs‚ÇÄ
  anc-Œ≤-aux (Assign x e) zs =
    let (p , zs‚ÇÄ) = uncons-Œ≤ zs in
    (AnAssign x e p , refl) , zs‚ÇÄ
  anc-Œ≤-aux (Seq c‚ÇÅ c‚ÇÇ)   zs =
    let ((a‚ÇÅ , e‚ÇÅ) , zs‚ÇÄ) = anc-Œ≤-aux c‚ÇÅ zs
        ((a‚ÇÇ , e‚ÇÇ) , zs‚ÇÅ) = anc-Œ≤-aux c‚ÇÇ zs‚ÇÄ
     in
    (AnSeq a‚ÇÅ a‚ÇÇ , ap¬≤ Seq e‚ÇÅ e‚ÇÇ) , zs‚ÇÅ
  anc-Œ≤-aux (ITE b c‚ÇÅ c‚ÇÇ) zs =
    let (p‚ÇÄ        , zs‚ÇÄ) = uncons-Œ≤ zs
        ((a‚ÇÅ , e‚ÇÅ) , zs‚ÇÅ) = anc-Œ≤-aux c‚ÇÅ zs‚ÇÄ
        (p‚ÇÅ        , zs‚ÇÇ) = uncons-Œ≤ zs‚ÇÅ
        ((a‚ÇÇ , e‚ÇÇ) , zs‚ÇÉ) = anc-Œ≤-aux c‚ÇÇ zs‚ÇÇ
        (p‚ÇÇ        , zs‚ÇÑ) = uncons-Œ≤ zs‚ÇÉ
      in
    (AnITE b p‚ÇÄ a‚ÇÅ p‚ÇÅ a‚ÇÇ p‚ÇÇ , ap¬≤ (ITE b) e‚ÇÅ e‚ÇÇ) , zs‚ÇÑ
  anc-Œ≤-aux (While b c)   zs =
    let (p‚ÇÄ      , zs‚ÇÄ) = uncons-Œ≤ zs
        (p‚ÇÅ      , zs‚ÇÅ) = uncons-Œ≤ zs‚ÇÄ
        ((a , e) , zs‚ÇÇ) = anc-Œ≤-aux c zs‚ÇÅ
        (p‚ÇÇ      , zs‚ÇÉ) = uncons-Œ≤ zs‚ÇÇ
      in
    (AnWhile p‚ÇÄ b p‚ÇÅ a p‚ÇÇ , ap (While b) e) , zs‚ÇÉ

  anc-Œ≤ : (c : Instr) ‚Üí List B ‚Üí AnStr Ob c
  anc-Œ≤ c zs = anc-Œ≤-aux c zs .fst

  -- TODO move to AnCom
  ann-count : Instr ‚Üí ‚Ñï
  ann-count  Skip         = 1
  ann-count (Assign x e)  = 1
  ann-count (Seq c‚ÇÅ c‚ÇÇ)   = ann-count c‚ÇÅ + ann-count c‚ÇÇ
  ann-count (ITE b c‚ÇÅ c‚ÇÇ) = 3 + ann-count c‚ÇÅ + ann-count c‚ÇÇ
  ann-count (While b c)   = 3 + ann-count c
