module Nipkow.ACom.Leq where

open import Prelude
open import Data.String
open import Data.List
open import Data.List.Correspondences.Binary.All
open import Data.Reflects

open import List1
open import Nipkow.Lang
open import Nipkow.ACom

module AnInstrLeq
    (A : ùí∞ (‚Ñìsuc 0‚Ñì))
    (leq : A ‚Üí A ‚Üí ùí∞)
    (leq-prop : ‚àÄ {a b} ‚Üí is-prop (leq a b))
    (leq-refl : ‚àÄ {x} ‚Üí leq x x)
    (leq-trans : ‚àÄ {x y z} ‚Üí leq x y ‚Üí leq y z ‚Üí leq x z)
    (leq-antisym : ‚àÄ {x y} ‚Üí leq x y ‚Üí leq y x ‚Üí x Ôºù y)
  where

  open List1.List1

  data _‚â§‚Å±_ : AnInstr A ‚Üí AnInstr A ‚Üí ùí∞ (‚Ñìsuc 0‚Ñì) where
    Skip-‚â§‚Å± : ‚àÄ {a‚ÇÅ a‚ÇÇ}
            ‚Üí leq a‚ÇÅ a‚ÇÇ
            ‚Üí AnSkip a‚ÇÅ ‚â§‚Å± AnSkip a‚ÇÇ

    Assign-‚â§‚Å± : ‚àÄ {x‚ÇÅ e‚ÇÅ a‚ÇÅ x‚ÇÇ e‚ÇÇ a‚ÇÇ}
              ‚Üí x‚ÇÅ Ôºù x‚ÇÇ
              ‚Üí e‚ÇÅ Ôºù e‚ÇÇ
              ‚Üí leq a‚ÇÅ a‚ÇÇ
              ‚Üí AnAssign x‚ÇÅ e‚ÇÅ a‚ÇÅ ‚â§‚Å± AnAssign x‚ÇÇ e‚ÇÇ a‚ÇÇ

    Seq-‚â§‚Å± : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ}
           ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ
           ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
           ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ

    ITE-‚â§‚Å± : ‚àÄ {b‚ÇÅ p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ b‚ÇÇ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
           ‚Üí b‚ÇÅ Ôºù b‚ÇÇ
           ‚Üí leq p‚ÇÅ p‚ÇÉ
           ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ
           ‚Üí leq p‚ÇÇ p‚ÇÑ
           ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
           ‚Üí leq q‚ÇÅ q‚ÇÇ
           ‚Üí AnITE b‚ÇÅ p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± AnITE b‚ÇÇ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ

    While-‚â§‚Å± : ‚àÄ {inv‚ÇÅ b‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ inv‚ÇÇ b‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
             ‚Üí leq inv‚ÇÅ inv‚ÇÇ
             ‚Üí b‚ÇÅ Ôºù b‚ÇÇ
             ‚Üí leq p‚ÇÅ p‚ÇÇ
             ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
             ‚Üí leq q‚ÇÅ q‚ÇÇ
             ‚Üí AnWhile inv‚ÇÅ b‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± AnWhile inv‚ÇÇ b‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ

  -- structural helpers
  opaque
    skip-‚â§‚Å±-introl : ‚àÄ {s c s'}
                   ‚Üí c Ôºù AnSkip s' ‚Üí leq s s'
                   ‚Üí AnSkip s ‚â§‚Å± c
    skip-‚â§‚Å±-introl {s} eq le = subst (AnSkip s ‚â§‚Å±_) (eq ‚Åª¬π) (Skip-‚â§‚Å± le)

    skip-‚â§‚Å±-intror : ‚àÄ {s c s'}
                   ‚Üí c Ôºù AnSkip s ‚Üí leq s s'
                  ‚Üí c ‚â§‚Å± AnSkip s'
    skip-‚â§‚Å±-intror {s'} eq le = subst (_‚â§‚Å± AnSkip s') (eq ‚Åª¬π) (Skip-‚â§‚Å± le)

    skip-‚â§‚Å±-eliml : ‚àÄ {a‚ÇÅ c}
                  ‚Üí AnSkip a‚ÇÅ ‚â§‚Å± c
                  ‚Üí Œ£[ a‚ÇÇ Íûâ A ] (c Ôºù AnSkip a‚ÇÇ) √ó leq a‚ÇÅ a‚ÇÇ
    skip-‚â§‚Å±-eliml (Skip-‚â§‚Å± {a‚ÇÇ} le) = a‚ÇÇ , refl , le

    skip-‚â§‚Å±-elim : ‚àÄ {s s'}
                 ‚Üí AnSkip s ‚â§‚Å± AnSkip s'
                 ‚Üí leq s s'
    skip-‚â§‚Å±-elim (Skip-‚â§‚Å± le) = le

    assign-‚â§‚Å±-introl : ‚àÄ {x e s c s'}
                     ‚Üí c Ôºù AnAssign x e s' ‚Üí leq s s'
                     ‚Üí AnAssign x e s ‚â§‚Å± c
    assign-‚â§‚Å±-introl {x} {e} {s} eq le =
      subst (AnAssign x e s ‚â§‚Å±_) (eq ‚Åª¬π) (Assign-‚â§‚Å± refl refl le)

    assign-‚â§‚Å±-intror : ‚àÄ {x e s c s'}
                     ‚Üí c Ôºù AnAssign x e s ‚Üí leq s s'
                     ‚Üí c ‚â§‚Å± AnAssign x e s'
    assign-‚â§‚Å±-intror {x} {e} {s'} eq le =
      subst (_‚â§‚Å± AnAssign x e s') (eq ‚Åª¬π) (Assign-‚â§‚Å± refl refl le)

    assign-‚â§‚Å±-eliml : ‚àÄ {x e a‚ÇÅ c}
                    ‚Üí AnAssign x e a‚ÇÅ ‚â§‚Å± c
                    ‚Üí Œ£[ a‚ÇÇ Íûâ A ] (c Ôºù AnAssign x e a‚ÇÇ) √ó leq a‚ÇÅ a‚ÇÇ
    assign-‚â§‚Å±-eliml (Assign-‚â§‚Å± {a‚ÇÇ} e‚ÇÅ e‚ÇÇ le) = a‚ÇÇ , ap¬≤ (Œª x y ‚Üí AnAssign x y a‚ÇÇ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) , le

    assign-‚â§‚Å±-elim : ‚àÄ {x e s s'}
                   ‚Üí AnAssign x e s ‚â§‚Å± AnAssign x e s'
                   ‚Üí leq s s'
    assign-‚â§‚Å±-elim {s} p =
      let (s' , e , le) = assign-‚â§‚Å±-eliml p in
      subst (leq s) (AnAssign-inj e .snd .snd ‚Åª¬π) le

    seq-‚â§‚Å±-introl : ‚àÄ {c‚ÇÅ c‚ÇÇ c c‚ÇÉ c‚ÇÑ}
                  ‚Üí c Ôºù AnSeq c‚ÇÉ c‚ÇÑ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
                  ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
    seq-‚â§‚Å±-introl {c‚ÇÅ} {c‚ÇÇ} eq le‚ÇÅ le‚ÇÇ =
      subst (AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å±_) (eq ‚Åª¬π) (Seq-‚â§‚Å± le‚ÇÅ le‚ÇÇ)

    seq-‚â§‚Å±-intror : ‚àÄ {c‚ÇÅ c‚ÇÇ c c‚ÇÉ c‚ÇÑ}
                  ‚Üí c Ôºù AnSeq c‚ÇÅ c‚ÇÇ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ
                  ‚Üí c ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
    seq-‚â§‚Å±-intror {c‚ÇÉ} {c‚ÇÑ} eq le‚ÇÅ le‚ÇÇ =
      subst (_‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ) (eq ‚Åª¬π) (Seq-‚â§‚Å± le‚ÇÅ le‚ÇÇ)

    seq-‚â§‚Å±-eliml : ‚àÄ {c‚ÇÅ c‚ÇÇ c}
             ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± c
             ‚Üí Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ]
                 (c Ôºù AnSeq c‚ÇÉ c‚ÇÑ) √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-eliml (Seq-‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ} {c‚ÇÉ} {c‚ÇÑ} le‚ÇÅ le‚ÇÇ) = c‚ÇÉ , c‚ÇÑ , refl , le‚ÇÅ , le‚ÇÇ

    seq-‚â§‚Å±-elim : ‚àÄ {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ}
                ‚Üí AnSeq c‚ÇÅ c‚ÇÇ ‚â§‚Å± AnSeq c‚ÇÉ c‚ÇÑ
                ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ
    seq-‚â§‚Å±-elim {c‚ÇÅ} {c‚ÇÇ} le =
      let (c‚ÇÉ , c‚ÇÑ , e , le‚ÇÅ , le‚ÇÇ) = seq-‚â§‚Å±-eliml le
          (e‚ÇÅ , e‚ÇÇ) = AnSeq-inj e
        in
        subst (c‚ÇÅ ‚â§‚Å±_) (e‚ÇÅ ‚Åª¬π) le‚ÇÅ
      , subst (c‚ÇÇ ‚â§‚Å±_) (e‚ÇÇ ‚Åª¬π) le‚ÇÇ

    ite-‚â§‚Å±-introl : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                  ‚Üí c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
                  ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
                  ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
    ite-‚â§‚Å±-introl {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ =
      subst (AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π) (ITE-‚â§‚Å± refl le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ)

    ite-‚â§‚Å±-intror : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                  ‚Üí c Ôºù AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ
                  ‚Üí leq p‚ÇÅ p‚ÇÉ ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÉ ‚Üí leq p‚ÇÇ p‚ÇÑ ‚Üí c‚ÇÇ ‚â§‚Å± c‚ÇÑ ‚Üí leq q‚ÇÅ q‚ÇÇ
                  ‚Üí c ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
    ite-‚â§‚Å±-intror {b} {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ =
      subst (_‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ) (eq ‚Åª¬π) (ITE-‚â§‚Å± refl le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ)

    ite-‚â§‚Å±-eliml : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ c}
                 ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± c
                 ‚Üí Œ£[ p‚ÇÉ Íûâ A ] Œ£[ c‚ÇÉ Íûâ AnInstr A ] Œ£[ p‚ÇÑ Íûâ A ] Œ£[ c‚ÇÑ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                                  (c Ôºù AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ)
                                √ó leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-eliml (ITE-‚â§‚Å± {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} e le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ) =
      p‚ÇÉ , c‚ÇÉ , p‚ÇÑ , c‚ÇÑ , q‚ÇÇ , ap (Œª x ‚Üí AnITE x p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ) (e ‚Åª¬π) , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ

    ite-‚â§‚Å±-elim : ‚àÄ {b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ}
                ‚Üí AnITE b p‚ÇÅ c‚ÇÅ p‚ÇÇ c‚ÇÇ q‚ÇÅ ‚â§‚Å± AnITE b p‚ÇÉ c‚ÇÉ p‚ÇÑ c‚ÇÑ q‚ÇÇ
                ‚Üí leq p‚ÇÅ p‚ÇÉ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÉ √ó leq p‚ÇÇ p‚ÇÑ √ó c‚ÇÇ ‚â§‚Å± c‚ÇÑ √ó leq q‚ÇÅ q‚ÇÇ
    ite-‚â§‚Å±-elim {b} {p‚ÇÅ} {c‚ÇÅ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÅ} {p‚ÇÉ} {c‚ÇÉ} {p‚ÇÑ} {c‚ÇÑ} {q‚ÇÇ} le =
      let (r‚ÇÅ , a‚ÇÅ , r‚ÇÇ , a‚ÇÇ , w‚ÇÅ , eq , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ , le‚ÇÖ) = ite-‚â§‚Å±-eliml le
          (_ , eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ , eq‚ÇÖ) = AnITE-inj eq
        in
        subst (leq p‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le‚ÇÅ
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÇ ‚Åª¬π) le‚ÇÇ
      , subst (leq p‚ÇÇ) (eq‚ÇÉ ‚Åª¬π) le‚ÇÉ
      , subst (c‚ÇÇ ‚â§‚Å±_) (eq‚ÇÑ ‚Åª¬π) le‚ÇÑ
      , subst (leq q‚ÇÅ) (eq‚ÇÖ ‚Åª¬π) le‚ÇÖ

    while-‚â§‚Å±-introl : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                    ‚Üí c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
                    ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
                    ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
                    ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
    while-‚â§‚Å±-introl {inv‚ÇÅ} {b} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {c} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ =
      subst (AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å±_) (eq ‚Åª¬π) (While-‚â§‚Å± le‚ÇÅ refl le‚ÇÇ le‚ÇÉ le‚ÇÑ)

    while-‚â§‚Å±-intror : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                    ‚Üí c Ôºù AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ
                    ‚Üí leq inv‚ÇÅ inv‚ÇÇ ‚Üí leq p‚ÇÅ p‚ÇÇ
                    ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq q‚ÇÅ q‚ÇÇ
                    ‚Üí c ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
    while-‚â§‚Å±-intror {b} {c} {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} eq le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ =
      subst (_‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ) (eq ‚Åª¬π) (While-‚â§‚Å± le‚ÇÅ refl le‚ÇÇ le‚ÇÉ le‚ÇÑ)

    while-‚â§‚Å±-eliml : ‚àÄ {inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ c}
                   ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± c
                   ‚Üí Œ£[ inv‚ÇÇ Íûâ A ] Œ£[ p‚ÇÇ Íûâ A ] Œ£[ c‚ÇÇ Íûâ AnInstr A ] Œ£[ q‚ÇÇ Íûâ A ]
                         (c Ôºù AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ)
                       √ó leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-eliml (While-‚â§‚Å± {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} le‚ÇÅ e le‚ÇÇ le‚ÇÉ le‚ÇÑ) =
      inv‚ÇÇ , p‚ÇÇ , c‚ÇÇ , q‚ÇÇ , ap (Œª x ‚Üí AnWhile inv‚ÇÇ x p‚ÇÇ c‚ÇÇ q‚ÇÇ) (e ‚Åª¬π) , le‚ÇÅ , le‚ÇÇ , le‚ÇÉ , le‚ÇÑ

    while-‚â§‚Å±-elim : ‚àÄ {b inv‚ÇÅ p‚ÇÅ c‚ÇÅ q‚ÇÅ inv‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}
                  ‚Üí AnWhile inv‚ÇÅ b p‚ÇÅ c‚ÇÅ q‚ÇÅ ‚â§‚Å± AnWhile inv‚ÇÇ b p‚ÇÇ c‚ÇÇ q‚ÇÇ
                  ‚Üí leq inv‚ÇÅ inv‚ÇÇ √ó leq p‚ÇÅ p‚ÇÇ √ó c‚ÇÅ ‚â§‚Å± c‚ÇÇ √ó leq q‚ÇÅ q‚ÇÇ
    while-‚â§‚Å±-elim {b} {inv‚ÇÅ} {p‚ÇÅ} {c‚ÇÅ} {q‚ÇÅ} {inv‚ÇÇ} {p‚ÇÇ} {c‚ÇÇ} {q‚ÇÇ} le =
      let (inv‚ÇÄ , p , a , q , eq , le1 , le2 , le3 , le4) = while-‚â§‚Å±-eliml le
          (eq‚ÇÅ , _ , eq‚ÇÇ , eq‚ÇÉ , eq‚ÇÑ) = AnWhile-inj eq
        in
        subst (leq inv‚ÇÅ) (eq‚ÇÅ ‚Åª¬π) le1
      , subst (leq p‚ÇÅ) (eq‚ÇÇ ‚Åª¬π) le2
      , subst (c‚ÇÅ ‚â§‚Å±_) (eq‚ÇÉ ‚Åª¬π) le3
      , subst (leq q‚ÇÅ) (eq‚ÇÑ ‚Åª¬π) le4

  -- thinness

  ‚â§‚Å±-prop : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí is-prop (c‚ÇÅ ‚â§‚Å± c‚ÇÇ)
  ‚â§‚Å±-prop (Skip-‚â§‚Å± le‚ÇÅ)                        (Skip-‚â§‚Å± le‚ÇÇ)                        =
    ap Skip-‚â§‚Å± (leq-prop le‚ÇÅ le‚ÇÇ)
  ‚â§‚Å±-prop (Assign-‚â§‚Å± {x‚ÇÅ} {x‚ÇÇ} p‚ÇÅ‚ÇÅ p‚ÇÇ‚ÇÅ le‚ÇÅ)    (Assign-‚â§‚Å± p‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÇ le‚ÇÇ)              =
      ap¬≤ (Œª x y ‚Üí Assign-‚â§‚Å± x y le‚ÇÅ) (is-discrete‚Üíis-set auto x‚ÇÅ x‚ÇÇ p‚ÇÅ‚ÇÅ p‚ÇÅ‚ÇÇ) (hlevel 1 p‚ÇÇ‚ÇÅ p‚ÇÇ‚ÇÇ)
    ‚àô ap (Assign-‚â§‚Å± p‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÇ) (leq-prop le‚ÇÅ le‚ÇÇ)
  ‚â§‚Å±-prop (Seq-‚â§‚Å± le‚ÇÅ‚ÇÅ le‚ÇÇ‚ÇÅ)                   (Seq-‚â§‚Å± le‚ÇÅ‚ÇÇ le‚ÇÇ‚ÇÇ)                   =
    ap¬≤ Seq-‚â§‚Å± (‚â§‚Å±-prop le‚ÇÅ‚ÇÅ le‚ÇÅ‚ÇÇ) (‚â§‚Å±-prop le‚ÇÇ‚ÇÅ le‚ÇÇ‚ÇÇ)
  ‚â§‚Å±-prop (ITE-‚â§‚Å± e‚ÇÅ le‚ÇÅ‚ÇÅ le‚ÇÇ‚ÇÅ le‚ÇÉ‚ÇÅ le‚ÇÑ‚ÇÅ le‚ÇÖ‚ÇÅ) (ITE-‚â§‚Å± e‚ÇÇ le‚ÇÅ‚ÇÇ le‚ÇÇ‚ÇÇ le‚ÇÉ‚ÇÇ le‚ÇÑ‚ÇÇ le‚ÇÖ‚ÇÇ) =
      ap¬≤ (Œª x y ‚Üí ITE-‚â§‚Å± x y le‚ÇÇ‚ÇÅ le‚ÇÉ‚ÇÅ le‚ÇÑ‚ÇÅ le‚ÇÖ‚ÇÅ) (hlevel 1 e‚ÇÅ e‚ÇÇ) (leq-prop le‚ÇÅ‚ÇÅ le‚ÇÅ‚ÇÇ)
    ‚àô ap¬≤ (Œª x y ‚Üí ITE-‚â§‚Å± e‚ÇÇ le‚ÇÅ‚ÇÇ x y le‚ÇÑ‚ÇÅ le‚ÇÖ‚ÇÅ) (‚â§‚Å±-prop le‚ÇÇ‚ÇÅ le‚ÇÇ‚ÇÇ) (leq-prop le‚ÇÉ‚ÇÅ le‚ÇÉ‚ÇÇ)
    ‚àô ap¬≤ (ITE-‚â§‚Å± e‚ÇÇ le‚ÇÅ‚ÇÇ le‚ÇÇ‚ÇÇ le‚ÇÉ‚ÇÇ) (‚â§‚Å±-prop le‚ÇÑ‚ÇÅ le‚ÇÑ‚ÇÇ) (leq-prop le‚ÇÖ‚ÇÅ le‚ÇÖ‚ÇÇ)
  ‚â§‚Å±-prop (While-‚â§‚Å± le‚ÇÅ‚ÇÅ e‚ÇÅ le‚ÇÇ‚ÇÅ le‚ÇÉ‚ÇÅ le‚ÇÑ‚ÇÅ)    (While-‚â§‚Å± le‚ÇÅ‚ÇÇ e‚ÇÇ le‚ÇÇ‚ÇÇ le‚ÇÉ‚ÇÇ le‚ÇÑ‚ÇÇ)   =
      ap¬≤ (Œª x y ‚Üí While-‚â§‚Å± x y le‚ÇÇ‚ÇÅ le‚ÇÉ‚ÇÅ le‚ÇÑ‚ÇÅ) (leq-prop le‚ÇÅ‚ÇÅ le‚ÇÅ‚ÇÇ) (hlevel 1 e‚ÇÅ e‚ÇÇ)
    ‚àô ap¬≤ (Œª x y ‚Üí While-‚â§‚Å± le‚ÇÅ‚ÇÇ e‚ÇÇ x y le‚ÇÑ‚ÇÅ) (leq-prop le‚ÇÇ‚ÇÅ le‚ÇÇ‚ÇÇ) (‚â§‚Å±-prop le‚ÇÉ‚ÇÅ le‚ÇÉ‚ÇÇ)
    ‚àô ap (While-‚â§‚Å± le‚ÇÅ‚ÇÇ e‚ÇÇ le‚ÇÇ‚ÇÇ le‚ÇÉ‚ÇÇ) (leq-prop le‚ÇÑ‚ÇÅ le‚ÇÑ‚ÇÇ)

  instance
    H-Level-‚â§‚Å± : ‚àÄ {n c‚ÇÅ c‚ÇÇ} ‚Üí ‚¶É n ‚â• ∞ 1 ‚¶Ñ ‚Üí H-Level n (c‚ÇÅ ‚â§‚Å± c‚ÇÇ)
    H-Level-‚â§‚Å± ‚¶É s‚â§ ∞s _ ‚¶Ñ = hlevel-basic-instance 1 ‚â§‚Å±-prop
    {-# OVERLAPPING H-Level-‚â§‚Å± #-}

  -- equivalence to strip + all2

  ‚â§‚Å±‚Üí=all : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí (strip c‚ÇÅ Ôºù strip c‚ÇÇ) √ó All¬≤‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)
  ‚â§‚Å±‚Üí=all (Skip-‚â§‚Å± le)                   =
    refl , [] , le
  ‚â§‚Å±‚Üí=all (Assign-‚â§‚Å± e‚ÇÅ e‚ÇÇ le)           =
    ap¬≤ Assign e‚ÇÅ e‚ÇÇ , [] , le
  ‚â§‚Å±‚Üí=all (Seq-‚â§‚Å± le‚ÇÅ le‚ÇÇ)               =
    let (e‚ÇÅ , a‚ÇÅ) = ‚â§‚Å±‚Üí=all le‚ÇÅ
        (e‚ÇÇ , a‚ÇÇ) = ‚â§‚Å±‚Üí=all le‚ÇÇ
       in
    ap¬≤ Seq e‚ÇÅ e‚ÇÇ , All¬≤‚ÇÅ-++‚ÇÅ a‚ÇÅ a‚ÇÇ
  ‚â§‚Å±‚Üí=all (ITE-‚â§‚Å± {b‚ÇÅ} {c‚ÇÅ} {c‚ÇÇ} {b‚ÇÇ} {c‚ÇÉ} {c‚ÇÑ} e le‚ÇÅ le‚ÇÇ le‚ÇÉ le‚ÇÑ le‚ÇÖ) =
    let (e‚ÇÅ , a‚ÇÅ) = ‚â§‚Å±‚Üí=all le‚ÇÇ
        (e‚ÇÇ , a‚ÇÇ) = ‚â§‚Å±‚Üí=all le‚ÇÑ
       in
      ap¬≤ (Œª x y ‚Üí ITE x y (strip c‚ÇÇ)) e e‚ÇÅ ‚àô ap (ITE b‚ÇÇ (strip c‚ÇÉ)) e‚ÇÇ
    , All¬≤‚ÇÅ-‚à∂+‚ÇÅ-r (All¬≤‚ÇÅ-++‚ÇÅ (All¬≤-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ a‚ÇÅ) (All¬≤-‚à∂‚à∂‚ÇÅ-r le‚ÇÉ a‚ÇÇ)) le‚ÇÖ
  ‚â§‚Å±‚Üí=all (While-‚â§‚Å± le‚ÇÅ e le‚ÇÇ le‚ÇÉ le‚ÇÑ)   =
    let (e‚ÇÅ , a‚ÇÅ) = ‚â§‚Å±‚Üí=all le‚ÇÉ in
      ap¬≤ While e e‚ÇÅ
    , All¬≤‚ÇÅ-‚à∂+‚ÇÅ-r (All¬≤-‚à∂‚à∂‚ÇÅ-r le‚ÇÅ (All¬≤-‚à∂‚à∂‚ÇÅ-r le‚ÇÇ a‚ÇÅ)) le‚ÇÑ

  =all‚Üí‚â§‚Å± : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí strip c‚ÇÅ Ôºù strip c‚ÇÇ ‚Üí All¬≤‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ) ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ
  =all‚Üí‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ = AnSkip a‚ÇÇ}                   e a =
    let (a‚ÇÅ , e‚ÇÅ) = strip-skip-r e
        (_ , le) = subst (Œª x ‚Üí All¬≤‚ÇÅ leq (annos x) [ a‚ÇÇ ]‚ÇÅ) e‚ÇÅ a
      in
    skip-‚â§‚Å±-intror e‚ÇÅ le
  =all‚Üí‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ = AnAssign x‚ÇÇ e‚ÇÇ a‚ÇÇ}           e a =
    let (a‚ÇÅ , e‚ÇÅ) = strip-assign-r e
        (_ , le) = subst (Œª x ‚Üí All¬≤‚ÇÅ leq (annos x) [ a‚ÇÇ ]‚ÇÅ) e‚ÇÅ a
      in
    assign-‚â§‚Å±-intror e‚ÇÅ le
  =all‚Üí‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ = AnSeq c‚ÇÅ‚ÇÇ c‚ÇÇ‚ÇÇ}               e a =
    let (a‚ÇÅ , a‚ÇÇ , e‚ÇÅ , e‚ÇÇ , e‚ÇÉ) = strip-seq-r e
        (le‚ÇÅ , le‚ÇÇ) = All¬≤‚ÇÅ-split
                        (length-annos-same {c‚ÇÅ = a‚ÇÅ}
                           (reflects-true (reflects-instr (strip a‚ÇÅ) (strip c‚ÇÅ‚ÇÇ)) e‚ÇÇ))
                        (subst (Œª x ‚Üí All¬≤‚ÇÅ leq (annos x) (annos c‚ÇÅ‚ÇÇ ++‚ÇÅ annos c‚ÇÇ‚ÇÇ)) e‚ÇÅ a)
      in
    seq-‚â§‚Å±-intror e‚ÇÅ (=all‚Üí‚â§‚Å± e‚ÇÇ le‚ÇÅ) (=all‚Üí‚â§‚Å± e‚ÇÉ le‚ÇÇ)
  =all‚Üí‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ = AnITE b‚ÇÇ p‚ÇÅ‚ÇÇ c‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÇ c‚ÇÇ‚ÇÇ q‚ÇÇ} e a =
    let (p‚ÇÉ , a‚ÇÅ , p‚ÇÑ , a‚ÇÇ , q , e‚ÇÄ , e‚ÇÅ , e‚ÇÇ) = strip-ite-r e
        lp‚ÇÅ = length-annos-same {c‚ÇÅ = a‚ÇÅ} $ reflects-true (reflects-instr (strip a‚ÇÅ) (strip c‚ÇÅ‚ÇÇ)) e‚ÇÅ
        le = All¬≤‚ÇÅ-‚à∂+‚ÇÅ-l (  length‚ÇÅ-++ {xs = p‚ÇÉ ‚à∑‚ÇÅ annos a‚ÇÅ} {ys = p‚ÇÑ ‚à∑‚ÇÅ annos a‚ÇÇ}
                         ‚àô ap¬≤ (Œª x y ‚Üí suc x + suc y) lp‚ÇÅ
                               (length-annos-same {c‚ÇÅ = a‚ÇÇ}
                                  (reflects-true (reflects-instr (strip a‚ÇÇ) (strip c‚ÇÇ‚ÇÇ)) e‚ÇÇ))
                         ‚àô length‚ÇÅ-++ {xs = p‚ÇÅ‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÅ‚ÇÇ} {ys = p‚ÇÇ‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ‚ÇÇ} ‚Åª¬π) $
             subst (Œª x ‚Üí All¬≤‚ÇÅ leq (annos x) (((p‚ÇÅ‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÅ‚ÇÇ) ++‚ÇÅ (p‚ÇÇ‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÇ)) e‚ÇÄ a
        (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All¬≤‚ÇÅ-split (ap suc lp‚ÇÅ) (le .fst)
        (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All¬≤-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÅ
        (le‚ÇÉ‚ÇÅ , le‚ÇÉ‚ÇÇ) = All¬≤-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
      in
    ite-‚â§‚Å±-intror e‚ÇÄ le‚ÇÇ‚ÇÅ (=all‚Üí‚â§‚Å± e‚ÇÅ le‚ÇÇ‚ÇÇ) le‚ÇÉ‚ÇÅ (=all‚Üí‚â§‚Å± e‚ÇÇ le‚ÇÉ‚ÇÇ) (le .snd)
  =all‚Üí‚â§‚Å± {c‚ÇÅ} {c‚ÇÇ = AnWhile inv‚ÇÇ b‚ÇÇ p‚ÇÇ c‚ÇÇ q‚ÇÇ}    e a =
    let (inv‚ÇÅ , p‚ÇÅ , a‚ÇÅ , q‚ÇÅ , e‚ÇÄ , e‚ÇÅ) = strip-while-r e
        le = All¬≤‚ÇÅ-‚à∂+‚ÇÅ-l (ap (2 +_)
                            (length-annos-same {c‚ÇÅ = a‚ÇÅ}
                              (reflects-true (reflects-instr (strip a‚ÇÅ) (strip c‚ÇÇ)) e‚ÇÅ))) $
             subst (Œª x ‚Üí All¬≤‚ÇÅ leq (annos x) (((inv‚ÇÇ ‚à∑‚ÇÅ (p‚ÇÇ ‚à∑‚ÇÅ annos c‚ÇÇ)) ‚à∂+‚ÇÅ q‚ÇÇ))) e‚ÇÄ a
        (le‚ÇÅ‚ÇÅ , le‚ÇÅ‚ÇÇ) = All¬≤-‚à∂‚à∂‚ÇÅ-l (le .fst)
        (le‚ÇÇ‚ÇÅ , le‚ÇÇ‚ÇÇ) = All¬≤-‚à∂‚à∂‚ÇÅ-l le‚ÇÅ‚ÇÇ
      in
    while-‚â§‚Å±-intror e‚ÇÄ le‚ÇÅ‚ÇÅ le‚ÇÇ‚ÇÅ (=all‚Üí‚â§‚Å± e‚ÇÅ le‚ÇÇ‚ÇÇ) (le .snd)

  ‚â§‚Å±‚âÉ=all : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚âÉ (strip c‚ÇÅ Ôºù strip c‚ÇÇ) √ó All¬≤‚ÇÅ leq (annos c‚ÇÅ) (annos c‚ÇÇ)
  ‚â§‚Å±‚âÉ=all = prop-ext‚Çë ‚â§‚Å±-prop (√ó-is-of-hlevel 1 (hlevel 1)
                                             (All¬≤‚ÇÅ-is-of-hlevel 0 (Œª _ _ ‚Üí leq-prop)))
                     ‚â§‚Å±‚Üí=all Œª p ‚Üí =all‚Üí‚â§‚Å± (p .fst) (p .snd)

  -- postcondition monotonicity

  mono-post : ‚àÄ {c‚ÇÅ c‚ÇÇ} ‚Üí c‚ÇÅ ‚â§‚Å± c‚ÇÇ ‚Üí leq (post c‚ÇÅ) (post c‚ÇÇ)
  mono-post = snd ‚àò snd ‚àò ‚â§‚Å±‚Üí=all

  -- partial order properties

  ‚â§‚Å±-refl : ‚àÄ {x} ‚Üí x ‚â§‚Å± x
  ‚â§‚Å±-refl = =all‚Üí‚â§‚Å± refl (all¬≤‚ÇÅ-refl Œª _ ‚Üí leq-refl)

  ‚â§‚Å±-trans : ‚àÄ {x y z} ‚Üí x ‚â§‚Å± y ‚Üí y ‚â§‚Å± z ‚Üí x ‚â§‚Å± z
  ‚â§‚Å±-trans lxy lyz =
    let (exy , axy) = ‚â§‚Å±‚Üí=all lxy
        (eyz , ayz) = ‚â§‚Å±‚Üí=all lyz
      in
    =all‚Üí‚â§‚Å± (exy ‚àô eyz) (all¬≤‚ÇÅ-trans (Œª _ _ _ ‚Üí leq-trans) axy ayz)

  ‚â§‚Å±-antisym : ‚àÄ {x y} ‚Üí x ‚â§‚Å± y ‚Üí y ‚â§‚Å± x ‚Üí x Ôºù y
  ‚â§‚Å±-antisym lxy lyx =
    let (exy , axy) = ‚â§‚Å±‚Üí=all lxy
        (eyx , ayx) = ‚â§‚Å±‚Üí=all lyx
      in
    strip-annos-same (reflects-true (reflects-instr (strip _) (strip _)) exy)
                     (all¬≤‚ÇÅ-antisym (Œª _ _ ‚Üí leq-antisym) axy ayx)
