module Bertot.AxSem where

open import Prelude
open import Data.Empty
open import Data.Bool
open import Data.Reflects
open import Data.Nat
open import Data.Nat.Order.Base
open import Data.String
open import Data.List
open import Data.List.Correspondences.Unary.All
open import Data.Dec renaming (elim to elim·µà)

open import Bertot.Lang
open import Bertot.OpSem

af : (String ‚Üí ‚Ñï) ‚Üí AExpr ‚Üí ‚Ñï
af g (ANum n)      = n
af g (AVar x)      = g x
af g (APlus e‚ÇÅ e‚ÇÇ) = af g e‚ÇÅ + af g e‚ÇÇ

bf : (String ‚Üí ‚Ñï) ‚Üí BExpr ‚Üí Bool
bf g (BLt e‚ÇÅ e‚ÇÇ) = af g e‚ÇÅ <·µá af g e‚ÇÇ

PEnv : ùí∞ (‚Ñìsuc 0‚Ñì)
PEnv = List (String √ó (List ‚Ñï ‚Üí ùí∞))

fp : PEnv ‚Üí String ‚Üí List ‚Ñï ‚Üí ùí∞
fp []            s args = ‚ä§
fp ((a , m) ‚à∑ p) s args = if ‚åä a ‚âü s ‚åã then m args else fp p s args

fp-prop : {p : PEnv} {s : String} {args : List ‚Ñï}
        ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
        ‚Üí is-prop (fp p s args)
fp-prop {p = []}                          pp  = hlevel 1
fp-prop {p = (a , m) ‚à∑ p} {s} {args} (h ‚à∑ pp) =
  elim·µà {C = Œª q ‚Üí is-prop (if ‚åä q ‚åã then m args else fp p s args)}
        (Œª eq ‚Üí h args)
        (Œª ctra ‚Üí fp-prop pp)
        (a ‚âü s)

{- Weakest pre-condition calculus -}

{- computation of the property associated to an assertion -}
ia : PEnv ‚Üí (String ‚Üí ‚Ñï) ‚Üí Assert ‚Üí ùí∞
ia p g (QPred s l)   = fp p s (map (af g) l)
ia p g (QB b)        = is-true (bf g b)
ia p g (QConj a‚ÇÅ a‚ÇÇ) = ia p g a‚ÇÅ √ó ia p g a‚ÇÇ
ia p g (QNot a)      = ¬¨ (ia p g a)
ia p g  QTrue        = ‚ä§
ia p g  QFalse       = ‚ä•

ia-prop : {p : PEnv} {g : String ‚Üí ‚Ñï} (a : Assert)
        ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
        ‚Üí is-prop (ia p g a)
ia-prop {g} (QPred s l)   p-prop = fp-prop p-prop
ia-prop     (QB b)        _      = hlevel 1
ia-prop     (QConj a‚ÇÅ a‚ÇÇ) p-prop = √ó-is-of-hlevel 1 (ia-prop a‚ÇÅ p-prop) (ia-prop a‚ÇÇ p-prop)
ia-prop     (QNot a)      _      = hlevel 1
ia-prop      QTrue        _      = hlevel 1
ia-prop      QFalse       _      = hlevel 1

{- computation of the pre-condition for an annotated instruction and a post-condition -}

asubst : String ‚Üí AExpr ‚Üí AExpr ‚Üí AExpr
asubst _ _ e@(ANum _)      = e
asubst x s e@(AVar y)      = if ‚åä x ‚âü y ‚åã then s else e
asubst x s   (APlus e‚ÇÅ e‚ÇÇ) = APlus (asubst x s e‚ÇÅ) (asubst x s e‚ÇÇ)

bsubst : String ‚Üí AExpr ‚Üí BExpr ‚Üí BExpr
bsubst x s (BLt e‚ÇÅ e‚ÇÇ) = BLt (asubst x s e‚ÇÅ) (asubst x s e‚ÇÇ)

qsubst : String ‚Üí AExpr ‚Üí Assert ‚Üí Assert
qsubst x s (QPred p l)   = QPred p (map (asubst x s) l)
qsubst x s (QB b)        = QB (bsubst x s b)
qsubst x s (QConj a‚ÇÅ a‚ÇÇ) = QConj (qsubst x s a‚ÇÅ) (qsubst x s a‚ÇÇ)
qsubst x s (QNot a)      = QNot (qsubst x s a)
qsubst _ _  QTrue        = QTrue
qsubst _ _  QFalse       = QFalse

pc : AnInstr ‚Üí Assert ‚Üí Assert
pc (AnPre a _)     _    = a
pc  AnSkip         post = post
pc (AnAssign x e)  post = qsubst x e post
pc (AnSeq i‚ÇÅ i‚ÇÇ)   post = pc i‚ÇÅ (pc i‚ÇÇ post)
pc (AnWhile _ a _) _    = a

{- A verification condition generator -}

record Cond : ùí∞ where
  constructor imp
  field
    c‚ÇÅ : Assert
    c‚ÇÇ : Assert

open Cond

vc : AnInstr ‚Üí Assert ‚Üí List Cond
vc (AnPre a i)     post = imp a (pc i post) ‚à∑ vc i post
vc  AnSkip         _    = []
vc (AnAssign _ _)  _    = []
vc (AnSeq i‚ÇÅ i‚ÇÇ)   post = vc i‚ÇÅ (pc i‚ÇÇ post) ++ vc i‚ÇÇ post
vc (AnWhile b a i) post = imp (QConj a (QB b)) (pc i a) ‚à∑ imp (QConj a (QNot (QB b))) post ‚à∑ vc i a

ic : PEnv ‚Üí (String ‚Üí ‚Ñï) ‚Üí Cond ‚Üí ùí∞
ic p g (imp c‚ÇÅ c‚ÇÇ) = ia p g c‚ÇÅ ‚Üí ia p g c‚ÇÇ

ic-prop : {p : PEnv} {g : String ‚Üí ‚Ñï} {c : Cond}
        ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
        ‚Üí is-prop (ic p g c)
ic-prop {c} pp = fun-is-of-hlevel 1 (ia-prop (c .c‚ÇÇ) pp)

valid : PEnv ‚Üí Cond ‚Üí ùí∞
valid p c = ‚àÄ {g} ‚Üí ic p g c

valid-prop : {p : PEnv} {c : Cond}
           ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
           ‚Üí is-prop (valid p c)
valid-prop {c} pp = ‚àÄ-is-of-hlevel 1 Œª g ‚Üí ic-prop {c = c} pp

{- Axiomatic semantics -}

data AxSem (preds : PEnv) : Assert ‚Üí Instr ‚Üí Assert ‚Üí ùí∞ where
  AxSkip   : ‚àÄ {p} ‚Üí AxSem preds p Skip p
  AxAssign : ‚àÄ {p} {x} {e} ‚Üí AxSem preds (qsubst x e p) (Assign x e) p
  AxSeq    : ‚àÄ {p q r i1 i2}
           ‚Üí AxSem preds p i1 q ‚Üí AxSem preds q i2 r ‚Üí AxSem preds p (Seq i1 i2) r
  AxWhile  : ‚àÄ {p b i}
           ‚Üí AxSem preds (QConj p (QB b)) i p
           ‚Üí AxSem preds p (While b i) (QConj p (QNot (QB b)))
  AxConseq : ‚àÄ {p p' q' q i}
           ‚Üí valid preds (imp p p')
           ‚Üí AxSem preds p' i q'
           ‚Üí valid preds (imp q' q)
           ‚Üí AxSem preds p i q

data NAx (preds : PEnv) : Assert ‚Üí Instr ‚Üí Assert ‚Üí ùí∞ where
  NAxSkip   : ‚àÄ {p q} ‚Üí valid preds (imp p q) ‚Üí NAx preds p Skip q
  NAxAssign : ‚àÄ {p p' q x e}
            ‚Üí valid preds (imp p (qsubst x e p'))
            ‚Üí valid preds (imp p' q)
            ‚Üí NAx preds p (Assign x e) q
  NAxSeq    : ‚àÄ {p p' q' r' r i1 i2}
            ‚Üí valid preds (imp p p')
            ‚Üí valid preds (imp r' r)
            ‚Üí NAx preds p' i1 q'
            ‚Üí NAx preds q' i2 r'
            ‚Üí NAx preds p (Seq i1 i2) r
  NAxWhile  : ‚àÄ {p p' q b i}
            ‚Üí valid preds (imp p p')
            ‚Üí valid preds (imp (QConj p' (QNot (QB b))) q)
            ‚Üí NAx preds (QConj p' (QB b)) i p'
            ‚Üí NAx preds p (While b i) q

ax-sem‚Üínax : ‚àÄ {m p i q}
           ‚Üí AxSem m p i q ‚Üí NAx m p i q
ax-sem‚Üínax      AxSkip             = NAxSkip id
ax-sem‚Üínax {q}  AxAssign           = NAxAssign {p' = q} id id
ax-sem‚Üínax     (AxSeq as1 as2)     = NAxSeq id id (ax-sem‚Üínax as1) (ax-sem‚Üínax as2)
ax-sem‚Üínax     (AxWhile as)        = NAxWhile id id (ax-sem‚Üínax as)
ax-sem‚Üínax     (AxConseq h1 as h2) with ax-sem‚Üínax as
... | NAxSkip v            = NAxSkip Œª h ‚Üí h2 (v (h1 h))
... | NAxAssign {p'} v1 v2 = NAxAssign {p' = p'} (Œª h ‚Üí v1 (h1 h)) Œª h ‚Üí h2 (v2 h)
... | NAxSeq v1 v2 n1 n2   = NAxSeq (Œª h ‚Üí v1 (h1 h)) (Œª h ‚Üí h2 (v2 h)) n1 n2
... | NAxWhile v1 v2 n     = NAxWhile (Œª h ‚Üí v1 (h1 h)) (Œª h ‚Üí h2 (v2 h)) n

nax‚Üíax-sem : ‚àÄ {m p i q}
           ‚Üí NAx m p i q ‚Üí AxSem m p i q
nax‚Üíax-sem {q} (NAxSkip v)                    = AxConseq {p' = q} v AxSkip id
nax‚Üíax-sem     (NAxAssign {p'} {x} {e} v1 v2) = AxConseq {p' = qsubst x e p'} {q' = p'} v1 AxAssign v2
nax‚Üíax-sem     (NAxSeq v1 v2 na1 na2)         = AxConseq v1 (AxSeq (nax‚Üíax-sem na1) (nax‚Üíax-sem na2)) v2
nax‚Üíax-sem     (NAxWhile v1 v2 na)            = AxConseq v1 (AxWhile (nax‚Üíax-sem na)) v2

{- Correctness proofs: axiomatic semantics is correct. -}

af-correct : ‚àÄ {r1 e v g} ‚Üí AEval r1 e v ‚Üí af (e‚Üíf r1 g) e Ôºù v
af-correct          AEN                       = refl
af-correct {v} {g} (AEVar1 {r} {x})           =
  discrete-eq {x = x} {C = Œª q ‚Üí (if ‚åä q ‚åã then v else e‚Üíf r g x) Ôºù v} refl refl
af-correct {v} {g} (AEVar2 {r} {x} {y} {v = v'} ne a) =
  discrete-ne {C = Œª q ‚Üí (if ‚åä q ‚åã then v' else e‚Üíf r g x) Ôºù v} (ne ‚àò _‚Åª¬π) (af-correct a)
af-correct         (AEPlus a‚ÇÅ a‚ÇÇ)             =
  ap¬≤ _+_ (af-correct a‚ÇÅ) (af-correct a‚ÇÇ)

update-af : ‚àÄ {x v r1 r2 g}
          ‚Üí SUpdate r1 x v r2 ‚Üí af (e‚Üíf r2 g) (AVar x) Ôºù v
update-af {x} {v} {g} (SUp1 {r})                         =
  discrete-eq {x = x} {C = Œª q ‚Üí (if ‚åä q ‚åã then v else e‚Üíf r g x) Ôºù v} refl refl
update-af {x} {v} {g} (SUp2 {r} {r'} {y} {v = v'} su ne) =
  discrete-ne {C = Œª q ‚Üí (if ‚åä q ‚åã then v' else e‚Üíf r' g x) Ôºù v} (ne ‚àò _‚Åª¬π) (update-af su)

update-af-diff : ‚àÄ {x v r1 r2 g s}
               ‚Üí SUpdate r1 x v r2 ‚Üí x ‚â† s
               ‚Üí af (e‚Üíf r2 g) (AVar s) Ôºù af (e‚Üíf r1 g) (AVar s)
update-af-diff {x} {v} {g} {s} (SUp1 {r} {v = v'})                 ne =
  discrete-ne {C = Œª q ‚Üí (if ‚åä q ‚åã then v else e‚Üíf r g s) Ôºù (if ‚åä q ‚åã then v' else e‚Üíf r g s)} ne refl
update-af-diff {x} {v} {g} {s} (SUp2 {r} {r'} {y} {v = v'} su ney) ne =
  elim·µà {C = Œª q ‚Üí (if ‚åä q ‚åã then v' else e‚Üíf r' g s) Ôºù (if ‚åä q ‚åã then v' else e‚Üíf r g s)}
   (Œª _ ‚Üí refl)
   (Œª _ ‚Üí update-af-diff su ne)
   (y ‚âü s)

update-af-var-subst : ‚àÄ {r1 x v r2 e g s}
                    ‚Üí SUpdate r1 x v r2 ‚Üí AEval r1 e v
                    ‚Üí af (e‚Üíf r2 g) (AVar s) Ôºù af (e‚Üíf r1 g) (asubst x e (AVar s))
update-af-var-subst {r1} {x} {v} {r2} {e} {g} {s} h he =
  elim·µà {C = Œª q ‚Üí e‚Üíf r2 g s Ôºù af (e‚Üíf r1 g) (if ‚åä q ‚åã then e else AVar s)}
        (Œª e ‚Üí update-af (subst (Œª q ‚Üí SUpdate r1 q v r2) e h) ‚àô af-correct he ‚Åª¬π)
        (Œª ¬¨e ‚Üí update-af-diff h ¬¨e)
        (x ‚âü s)

update-af-subst : ‚àÄ {r1 x v r2 e' g} e
                ‚Üí SUpdate r1 x v r2 ‚Üí AEval r1 e' v
                ‚Üí af (e‚Üíf r2 g) e Ôºù af (e‚Üíf r1 g) (asubst x e' e)
update-af-subst (ANum n)      su ae = refl
update-af-subst (AVar x)      su ae = update-af-var-subst su ae
update-af-subst (APlus e‚ÇÅ e‚ÇÇ) su ae = ap¬≤ _+_ (update-af-subst e‚ÇÅ su ae) (update-af-subst e‚ÇÇ su ae)

update-fp-subst-l : ‚àÄ {r1 x v r2 e' g s} {l : List AExpr} m
                  ‚Üí SUpdate r1 x v r2 ‚Üí AEval r1 e' v
                  ‚Üí fp m s (map (af (e‚Üíf r1 g) ‚àò asubst x e') l)
                  ‚Üí fp m s (map (af (e‚Üíf r2 g)) l)
update-fp-subst-l                                []             su ae tt = tt
update-fp-subst-l {r1} {x} {r2} {e'} {g} {s} {l} ((a , p1) ‚à∑ m) su ae    =
  elim·µà {C = Œª q ‚Üí if ‚åä q ‚åã then p1 (map (af (e‚Üíf r1 g) ‚àò asubst x e') l)
                            else fp m s (map (af (e‚Üíf r1 g) ‚àò asubst x e') l) ‚Üí
                   if ‚åä q ‚åã then p1 (map (af (e‚Üíf r2 g)) l)
                            else fp m s (map (af (e‚Üíf r2 g)) l)}
        (Œª e h ‚Üí subst (Œª q ‚Üí p1 (map q l)) (fun-ext Œª z ‚Üí update-af-subst z su ae ‚Åª¬π) h)
        (Œª ¬¨e ‚Üí update-fp-subst-l m su ae)
        (a ‚âü s)

update-fp-subst-r : ‚àÄ {r1 x v r2 e' g s} {l : List AExpr} m
                  ‚Üí SUpdate r1 x v r2 ‚Üí AEval r1 e' v
                  ‚Üí fp m s (map (af (e‚Üíf r2 g)) l)
                  ‚Üí fp m s (map (af (e‚Üíf r1 g) ‚àò asubst x e') l)
update-fp-subst-r                                []             su ae tt = tt
update-fp-subst-r {r1} {x} {r2} {e'} {g} {s} {l} ((a , p1) ‚à∑ m) su ae    =
    elim·µà {C = Œª q ‚Üí if ‚åä q ‚åã then p1 (map (af (e‚Üíf r2 g)) l)
                            else fp m s (map (af (e‚Üíf r2 g)) l) ‚Üí
                     if ‚åä q ‚åã then p1 (map (af (e‚Üíf r1 g) ‚àò asubst x e') l)
                            else fp m s (map (af (e‚Üíf r1 g) ‚àò asubst x e') l)}
        (Œª e h ‚Üí subst (Œª q ‚Üí p1 (map q l)) (fun-ext Œª z ‚Üí update-af-subst z su ae) h)
        (Œª ¬¨e ‚Üí update-fp-subst-r m su ae)
        (a ‚âü s)

mutual
  subst-correct-l : ‚àÄ {r1 e v m g r2 x} a
                  ‚Üí AEval r1 e v
                  ‚Üí SUpdate r1 x v r2
                  ‚Üí ia m (e‚Üíf r1 g) (qsubst x e a)
                  ‚Üí ia m (e‚Üíf r2 g) a
  subst-correct-l          {m}              (QPred x e)      ae su h         =
    update-fp-subst-l m su ae $
    subst (fp m x) (map-list-comp e ‚Åª¬π) h
  subst-correct-l {r1} {e}     {g} {r2} {x} (QB (BLt a‚ÇÅ a‚ÇÇ)) ae su h         =
    subst (Œª q ‚Üí is-true (q <·µá af (e‚Üíf r2 g) a‚ÇÇ)) (update-af-subst a‚ÇÅ su ae ‚Åª¬π) $
    subst (Œª q ‚Üí is-true (af (e‚Üíf r1 g) (asubst x e a‚ÇÅ) <·µá q)) (update-af-subst a‚ÇÇ su ae ‚Åª¬π) h
  subst-correct-l                           (QConj q‚ÇÅ q‚ÇÇ)    ae su (h1 , h2) =
    subst-correct-l q‚ÇÅ ae su h1 , subst-correct-l q‚ÇÇ ae su h2
  subst-correct-l                           (QNot q)         ae su h         =
    h ‚àò subst-correct-r q ae su
  subst-correct-l                            QTrue           ae su tt        = tt

  subst-correct-r : ‚àÄ {r1 e v m g r2 x} a
                  ‚Üí AEval r1 e v
                  ‚Üí SUpdate r1 x v r2
                  ‚Üí ia m (e‚Üíf r2 g) a
                  ‚Üí ia m (e‚Üíf r1 g) (qsubst x e a)
  subst-correct-r          {m}              (QPred x e)      ae su h         =
    subst (fp m x) (map-list-comp e) $
    update-fp-subst-r m su ae h
  subst-correct-r {r1} {e}     {g} {r2} {x} (QB (BLt a‚ÇÅ a‚ÇÇ)) ae su h         =
    subst (Œª q ‚Üí is-true (q <·µá af (e‚Üíf r1 g) (asubst x e a‚ÇÇ))) (update-af-subst a‚ÇÅ su ae) $
    subst (Œª q ‚Üí is-true (af (e‚Üíf r2 g) a‚ÇÅ <·µá q)) (update-af-subst a‚ÇÇ su ae) h
  subst-correct-r                           (QConj q‚ÇÅ q‚ÇÇ)    ae su (h1 , h2) =
    subst-correct-r q‚ÇÅ ae su h1 , subst-correct-r q‚ÇÇ ae su h2
  subst-correct-r                           (QNot q)         ae su h         =
    h ‚àò subst-correct-l q ae su
  subst-correct-r                            QTrue           ae su tt        = tt

beval-true-interpret : ‚àÄ {r b g}
                     ‚Üí BEval r b true
                     ‚Üí is-true (bf (e‚Üíf r g) b)
beval-true-interpret {r} {b} {g} (BELtT {e2} {v1} {v2} a1 a2 lt) =
  subst (Œª q ‚Üí is-true (q <·µá af (e‚Üíf r g) e2)) (af-correct a1 ‚Åª¬π) $
  subst (Œª q ‚Üí is-true (v1 <·µá q)) (af-correct a2 ‚Åª¬π) $
  reflects-true (<-reflects v1 v2) lt

beval-false-interpret : ‚àÄ {r b g}
                     ‚Üí BEval r b false
                     ‚Üí is-true (not (bf (e‚Üíf r g) b))
beval-false-interpret {r} {b} {g} (BELtF {e2} {v1} {v2} a1 a2 le) =
  subst (Œª q ‚Üí is-true (not (q <·µá af (e‚Üíf r g) e2))) (af-correct a1 ‚Åª¬π) $
  subst (Œª q ‚Üí is-true (not (v1 <·µá q))) (af-correct a2 ‚Åª¬π) $
  reflects-false (<-reflects v1 v2) (‚â§‚âÉ‚âØ $ le)

nax-sound : ‚àÄ {m r i r' g} ‚Üí Exec r i r'
          ‚Üí ‚àÄ {p q} ‚Üí NAx m p i q
          ‚Üí ia m (e‚Üíf r g) p ‚Üí ia m (e‚Üíf r' g) q
nax-sound  ExSkip               (NAxSkip v)                  h = v h
nax-sound (ExAssign ae su)      (NAxAssign {p'} v‚ÇÅ v‚ÇÇ)       h =
  v‚ÇÇ (subst-correct-l p' ae su (v‚ÇÅ h))
nax-sound (ExSeq ex‚ÇÅ ex‚ÇÇ)       (NAxSeq v‚ÇÅ v‚ÇÇ na‚ÇÅ na‚ÇÇ)       h =
  v‚ÇÇ (nax-sound ex‚ÇÇ na‚ÇÇ (nax-sound ex‚ÇÅ na‚ÇÅ (v‚ÇÅ h)))
nax-sound (ExWhileT bt ex‚ÇÅ ex‚ÇÇ) (NAxWhile {p'} {b} v‚ÇÅ v‚ÇÇ na) h =
  v‚ÇÇ (nax-sound ex‚ÇÇ {p = p'} {q = QConj p' (QNot (QB b))} (NAxWhile id id na) $
      nax-sound ex‚ÇÅ na (v‚ÇÅ h , beval-true-interpret bt))
nax-sound (ExWhileF bf)         (NAxWhile v‚ÇÅ v‚ÇÇ na)          h =
  v‚ÇÇ (v‚ÇÅ h , true-reflects reflects-not (beval-false-interpret bf))

ax-sem-sound : ‚àÄ {m r i r' g p q}
             ‚Üí Exec r i r' ‚Üí AxSem m p i q
             ‚Üí ia m (e‚Üíf r g) p ‚Üí ia m (e‚Üíf r' g) q
ax-sem-sound ex as = nax-sound ex (ax-sem‚Üínax as)

{- Correctness proof: the vcg -}

all-ic : PEnv ‚Üí (String ‚Üí ‚Ñï) ‚Üí List Cond ‚Üí ùí∞
all-ic p g l = All (ic p g) l

all-ic-prop : {p : PEnv} {g : String ‚Üí ‚Ñï} {l : List Cond}
        ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
        ‚Üí is-prop (all-ic p g l)
all-ic-prop {l} pp = All-is-of-hlevel 0 Œª c ‚Üí ic-prop {c = c} pp

all-valid : PEnv ‚Üí List Cond ‚Üí ùí∞
all-valid p l = ‚àÄ {g} ‚Üí all-ic p g l

all-valid-cons : {p : PEnv} {c : Cond} {l : List Cond}
               ‚Üí valid p c ‚Üí all-valid p l
               ‚Üí all-valid p (c ‚à∑ l)
all-valid-cons v av {g} = v ‚à∑ av

all-valid-uncons : {p : PEnv} {c : Cond} {l : List Cond}
                 ‚Üí all-valid p (c ‚à∑ l) ‚Üí valid p c √ó all-valid p l
all-valid-uncons av = (Œª {g} ‚Üí all-uncons (av {g = g}) .fst) , Œª {g} ‚Üí all-uncons (av {g = g}) .snd

all-valid-++ : {p : PEnv} {l1 l2 : List Cond}
             ‚Üí all-valid p l1 ‚Üí all-valid p l2
             ‚Üí all-valid p (l1 ++ l2)
all-valid-++ av1 av2 {g} = all-++ (av1 {g = g}) (av2 {g = g})

all-valid-split : {p : PEnv} {l1 l2 : List Cond}
                 ‚Üí all-valid p (l1 ++ l2) ‚Üí all-valid p l1 √ó all-valid p l2
all-valid-split av = (Œª {g} ‚Üí all-++-left (av {g = g})) , Œª {g} ‚Üí all-++-right (av {g = g})

all-valid-prop : {p : PEnv} {l : List Cond}
               ‚Üí (All (Œª sf ‚Üí (l : List ‚Ñï) ‚Üí is-prop (sf .snd l)) p)
               ‚Üí is-prop (all-valid p l)
all-valid-prop pp = ‚àÄ-is-of-hlevel 1 Œª g ‚Üí all-ic-prop pp

vcg-ax : ‚àÄ {m a} i ‚Üí all-valid m (vc i a) ‚Üí AxSem m (pc i a) (cleanup i) a
vcg-ax {a} (AnPre q i)     av =
  let (v1 , av1) = all-valid-uncons av in
  AxConseq {p' = pc i a} {q' = a} v1 (vcg-ax i av1) id
vcg-ax      AnSkip         av = AxSkip
vcg-ax     (AnAssign s a)  av = AxAssign
vcg-ax {a} (AnSeq i‚ÇÅ i‚ÇÇ)   av =
  let (av1 , av2) = all-valid-split av in
  AxSeq {q = pc i‚ÇÇ a} (vcg-ax i‚ÇÅ av1) (vcg-ax i‚ÇÇ av2)
vcg-ax     (AnWhile b q i) av =
  let (v1 , av1) = all-valid-uncons av
      (v2 , av2) = all-valid-uncons av1
    in
  AxConseq {p' = q} {q' = QConj q (QNot (QB b))} id
    (AxWhile (AxConseq {p' = pc i q} {q' = q} v1 (vcg-ax i av2) id))
    v2

vcg-sound : ‚àÄ {ps i a g r1 r2}
          ‚Üí all-valid ps (vc i a)
          ‚Üí Exec r1 (cleanup i) r2
          ‚Üí ia ps (e‚Üíf r1 g) (pc i a) ‚Üí ia ps (e‚Üíf r2 g) a
vcg-sound {i} av ex = ax-sem-sound ex (vcg-ax i av)

{- A monotonicity property -}

subst-sound-a : {g : String ‚Üí ‚Ñï} {e‚ÇÄ : AExpr} {x : String}
              ‚Üí (e : AExpr)
              ‚Üí af g (asubst x e‚ÇÄ e) Ôºù af (Œª y ‚Üí if ‚åä x ‚âü y ‚åã then af g e‚ÇÄ else g y) e
subst-sound-a              (ANum n)      = refl
subst-sound-a {g} {e‚ÇÄ} {x} (AVar y)      =
  elim·µà {C = Œª q ‚Üí af g (if ‚åä q ‚åã then e‚ÇÄ else AVar y) Ôºù (if ‚åä q ‚åã then af g e‚ÇÄ else g y)}
        (Œª _ ‚Üí refl)
        (Œª _ ‚Üí refl)
        (x ‚âü y)
subst-sound-a              (APlus e‚ÇÅ e‚ÇÇ) =
  ap¬≤ _+_ (subst-sound-a e‚ÇÅ) (subst-sound-a e‚ÇÇ)

subst-sound-b : {g : String ‚Üí ‚Ñï} {e : AExpr} {x : String}
              ‚Üí (b : BExpr)
              ‚Üí bf g (bsubst x e b) Ôºù bf (Œª y ‚Üí if ‚åä x ‚âü y ‚åã then af g e else g y) b
subst-sound-b (BLt e‚ÇÅ e‚ÇÇ) = ap¬≤ _<·µá_ (subst-sound-a e‚ÇÅ) (subst-sound-a e‚ÇÇ)

subst-sound-l : {g : String ‚Üí ‚Ñï} {e : AExpr} {x : String}
              ‚Üí (l : List AExpr)
              ‚Üí map (af g) (map (asubst x e) l) Ôºù map (af (Œª y ‚Üí if ‚åä x ‚âü y ‚åã then af g e else g y)) l
subst-sound-l []      = refl
subst-sound-l (h ‚à∑ t) = ap¬≤ List._‚à∑_ (subst-sound-a h) (subst-sound-l t)

subst-sound : {pe : PEnv} {g : String ‚Üí ‚Ñï} {e : AExpr} {x : String}
            ‚Üí (a : Assert)
            ‚Üí ia pe g (qsubst x e a) Ôºù ia pe (Œª y ‚Üí if ‚åä x ‚âü y ‚åã then af g e else g y) a
subst-sound {pe} (QPred s l)  = ap (fp pe s) (subst-sound-l l)
subst-sound     (QB b)        = ap is-true (subst-sound-b b)
subst-sound     (QConj a‚ÇÅ a‚ÇÇ) = ap¬≤ _√ó_ (subst-sound a‚ÇÅ) (subst-sound a‚ÇÇ)
subst-sound     (QNot a)      = ap ¬¨_ (subst-sound a)
subst-sound      QTrue        = refl
subst-sound      QFalse       = refl

vc-monotonic : ‚àÄ {pe p1 p2} ‚Üí (i : AnInstr)
             ‚Üí all-valid pe (vc i p1) ‚Üí (‚àÄ g ‚Üí ia pe g p1 ‚Üí ia pe g p2)
             ‚Üí all-valid pe (vc i p2) √ó (‚àÄ g ‚Üí ia pe g (pc i p1) ‚Üí ia pe g (pc i p2))
vc-monotonic            AnSkip        av       p12 = [] , p12
vc-monotonic           (AnPre a i)    av       p12 =
  let (h1 , h2) = all-valid-uncons av
      (ih1 , ih2) = vc-monotonic i h2 p12
    in
  (all-valid-cons (Œª {g} ‚Üí ih2 g ‚àò h1 {g = g}) ih1) , Œª g ‚Üí id
vc-monotonic {p1} {p2} (AnAssign x e) av              p12 =
  [] , Œª g z ‚Üí transport (subst-sound p2 ‚Åª¬π) (p12 (Œª y ‚Üí if ‚åä x ‚âü y ‚åã then af g e else g y) (transport (subst-sound p1) z))
vc-monotonic {p1} {p2} (AnSeq i‚ÇÅ i‚ÇÇ)  av               p12 =
  let (h1 , h2) = all-valid-split {l1 = vc i‚ÇÅ (pc i‚ÇÇ p1)} {l2 = vc i‚ÇÇ p1} av
      (ih21 , ih22) = vc-monotonic i‚ÇÇ h2 p12
      (ih11 , ih12) = vc-monotonic {p1 = pc i‚ÇÇ p1} {p2 = pc i‚ÇÇ p2} i‚ÇÅ h1 ih22
    in
  all-valid-++ ih11 ih21 , ih12
vc-monotonic           (AnWhile b a i) av {-(v12 , vn , vc)-} p12 =
  let (h1 , av1) = all-valid-uncons av
      (h2 , h3) = all-valid-uncons av1
    in
  all-valid-cons h1 (all-valid-cons (Œª {g} ‚Üí p12 g ‚àò h2 {g = g}) h3) , (Œª g ‚Üí id)
