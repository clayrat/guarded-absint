module SPA.AboveBelow where

open import Prelude
open import Data.Empty hiding (_‚â†_)
open import Data.Unit
open import Data.Bool
open import Data.Reflects
open import Data.Dec as Dec
open import Data.Nat
open import Data.Nat.Order.Base renaming (_‚â§_ to _‚â§‚Åø_ ; _<_ to _<‚Åø_)
open import Data.Maybe
open import Data.Sum
open import Data.Acc

open import Order.Base
open import Order.Diagram.Bottom
open import Order.Diagram.Top
open import Order.Diagram.Join
open import Order.Diagram.Meet
open import Order.Semilattice.Join
open import Order.Semilattice.Meet
open import Order.Lattice

private variable
  ‚Ñì : Level
  A : ùí∞ ‚Ñì

data AboveBelow (A : ùí∞ ‚Ñì) : ùí∞ ‚Ñì where
  bt : AboveBelow A
  tp : AboveBelow A
  wr : A ‚Üí AboveBelow A

unwr : AboveBelow A ‚Üí Maybe A
unwr  bt    = nothing
unwr  tp    = nothing
unwr (wr x) = just x

is-bt : AboveBelow A ‚Üí ùí∞
is-bt  bt    = ‚ä§
is-bt  tp    = ‚ä•
is-bt (wr _) = ‚ä•

is-tp : AboveBelow A ‚Üí ùí∞
is-tp  bt    = ‚ä•
is-tp  tp    = ‚ä§
is-tp (wr _) = ‚ä•

bt‚â†tp : the (AboveBelow A) bt ‚â† tp
bt‚â†tp e = subst is-bt e tt

bt‚â†wr : {a : A} ‚Üí bt ‚â† wr a
bt‚â†wr e = subst is-bt e tt

tp‚â†wr : {a : A} ‚Üí tp ‚â† wr a
tp‚â†wr e = subst is-tp e tt

wr-inj : {x y : A} ‚Üí wr x Ôºù wr y ‚Üí x Ôºù y
wr-inj = just-inj ‚àò ap unwr

instance
  Discrete-AboveBelow : ‚¶É da : is-discrete A ‚¶Ñ ‚Üí is-discrete (AboveBelow A)
  Discrete-AboveBelow        {x = bt}   {y = bt}   = yes refl
  Discrete-AboveBelow        {x = bt}   {y = tp}   = no bt‚â†tp
  Discrete-AboveBelow        {x = bt}   {y = wr x} = no bt‚â†wr
  Discrete-AboveBelow        {x = tp}   {y = bt}   = no (bt‚â†tp ‚àò _‚Åª¬π)
  Discrete-AboveBelow        {x = tp}   {y = tp}   = yes refl
  Discrete-AboveBelow        {x = tp}   {y = wr x} = no tp‚â†wr
  Discrete-AboveBelow        {x = wr x} {y = bt}   = no (bt‚â†wr ‚àò _‚Åª¬π)
  Discrete-AboveBelow        {x = wr x} {y = tp}   = no (tp‚â†wr ‚àò _‚Åª¬π)
  Discrete-AboveBelow ‚¶É da ‚¶Ñ {x = wr x} {y = wr y} = Dec.dmap (ap wr) (contra wr-inj) (da {x = x} {y = y})

-- preorder

data _AB‚â§_ {A : ùí∞ ‚Ñì} : AboveBelow A ‚Üí AboveBelow A ‚Üí ùí∞ ‚Ñì where
  bt‚â§   : {y : AboveBelow A} ‚Üí bt AB‚â§ y
  wr‚â§wr : {x y : A} ‚Üí x Ôºù y ‚Üí wr x AB‚â§ wr y
  wr‚â§tp : {x : A} ‚Üí wr x AB‚â§ tp
  tp‚â§tp : tp AB‚â§ tp

‚â§tp : {x : AboveBelow A} ‚Üí x AB‚â§ tp
‚â§tp {x = bt}   = bt‚â§
‚â§tp {x = tp}   = tp‚â§tp
‚â§tp {x = wr x} = wr‚â§tp

AB‚â§-prop : {sa : is-set A} ‚Üí {x y : AboveBelow A} ‚Üí is-prop (x AB‚â§ y)
AB‚â§-prop       bt‚â§        bt‚â§       = refl
AB‚â§-prop {sa} (wr‚â§wr e‚ÇÅ) (wr‚â§wr e‚ÇÇ) = ap wr‚â§wr (sa _ _ e‚ÇÅ e‚ÇÇ)
AB‚â§-prop       wr‚â§tp      wr‚â§tp     = refl
AB‚â§-prop       tp‚â§tp      tp‚â§tp     = refl

-- TODO generalize?
instance opaque
  H-Level-AB‚â§ : ‚¶É as : H-Level 2 A ‚¶Ñ ‚Üí {x y : AboveBelow A} ‚Üí H-Level 1 (x AB‚â§ y)
  H-Level-AB‚â§ = hlevel-prop-instance (AB‚â§-prop {sa = hlevel 2})
  {-# OVERLAPPING H-Level-AB‚â§ #-}

AB‚â§-refl : {x : AboveBelow A} ‚Üí x AB‚â§ x
AB‚â§-refl {x = bt}   = bt‚â§
AB‚â§-refl {x = tp}   = tp‚â§tp
AB‚â§-refl {x = wr a} = wr‚â§wr refl

AB‚â§-trans : {x y z : AboveBelow A} ‚Üí x AB‚â§ y ‚Üí y AB‚â§ z ‚Üí x AB‚â§ z
AB‚â§-trans {x = .bt}                            bt‚â§         yz         = bt‚â§
AB‚â§-trans {x = .wr x} {y = .wr y} {z = .wr z} (wr‚â§wr exy) (wr‚â§wr ezy) = wr‚â§wr (exy ‚àô ezy)
AB‚â§-trans {x = .wr x} {y = .wr y} {z = .tp}   (wr‚â§wr exy)  wr‚â§tp      = wr‚â§tp
AB‚â§-trans {x = .wr x} {y = .tp}   {z = .tp}    wr‚â§tp       tp‚â§tp      = wr‚â§tp
AB‚â§-trans {x = .tp}   {y = .tp}   {z = .tp}    tp‚â§tp       tp‚â§tp      = tp‚â§tp

AB‚â§-antisym : {x y : AboveBelow A} ‚Üí x AB‚â§ y ‚Üí y AB‚â§ x ‚Üí x Ôºù y
AB‚â§-antisym  bt‚â§         bt‚â§      = refl
AB‚â§-antisym (wr‚â§wr exy) (wr‚â§wr _) = ap wr exy
AB‚â§-antisym  tp‚â§tp       tp‚â§tp    = refl

AB‚â§-dec : ‚¶É da : is-discrete A ‚¶Ñ
        ‚Üí {x y : AboveBelow A} ‚Üí Dec (x AB‚â§ y)
AB‚â§-dec {x = bt}              = yes bt‚â§
AB‚â§-dec {x = tp}   {y = bt}   = no Œª ()
AB‚â§-dec {x = tp}   {y = tp}   = yes tp‚â§tp
AB‚â§-dec {x = tp}   {y = wr x} = no Œª ()
AB‚â§-dec {x = wr x} {y = bt}   = no Œª ()
AB‚â§-dec {x = wr x} {y = tp}   = yes wr‚â§tp
AB‚â§-dec {x = wr x} {y = wr y} with x ‚âü y
... | yes e = yes (wr‚â§wr e)
... | no ne = no Œª where
                    (wr‚â§wr e) ‚Üí ne e

-- join

_‚äîab_ : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí AboveBelow A ‚Üí AboveBelow A ‚Üí AboveBelow A
bt   ‚äîab y    = y
tp   ‚äîab _    = tp
wr x ‚äîab bt   = wr x
wr _ ‚äîab tp   = tp
wr x ‚äîab wr y = if x =? y then wr x else tp

l‚â§‚äîab : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí {x y : AboveBelow A}
      ‚Üí x AB‚â§ (x ‚äîab y)
l‚â§‚äîab {x = bt}              = bt‚â§
l‚â§‚äîab {x = tp}              = tp‚â§tp
l‚â§‚äîab {x = wr x} {y = bt}   = wr‚â§wr refl
l‚â§‚äîab {x = wr x} {y = tp}   = wr‚â§tp
l‚â§‚äîab {x = wr x} {y = wr y} with x ‚âü y
... | yes e = wr‚â§wr refl
... | no ne = wr‚â§tp

r‚â§‚äîab : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí {x y : AboveBelow A}
      ‚Üí y AB‚â§ (x ‚äîab y)
r‚â§‚äîab {x = bt}             = AB‚â§-refl
r‚â§‚äîab {x = tp}            = ‚â§tp
r‚â§‚äîab {x = wr x} {y = bt} = bt‚â§
r‚â§‚äîab {x = wr x} {y = tp} = tp‚â§tp
r‚â§‚äîab {x = wr x} {y = wr y} with x ‚âü y
... | yes e = wr‚â§wr (e ‚Åª¬π)
... | no ne = wr‚â§tp

‚äîab‚â§ : ‚¶É da : is-discrete A ‚¶Ñ
     ‚Üí {x y : AboveBelow A}
     ‚Üí (z : AboveBelow A) ‚Üí x AB‚â§ z ‚Üí y AB‚â§ z ‚Üí (x ‚äîab y) AB‚â§ z
‚äîab‚â§                          z       bt‚â§                 yz                 = yz
‚äîab‚â§ {x = .wr x}             .(wr z) (wr‚â§wr {y = z} exz)  bt‚â§                = wr‚â§wr exz
‚äîab‚â§ {x = .wr x} {y = .wr y} .(wr z) (wr‚â§wr {y = z} exz) (wr‚â§wr {x = y} eyz) with x ‚âü y
... | yes _ = wr‚â§wr exz
... | no ne = absurd (ne (exz ‚àô eyz ‚Åª¬π))
‚äîab‚â§                          z       wr‚â§tp               yz                 = ‚â§tp
‚äîab‚â§                          z       tp‚â§tp               yz                 = tp‚â§tp

-- meet

_‚äìab_ : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí AboveBelow A ‚Üí AboveBelow A ‚Üí AboveBelow A
bt   ‚äìab _    = bt
tp   ‚äìab y    = y
wr _ ‚äìab bt   = bt
wr x ‚äìab tp   = wr x
wr x ‚äìab wr y = if x =? y then wr x else bt

‚äìab‚â§l : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí {x y : AboveBelow A}
      ‚Üí (x ‚äìab y) AB‚â§ x
‚äìab‚â§l {x = bt}              = bt‚â§
‚äìab‚â§l {x = tp}              = ‚â§tp
‚äìab‚â§l {x = wr x} {y = bt}   = bt‚â§
‚äìab‚â§l {x = wr x} {y = tp}   = wr‚â§wr refl
‚äìab‚â§l {x = wr x} {y = wr y} with x ‚âü y
... | yes e = wr‚â§wr refl
... | no ne = bt‚â§

‚äìab‚â§r : ‚¶É da : is-discrete A ‚¶Ñ
      ‚Üí {x y : AboveBelow A}
      ‚Üí (x ‚äìab y) AB‚â§ y
‚äìab‚â§r {x = bt}              = bt‚â§
‚äìab‚â§r {x = tp}              = AB‚â§-refl
‚äìab‚â§r {x = wr x} {y = bt}   = bt‚â§
‚äìab‚â§r {x = wr x} {y = tp}   = wr‚â§tp
‚äìab‚â§r {x = wr x} {y = wr y} with x ‚âü y
... | yes e = wr‚â§wr e
... | no ne = bt‚â§

‚â§‚äìab : ‚¶É da : is-discrete A ‚¶Ñ
     ‚Üí {x y : AboveBelow A}
     ‚Üí (z : AboveBelow A)
     ‚Üí z AB‚â§ x ‚Üí z AB‚â§ y ‚Üí z AB‚â§ (x ‚äìab y)
‚â§‚äìab                          .bt     bt‚â§               zy        = bt‚â§
‚â§‚äìab {x = .wr x} {y = .wr y} .(wr z) (wr‚â§wr {x = z} e) (wr‚â§wr ez) with x ‚âü y
... | yes _ = wr‚â§wr e
... | no ne = absurd (ne (e ‚Åª¬π ‚àô ez))
‚â§‚äìab {x = .wr x}             .(wr z) (wr‚â§wr {x = z} e)  wr‚â§tp     = wr‚â§wr e
‚â§‚äìab {x = .tp}                 z      wr‚â§tp             zy        = zy
‚â§‚äìab                           z      tp‚â§tp             tp‚â§tp     = tp‚â§tp

-- well-foundedness

-- TODO reflexive reduction?
_AB<_ : {A : ùí∞ ‚Ñì} ‚Üí AboveBelow A ‚Üí AboveBelow A ‚Üí ùí∞ ‚Ñì
x AB< y = (x AB‚â§ y) √ó (x ‚â† y)

AB-wf : is-wf (_AB<_ {A = A})
AB-wf bt = acc Œª where
                   bt sy ‚Üí absurd (sy .snd refl)
AB-wf tp = acc Œª where
                   bt sy ‚Üí acc Œª where
                                   bt sz ‚Üí absurd (sz .snd refl)
                   tp sy ‚Üí absurd (sy .snd refl)
                   (wr y) sy ‚Üí acc Œª where
                                       bt sz ‚Üí acc Œª where
                                                        bt sw ‚Üí absurd (sw .snd refl)
                                       (wr z) (wr‚â§wr e , ne) ‚Üí absurd (ne (ap wr e))
AB-wf (wr x) = acc Œª where
                       bt sy ‚Üí acc Œª where
                                   bt sz ‚Üí absurd (sz .snd refl)
                       (wr y) (wr‚â§wr e , ne) ‚Üí absurd (ne (ap wr e))

AB-noeth : is-noeth (_AB<_ {A = A})
AB-noeth bt = acc Œª where
                      bt sy ‚Üí absurd (sy .snd refl)
                      tp sy ‚Üí acc Œª where
                                      tp sz ‚Üí absurd (sz .snd refl)
                      (wr y) sy ‚Üí acc Œª where
                                          tp sz ‚Üí acc Œª where
                                                          tp sw ‚Üí absurd (sw .snd refl)
                                          (wr z) (wr‚â§wr e , ne) ‚Üí absurd (ne (ap wr e))
AB-noeth tp = acc Œª where
                      tp sy ‚Üí absurd (sy .snd refl)
AB-noeth (wr x) = acc Œª where
                          tp sy ‚Üí acc Œª where
                                          tp sz ‚Üí absurd (sz .snd refl)
                          (wr y) (wr‚â§wr e , ne) ‚Üí absurd (ne (ap wr e))

AB-finheight : is-of-finite-height (_AB<_ {A = A})
AB-finheight x = AB-wf x , AB-noeth x

-- instances

AboveBelow‚Çö : (A : ùí∞ ‚Ñì) ‚Üí ‚¶É H-Level 2 A ‚¶Ñ ‚Üí Poset ‚Ñì ‚Ñì
AboveBelow‚Çö A      .Poset.Ob        = AboveBelow A
AboveBelow‚Çö A      .Poset._‚â§_       = _AB‚â§_
AboveBelow‚Çö A      .Poset.‚â§-thin    = AB‚â§-prop {sa = hlevel 2}
AboveBelow‚Çö A      .Poset.‚â§-refl    = AB‚â§-refl
AboveBelow‚Çö A      .Poset.‚â§-trans   = AB‚â§-trans
AboveBelow‚Çö A      .Poset.‚â§-antisym = AB‚â§-antisym

instance
  AboveBelow-bottom : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí Bottom (AboveBelow‚Çö A)
  AboveBelow-bottom .Bottom.bot = bt
  AboveBelow-bottom .Bottom.bot-is-bot _ = bt‚â§

  AboveBelow-top : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí Top (AboveBelow‚Çö A)
  AboveBelow-top .Top.top = tp
  AboveBelow-top .Top.top-is-top _ = ‚â§tp

  AboveBelow-joins : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí ‚¶É da : is-discrete A ‚¶Ñ  -- TODO how to apply Hedberg?
                   ‚Üí Has-joins (AboveBelow‚Çö A)
  AboveBelow-joins {x} {y} .Join.lub = x ‚äîab y
  AboveBelow-joins         .Join.has-join .is-join.l‚â§join = l‚â§‚äîab
  AboveBelow-joins {x}     .Join.has-join .is-join.r‚â§join = r‚â§‚äîab {x = x}
  AboveBelow-joins         .Join.has-join .is-join.least = ‚äîab‚â§

  AboveBelow-meets : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí ‚¶É da : is-discrete A ‚¶Ñ  -- TODO how to apply Hedberg?
                   ‚Üí Has-meets (AboveBelow‚Çö A)
  AboveBelow-meets {x} {y} .Meet.glb = x ‚äìab y
  AboveBelow-meets         .Meet.has-meet .is-meet.meet‚â§l = ‚äìab‚â§l
  AboveBelow-meets {x}     .Meet.has-meet .is-meet.meet‚â§r = ‚äìab‚â§r {x = x}
  AboveBelow-meets         .Meet.has-meet .is-meet.greatest = ‚â§‚äìab

  AboveBelow-join-slat : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí ‚¶É da : is-discrete A ‚¶Ñ  -- TODO how to apply Hedberg?
                       ‚Üí is-join-semilattice (AboveBelow‚Çö A)
  AboveBelow-join-slat .is-join-semilattice.has-bottom = AboveBelow-bottom
  AboveBelow-join-slat .is-join-semilattice.has-joins  = AboveBelow-joins

  AboveBelow-meet-slat : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí ‚¶É da : is-discrete A ‚¶Ñ  -- TODO how to apply Hedberg?
                       ‚Üí is-meet-semilattice (AboveBelow‚Çö A)
  AboveBelow-meet-slat .is-meet-semilattice.has-top   = AboveBelow-top
  AboveBelow-meet-slat .is-meet-semilattice.has-meets = AboveBelow-meets

  AboveBelow-lat : ‚¶É sa : H-Level 2 A ‚¶Ñ ‚Üí ‚¶É da : is-discrete A ‚¶Ñ  -- TODO how to apply Hedberg?
                 ‚Üí is-lattice (AboveBelow‚Çö A)
  AboveBelow-lat .is-lattice.has-join-slat = AboveBelow-join-slat
  AboveBelow-lat .is-lattice.has-meet-slat = AboveBelow-meet-slat
